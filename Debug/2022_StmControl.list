
2022_StmControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000112a8  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e18  08011578  08011578  00021578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013390  08013390  00023390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08013398  08013398  00023398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080133a0  080133a0  000233a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000010c  24000000  080133a4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000114c  24000110  080134b0  00030110  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2400125c  080134b0  0003125c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003010c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002cb3a  00000000  00000000  0003013a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003f10  00000000  00000000  0005cc74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001508  00000000  00000000  00060b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001418  00000000  00000000  00062090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000351ca  00000000  00000000  000634a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001b321  00000000  00000000  00098672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00154bd8  00000000  00000000  000b3993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0020856b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000063b8  00000000  00000000  002085c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000110 	.word	0x24000110
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08011560 	.word	0x08011560

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000114 	.word	0x24000114
 800030c:	08011560 	.word	0x08011560

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b96e 	b.w	8000614 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468c      	mov	ip, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	f040 8083 	bne.w	8000466 <__udivmoddi4+0x116>
 8000360:	428a      	cmp	r2, r1
 8000362:	4617      	mov	r7, r2
 8000364:	d947      	bls.n	80003f6 <__udivmoddi4+0xa6>
 8000366:	fab2 f282 	clz	r2, r2
 800036a:	b142      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036c:	f1c2 0020 	rsb	r0, r2, #32
 8000370:	fa24 f000 	lsr.w	r0, r4, r0
 8000374:	4091      	lsls	r1, r2
 8000376:	4097      	lsls	r7, r2
 8000378:	ea40 0c01 	orr.w	ip, r0, r1
 800037c:	4094      	lsls	r4, r2
 800037e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000382:	0c23      	lsrs	r3, r4, #16
 8000384:	fbbc f6f8 	udiv	r6, ip, r8
 8000388:	fa1f fe87 	uxth.w	lr, r7
 800038c:	fb08 c116 	mls	r1, r8, r6, ip
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f10e 	mul.w	r1, r6, lr
 8000398:	4299      	cmp	r1, r3
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x60>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a2:	f080 8119 	bcs.w	80005d8 <__udivmoddi4+0x288>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 8116 	bls.w	80005d8 <__udivmoddi4+0x288>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	443b      	add	r3, r7
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x8c>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ce:	f080 8105 	bcs.w	80005dc <__udivmoddi4+0x28c>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	f240 8102 	bls.w	80005dc <__udivmoddi4+0x28c>
 80003d8:	3802      	subs	r0, #2
 80003da:	443c      	add	r4, r7
 80003dc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	2600      	movs	r6, #0
 80003e6:	b11d      	cbz	r5, 80003f0 <__udivmoddi4+0xa0>
 80003e8:	40d4      	lsrs	r4, r2
 80003ea:	2300      	movs	r3, #0
 80003ec:	e9c5 4300 	strd	r4, r3, [r5]
 80003f0:	4631      	mov	r1, r6
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	b902      	cbnz	r2, 80003fa <__udivmoddi4+0xaa>
 80003f8:	deff      	udf	#255	; 0xff
 80003fa:	fab2 f282 	clz	r2, r2
 80003fe:	2a00      	cmp	r2, #0
 8000400:	d150      	bne.n	80004a4 <__udivmoddi4+0x154>
 8000402:	1bcb      	subs	r3, r1, r7
 8000404:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000408:	fa1f f887 	uxth.w	r8, r7
 800040c:	2601      	movs	r6, #1
 800040e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000412:	0c21      	lsrs	r1, r4, #16
 8000414:	fb0e 331c 	mls	r3, lr, ip, r3
 8000418:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800041c:	fb08 f30c 	mul.w	r3, r8, ip
 8000420:	428b      	cmp	r3, r1
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0xe4>
 8000424:	1879      	adds	r1, r7, r1
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0xe2>
 800042c:	428b      	cmp	r3, r1
 800042e:	f200 80e9 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 8000432:	4684      	mov	ip, r0
 8000434:	1ac9      	subs	r1, r1, r3
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000440:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x10c>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x10a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80d9 	bhi.w	800060c <__udivmoddi4+0x2bc>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e7bf      	b.n	80003e6 <__udivmoddi4+0x96>
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x12e>
 800046a:	2d00      	cmp	r5, #0
 800046c:	f000 80b1 	beq.w	80005d2 <__udivmoddi4+0x282>
 8000470:	2600      	movs	r6, #0
 8000472:	e9c5 0100 	strd	r0, r1, [r5]
 8000476:	4630      	mov	r0, r6
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f683 	clz	r6, r3
 8000482:	2e00      	cmp	r6, #0
 8000484:	d14a      	bne.n	800051c <__udivmoddi4+0x1cc>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0x140>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80b8 	bhi.w	8000600 <__udivmoddi4+0x2b0>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0103 	sbc.w	r1, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	468c      	mov	ip, r1
 800049a:	2d00      	cmp	r5, #0
 800049c:	d0a8      	beq.n	80003f0 <__udivmoddi4+0xa0>
 800049e:	e9c5 4c00 	strd	r4, ip, [r5]
 80004a2:	e7a5      	b.n	80003f0 <__udivmoddi4+0xa0>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f603 	lsr.w	r6, r0, r3
 80004ac:	4097      	lsls	r7, r2
 80004ae:	fa01 f002 	lsl.w	r0, r1, r2
 80004b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b6:	40d9      	lsrs	r1, r3
 80004b8:	4330      	orrs	r0, r6
 80004ba:	0c03      	lsrs	r3, r0, #16
 80004bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80004c0:	fa1f f887 	uxth.w	r8, r7
 80004c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb06 f108 	mul.w	r1, r6, r8
 80004d0:	4299      	cmp	r1, r3
 80004d2:	fa04 f402 	lsl.w	r4, r4, r2
 80004d6:	d909      	bls.n	80004ec <__udivmoddi4+0x19c>
 80004d8:	18fb      	adds	r3, r7, r3
 80004da:	f106 3cff 	add.w	ip, r6, #4294967295
 80004de:	f080 808d 	bcs.w	80005fc <__udivmoddi4+0x2ac>
 80004e2:	4299      	cmp	r1, r3
 80004e4:	f240 808a 	bls.w	80005fc <__udivmoddi4+0x2ac>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	443b      	add	r3, r7
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b281      	uxth	r1, r0
 80004f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fc:	fb00 f308 	mul.w	r3, r0, r8
 8000500:	428b      	cmp	r3, r1
 8000502:	d907      	bls.n	8000514 <__udivmoddi4+0x1c4>
 8000504:	1879      	adds	r1, r7, r1
 8000506:	f100 3cff 	add.w	ip, r0, #4294967295
 800050a:	d273      	bcs.n	80005f4 <__udivmoddi4+0x2a4>
 800050c:	428b      	cmp	r3, r1
 800050e:	d971      	bls.n	80005f4 <__udivmoddi4+0x2a4>
 8000510:	3802      	subs	r0, #2
 8000512:	4439      	add	r1, r7
 8000514:	1acb      	subs	r3, r1, r3
 8000516:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800051a:	e778      	b.n	800040e <__udivmoddi4+0xbe>
 800051c:	f1c6 0c20 	rsb	ip, r6, #32
 8000520:	fa03 f406 	lsl.w	r4, r3, r6
 8000524:	fa22 f30c 	lsr.w	r3, r2, ip
 8000528:	431c      	orrs	r4, r3
 800052a:	fa20 f70c 	lsr.w	r7, r0, ip
 800052e:	fa01 f306 	lsl.w	r3, r1, r6
 8000532:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000536:	fa21 f10c 	lsr.w	r1, r1, ip
 800053a:	431f      	orrs	r7, r3
 800053c:	0c3b      	lsrs	r3, r7, #16
 800053e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000542:	fa1f f884 	uxth.w	r8, r4
 8000546:	fb0e 1119 	mls	r1, lr, r9, r1
 800054a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800054e:	fb09 fa08 	mul.w	sl, r9, r8
 8000552:	458a      	cmp	sl, r1
 8000554:	fa02 f206 	lsl.w	r2, r2, r6
 8000558:	fa00 f306 	lsl.w	r3, r0, r6
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x220>
 800055e:	1861      	adds	r1, r4, r1
 8000560:	f109 30ff 	add.w	r0, r9, #4294967295
 8000564:	d248      	bcs.n	80005f8 <__udivmoddi4+0x2a8>
 8000566:	458a      	cmp	sl, r1
 8000568:	d946      	bls.n	80005f8 <__udivmoddi4+0x2a8>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4421      	add	r1, r4
 8000570:	eba1 010a 	sub.w	r1, r1, sl
 8000574:	b2bf      	uxth	r7, r7
 8000576:	fbb1 f0fe 	udiv	r0, r1, lr
 800057a:	fb0e 1110 	mls	r1, lr, r0, r1
 800057e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000582:	fb00 f808 	mul.w	r8, r0, r8
 8000586:	45b8      	cmp	r8, r7
 8000588:	d907      	bls.n	800059a <__udivmoddi4+0x24a>
 800058a:	19e7      	adds	r7, r4, r7
 800058c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000590:	d22e      	bcs.n	80005f0 <__udivmoddi4+0x2a0>
 8000592:	45b8      	cmp	r8, r7
 8000594:	d92c      	bls.n	80005f0 <__udivmoddi4+0x2a0>
 8000596:	3802      	subs	r0, #2
 8000598:	4427      	add	r7, r4
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	eba7 0708 	sub.w	r7, r7, r8
 80005a2:	fba0 8902 	umull	r8, r9, r0, r2
 80005a6:	454f      	cmp	r7, r9
 80005a8:	46c6      	mov	lr, r8
 80005aa:	4649      	mov	r1, r9
 80005ac:	d31a      	bcc.n	80005e4 <__udivmoddi4+0x294>
 80005ae:	d017      	beq.n	80005e0 <__udivmoddi4+0x290>
 80005b0:	b15d      	cbz	r5, 80005ca <__udivmoddi4+0x27a>
 80005b2:	ebb3 020e 	subs.w	r2, r3, lr
 80005b6:	eb67 0701 	sbc.w	r7, r7, r1
 80005ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005be:	40f2      	lsrs	r2, r6
 80005c0:	ea4c 0202 	orr.w	r2, ip, r2
 80005c4:	40f7      	lsrs	r7, r6
 80005c6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ca:	2600      	movs	r6, #0
 80005cc:	4631      	mov	r1, r6
 80005ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e70b      	b.n	80003f0 <__udivmoddi4+0xa0>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0x60>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6fd      	b.n	80003dc <__udivmoddi4+0x8c>
 80005e0:	4543      	cmp	r3, r8
 80005e2:	d2e5      	bcs.n	80005b0 <__udivmoddi4+0x260>
 80005e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005e8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7df      	b.n	80005b0 <__udivmoddi4+0x260>
 80005f0:	4608      	mov	r0, r1
 80005f2:	e7d2      	b.n	800059a <__udivmoddi4+0x24a>
 80005f4:	4660      	mov	r0, ip
 80005f6:	e78d      	b.n	8000514 <__udivmoddi4+0x1c4>
 80005f8:	4681      	mov	r9, r0
 80005fa:	e7b9      	b.n	8000570 <__udivmoddi4+0x220>
 80005fc:	4666      	mov	r6, ip
 80005fe:	e775      	b.n	80004ec <__udivmoddi4+0x19c>
 8000600:	4630      	mov	r0, r6
 8000602:	e74a      	b.n	800049a <__udivmoddi4+0x14a>
 8000604:	f1ac 0c02 	sub.w	ip, ip, #2
 8000608:	4439      	add	r1, r7
 800060a:	e713      	b.n	8000434 <__udivmoddi4+0xe4>
 800060c:	3802      	subs	r0, #2
 800060e:	443c      	add	r4, r7
 8000610:	e724      	b.n	800045c <__udivmoddi4+0x10c>
 8000612:	bf00      	nop

08000614 <__aeabi_idiv0>:
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop

08000618 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	0a5a      	lsrs	r2, r3, #9
 8000628:	490f      	ldr	r1, [pc, #60]	; (8000668 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800062a:	fba1 1202 	umull	r1, r2, r1, r2
 800062e:	09d2      	lsrs	r2, r2, #7
 8000630:	490e      	ldr	r1, [pc, #56]	; (800066c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000632:	fb01 f202 	mul.w	r2, r1, r2
 8000636:	1a9b      	subs	r3, r3, r2
 8000638:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	0a5b      	lsrs	r3, r3, #9
 8000640:	4a09      	ldr	r2, [pc, #36]	; (8000668 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000642:	fba2 2303 	umull	r2, r3, r2, r3
 8000646:	09db      	lsrs	r3, r3, #7
 8000648:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	441a      	add	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	68fa      	ldr	r2, [r7, #12]
 800065a:	601a      	str	r2, [r3, #0]
}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	00044b83 	.word	0x00044b83
 800066c:	3b9aca00 	.word	0x3b9aca00

08000670 <arctangent2>:
#define L2 10.975 //small arm's length
#define error 2.03 //the distance between servo and middle of circle

//step function
double arctangent2 (double x,double y);
double arctangent2 (double x,double y){
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
 8000676:	ed87 0b02 	vstr	d0, [r7, #8]
 800067a:	ed87 1b00 	vstr	d1, [r7]
    double answer;
    if(x>0) answer=(atan(y/x))*180.0/PI;
 800067e:	ed97 7b02 	vldr	d7, [r7, #8]
 8000682:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800068a:	dd16      	ble.n	80006ba <arctangent2+0x4a>
 800068c:	ed97 6b00 	vldr	d6, [r7]
 8000690:	ed97 7b02 	vldr	d7, [r7, #8]
 8000694:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8000698:	eeb0 0b45 	vmov.f64	d0, d5
 800069c:	f00f fcd4 	bl	8010048 <atan>
 80006a0:	eeb0 7b40 	vmov.f64	d7, d0
 80006a4:	ed9f 6b46 	vldr	d6, [pc, #280]	; 80007c0 <arctangent2+0x150>
 80006a8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006ac:	ed9f 5b46 	vldr	d5, [pc, #280]	; 80007c8 <arctangent2+0x158>
 80006b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006b4:	ed87 7b04 	vstr	d7, [r7, #16]
 80006b8:	e078      	b.n	80007ac <arctangent2+0x13c>
    else if(x<0&&y>=0) answer=atan(y/x)*180.0/PI+180;
 80006ba:	ed97 7b02 	vldr	d7, [r7, #8]
 80006be:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006c6:	d521      	bpl.n	800070c <arctangent2+0x9c>
 80006c8:	ed97 7b00 	vldr	d7, [r7]
 80006cc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006d4:	db1a      	blt.n	800070c <arctangent2+0x9c>
 80006d6:	ed97 6b00 	vldr	d6, [r7]
 80006da:	ed97 7b02 	vldr	d7, [r7, #8]
 80006de:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80006e2:	eeb0 0b45 	vmov.f64	d0, d5
 80006e6:	f00f fcaf 	bl	8010048 <atan>
 80006ea:	eeb0 7b40 	vmov.f64	d7, d0
 80006ee:	ed9f 6b34 	vldr	d6, [pc, #208]	; 80007c0 <arctangent2+0x150>
 80006f2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006f6:	ed9f 5b34 	vldr	d5, [pc, #208]	; 80007c8 <arctangent2+0x158>
 80006fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80006fe:	ed9f 6b30 	vldr	d6, [pc, #192]	; 80007c0 <arctangent2+0x150>
 8000702:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000706:	ed87 7b04 	vstr	d7, [r7, #16]
 800070a:	e04f      	b.n	80007ac <arctangent2+0x13c>
    else if(x==0&&y>0) answer=90;
 800070c:	ed97 7b02 	vldr	d7, [r7, #8]
 8000710:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000718:	d10c      	bne.n	8000734 <arctangent2+0xc4>
 800071a:	ed97 7b00 	vldr	d7, [r7]
 800071e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000726:	dd05      	ble.n	8000734 <arctangent2+0xc4>
 8000728:	f04f 0200 	mov.w	r2, #0
 800072c:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <arctangent2+0x160>)
 800072e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000732:	e03b      	b.n	80007ac <arctangent2+0x13c>
    else if(x<0&&y<0) answer=atan(y/x)*180.0/PI-180;
 8000734:	ed97 7b02 	vldr	d7, [r7, #8]
 8000738:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800073c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000740:	d521      	bpl.n	8000786 <arctangent2+0x116>
 8000742:	ed97 7b00 	vldr	d7, [r7]
 8000746:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800074a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074e:	d51a      	bpl.n	8000786 <arctangent2+0x116>
 8000750:	ed97 6b00 	vldr	d6, [r7]
 8000754:	ed97 7b02 	vldr	d7, [r7, #8]
 8000758:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800075c:	eeb0 0b45 	vmov.f64	d0, d5
 8000760:	f00f fc72 	bl	8010048 <atan>
 8000764:	eeb0 7b40 	vmov.f64	d7, d0
 8000768:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80007c0 <arctangent2+0x150>
 800076c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000770:	ed9f 5b15 	vldr	d5, [pc, #84]	; 80007c8 <arctangent2+0x158>
 8000774:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000778:	ed9f 6b11 	vldr	d6, [pc, #68]	; 80007c0 <arctangent2+0x150>
 800077c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000780:	ed87 7b04 	vstr	d7, [r7, #16]
 8000784:	e012      	b.n	80007ac <arctangent2+0x13c>
    else if(x==0&&y<0) answer=-90;
 8000786:	ed97 7b02 	vldr	d7, [r7, #8]
 800078a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800078e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000792:	d10b      	bne.n	80007ac <arctangent2+0x13c>
 8000794:	ed97 7b00 	vldr	d7, [r7]
 8000798:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800079c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007a0:	d504      	bpl.n	80007ac <arctangent2+0x13c>
 80007a2:	f04f 0200 	mov.w	r2, #0
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <arctangent2+0x164>)
 80007a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return answer;
 80007ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80007b0:	ec43 2b17 	vmov	d7, r2, r3
}
 80007b4:	eeb0 0b47 	vmov.f64	d0, d7
 80007b8:	3718      	adds	r7, #24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	00000000 	.word	0x00000000
 80007c4:	40668000 	.word	0x40668000
 80007c8:	53c8d4f1 	.word	0x53c8d4f1
 80007cc:	400921fb 	.word	0x400921fb
 80007d0:	40568000 	.word	0x40568000
 80007d4:	c0568000 	.word	0xc0568000

080007d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	ed2d 8b02 	vpush	{d8}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	Step1_AngleGoal = 0;Step2_AngleGoal = 0;Step3_AngleGoal = 0;
 80007e2:	49d1      	ldr	r1, [pc, #836]	; (8000b28 <main+0x350>)
 80007e4:	f04f 0200 	mov.w	r2, #0
 80007e8:	f04f 0300 	mov.w	r3, #0
 80007ec:	e9c1 2300 	strd	r2, r3, [r1]
 80007f0:	49ce      	ldr	r1, [pc, #824]	; (8000b2c <main+0x354>)
 80007f2:	f04f 0200 	mov.w	r2, #0
 80007f6:	f04f 0300 	mov.w	r3, #0
 80007fa:	e9c1 2300 	strd	r2, r3, [r1]
 80007fe:	49cc      	ldr	r1, [pc, #816]	; (8000b30 <main+0x358>)
 8000800:	f04f 0200 	mov.w	r2, #0
 8000804:	f04f 0300 	mov.w	r3, #0
 8000808:	e9c1 2300 	strd	r2, r3, [r1]
	angle_before1=98.151;angle_before2=125.69;angle_before3=0;
 800080c:	49c9      	ldr	r1, [pc, #804]	; (8000b34 <main+0x35c>)
 800080e:	a3c0      	add	r3, pc, #768	; (adr r3, 8000b10 <main+0x338>)
 8000810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000814:	e9c1 2300 	strd	r2, r3, [r1]
 8000818:	49c7      	ldr	r1, [pc, #796]	; (8000b38 <main+0x360>)
 800081a:	a3bf      	add	r3, pc, #764	; (adr r3, 8000b18 <main+0x340>)
 800081c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000820:	e9c1 2300 	strd	r2, r3, [r1]
 8000824:	49c5      	ldr	r1, [pc, #788]	; (8000b3c <main+0x364>)
 8000826:	f04f 0200 	mov.w	r2, #0
 800082a:	f04f 0300 	mov.w	r3, #0
 800082e:	e9c1 2300 	strd	r2, r3, [r1]
	temp=0;
 8000832:	4bc3      	ldr	r3, [pc, #780]	; (8000b40 <main+0x368>)
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000838:	f005 ff4c 	bl	80066d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083c:	f000 fce2 	bl	8001204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000840:	f001 fa44 	bl	8001ccc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000844:	f000 fdde 	bl	8001404 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000848:	f000 fe30 	bl	80014ac <MX_TIM3_Init>
  MX_TIM4_Init();
 800084c:	f000 fe84 	bl	8001558 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000850:	f000 fed8 	bl	8001604 <MX_TIM5_Init>
  MX_TIM6_Init();
 8000854:	f000 ff2c 	bl	80016b0 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000858:	f000 ff60 	bl	800171c <MX_TIM7_Init>
  MX_TIM8_Init();
 800085c:	f000 ff94 	bl	8001788 <MX_TIM8_Init>
  MX_TIM12_Init();
 8000860:	f000 ffe6 	bl	8001830 <MX_TIM12_Init>
  MX_TIM13_Init();
 8000864:	f001 f834 	bl	80018d0 <MX_TIM13_Init>
  MX_TIM15_Init();
 8000868:	f001 f856 	bl	8001918 <MX_TIM15_Init>
  MX_TIM1_Init();
 800086c:	f000 fd3a 	bl	80012e4 <MX_TIM1_Init>
  MX_TIM16_Init();
 8000870:	f001 f8e4 	bl	8001a3c <MX_TIM16_Init>
  MX_DMA_Init();
 8000874:	f001 fa02 	bl	8001c7c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000878:	f001 f9b4 	bl	8001be4 <MX_USART3_UART_Init>
  MX_TIM23_Init();
 800087c:	f001 f958 	bl	8001b30 <MX_TIM23_Init>
  /* USER CODE BEGIN 2 */
  	setup();
 8000880:	f004 fa5a 	bl	8004d38 <setup>

    HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_1); //encoder 1/ time2
 8000884:	2100      	movs	r1, #0
 8000886:	48af      	ldr	r0, [pc, #700]	; (8000b44 <main+0x36c>)
 8000888:	f00b fe46 	bl	800c518 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_2);
 800088c:	2104      	movs	r1, #4
 800088e:	48ad      	ldr	r0, [pc, #692]	; (8000b44 <main+0x36c>)
 8000890:	f00b fe42 	bl	800c518 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_1); //encoder 2/ time5
 8000894:	2100      	movs	r1, #0
 8000896:	48ac      	ldr	r0, [pc, #688]	; (8000b48 <main+0x370>)
 8000898:	f00b fe3e 	bl	800c518 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim5,TIM_CHANNEL_2);
 800089c:	2104      	movs	r1, #4
 800089e:	48aa      	ldr	r0, [pc, #680]	; (8000b48 <main+0x370>)
 80008a0:	f00b fe3a 	bl	800c518 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_1); //encoder 3/ time3
 80008a4:	2100      	movs	r1, #0
 80008a6:	48a9      	ldr	r0, [pc, #676]	; (8000b4c <main+0x374>)
 80008a8:	f00b fe36 	bl	800c518 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_2);
 80008ac:	2104      	movs	r1, #4
 80008ae:	48a7      	ldr	r0, [pc, #668]	; (8000b4c <main+0x374>)
 80008b0:	f00b fe32 	bl	800c518 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_1); //encoder 4/ time4
 80008b4:	2100      	movs	r1, #0
 80008b6:	48a6      	ldr	r0, [pc, #664]	; (8000b50 <main+0x378>)
 80008b8:	f00b fe2e 	bl	800c518 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4,TIM_CHANNEL_2);
 80008bc:	2104      	movs	r1, #4
 80008be:	48a4      	ldr	r0, [pc, #656]	; (8000b50 <main+0x378>)
 80008c0:	f00b fe2a 	bl	800c518 <HAL_TIM_Encoder_Start>

    HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_2); //vnh pwm 1
 80008c4:	2104      	movs	r1, #4
 80008c6:	48a3      	ldr	r0, [pc, #652]	; (8000b54 <main+0x37c>)
 80008c8:	f00b fc64 	bl	800c194 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim12,TIM_CHANNEL_1); //vnh pwm 2
 80008cc:	2100      	movs	r1, #0
 80008ce:	48a1      	ldr	r0, [pc, #644]	; (8000b54 <main+0x37c>)
 80008d0:	f00b fc60 	bl	800c194 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_1); //vnh pwm 3
 80008d4:	2100      	movs	r1, #0
 80008d6:	48a0      	ldr	r0, [pc, #640]	; (8000b58 <main+0x380>)
 80008d8:	f00b fc5c 	bl	800c194 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim15,TIM_CHANNEL_2); //vnh pwm 4
 80008dc:	2104      	movs	r1, #4
 80008de:	489e      	ldr	r0, [pc, #632]	; (8000b58 <main+0x380>)
 80008e0:	f00b fc58 	bl	800c194 <HAL_TIM_PWM_Start>

    HAL_TIM_Base_Start_IT(&htim13); //clock for dcmotor
 80008e4:	489d      	ldr	r0, [pc, #628]	; (8000b5c <main+0x384>)
 80008e6:	f00b fb77 	bl	800bfd8 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim6); //clock for step1
 80008ea:	489d      	ldr	r0, [pc, #628]	; (8000b60 <main+0x388>)
 80008ec:	f00b fb74 	bl	800bfd8 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim7); //clock for step2
 80008f0:	489c      	ldr	r0, [pc, #624]	; (8000b64 <main+0x38c>)
 80008f2:	f00b fb71 	bl	800bfd8 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim8); //clock for step3
 80008f6:	489c      	ldr	r0, [pc, #624]	; (8000b68 <main+0x390>)
 80008f8:	f00b fb6e 	bl	800bfd8 <HAL_TIM_Base_Start_IT>

    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //servo1
 80008fc:	2100      	movs	r1, #0
 80008fe:	489b      	ldr	r0, [pc, #620]	; (8000b6c <main+0x394>)
 8000900:	f00b fc48 	bl	800c194 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1); //servo2
 8000904:	2100      	movs	r1, #0
 8000906:	489a      	ldr	r0, [pc, #616]	; (8000b70 <main+0x398>)
 8000908:	f00b fc44 	bl	800c194 <HAL_TIM_PWM_Start>
    	*/



    	 // step calculate
    		float a = 12;
 800090c:	4b99      	ldr	r3, [pc, #612]	; (8000b74 <main+0x39c>)
 800090e:	607b      	str	r3, [r7, #4]
    		float b = 9.65;
 8000910:	4b99      	ldr	r3, [pc, #612]	; (8000b78 <main+0x3a0>)
 8000912:	603b      	str	r3, [r7, #0]
    	   DC3_RpsGoal = vel[1] - vel[0] + vel[2]*(a+b);
 8000914:	4b99      	ldr	r3, [pc, #612]	; (8000b7c <main+0x3a4>)
 8000916:	ed93 6b02 	vldr	d6, [r3, #8]
 800091a:	4b98      	ldr	r3, [pc, #608]	; (8000b7c <main+0x3a4>)
 800091c:	ed93 7b00 	vldr	d7, [r3]
 8000920:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000924:	4b95      	ldr	r3, [pc, #596]	; (8000b7c <main+0x3a4>)
 8000926:	ed93 5b04 	vldr	d5, [r3, #16]
 800092a:	ed97 7a01 	vldr	s14, [r7, #4]
 800092e:	edd7 7a00 	vldr	s15, [r7]
 8000932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000936:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800093a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800093e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000942:	4b8f      	ldr	r3, [pc, #572]	; (8000b80 <main+0x3a8>)
 8000944:	ed83 7b00 	vstr	d7, [r3]
    	   DC4_RpsGoal = vel[1] + vel[0] - vel[2]*(a+b);
 8000948:	4b8c      	ldr	r3, [pc, #560]	; (8000b7c <main+0x3a4>)
 800094a:	ed93 6b02 	vldr	d6, [r3, #8]
 800094e:	4b8b      	ldr	r3, [pc, #556]	; (8000b7c <main+0x3a4>)
 8000950:	ed93 7b00 	vldr	d7, [r3]
 8000954:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000958:	4b88      	ldr	r3, [pc, #544]	; (8000b7c <main+0x3a4>)
 800095a:	ed93 5b04 	vldr	d5, [r3, #16]
 800095e:	ed97 7a01 	vldr	s14, [r7, #4]
 8000962:	edd7 7a00 	vldr	s15, [r7]
 8000966:	ee77 7a27 	vadd.f32	s15, s14, s15
 800096a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800096e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000972:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000976:	4b83      	ldr	r3, [pc, #524]	; (8000b84 <main+0x3ac>)
 8000978:	ed83 7b00 	vstr	d7, [r3]
    	   DC2_RpsGoal = vel[1] - vel[0] - vel[2]*(a+b);
 800097c:	4b7f      	ldr	r3, [pc, #508]	; (8000b7c <main+0x3a4>)
 800097e:	ed93 6b02 	vldr	d6, [r3, #8]
 8000982:	4b7e      	ldr	r3, [pc, #504]	; (8000b7c <main+0x3a4>)
 8000984:	ed93 7b00 	vldr	d7, [r3]
 8000988:	ee36 6b47 	vsub.f64	d6, d6, d7
 800098c:	4b7b      	ldr	r3, [pc, #492]	; (8000b7c <main+0x3a4>)
 800098e:	ed93 5b04 	vldr	d5, [r3, #16]
 8000992:	ed97 7a01 	vldr	s14, [r7, #4]
 8000996:	edd7 7a00 	vldr	s15, [r7]
 800099a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800099e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009a2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80009a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80009aa:	4b77      	ldr	r3, [pc, #476]	; (8000b88 <main+0x3b0>)
 80009ac:	ed83 7b00 	vstr	d7, [r3]
    	   DC1_RpsGoal = vel[1] + vel[0] + vel[2]*(a+b);
 80009b0:	4b72      	ldr	r3, [pc, #456]	; (8000b7c <main+0x3a4>)
 80009b2:	ed93 6b02 	vldr	d6, [r3, #8]
 80009b6:	4b71      	ldr	r3, [pc, #452]	; (8000b7c <main+0x3a4>)
 80009b8:	ed93 7b00 	vldr	d7, [r3]
 80009bc:	ee36 6b07 	vadd.f64	d6, d6, d7
 80009c0:	4b6e      	ldr	r3, [pc, #440]	; (8000b7c <main+0x3a4>)
 80009c2:	ed93 5b04 	vldr	d5, [r3, #16]
 80009c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80009ca:	edd7 7a00 	vldr	s15, [r7]
 80009ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009d6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80009da:	ee36 7b07 	vadd.f64	d7, d6, d7
 80009de:	4b6b      	ldr	r3, [pc, #428]	; (8000b8c <main+0x3b4>)
 80009e0:	ed83 7b00 	vstr	d7, [r3]


			temp = 0;
 80009e4:	4b56      	ldr	r3, [pc, #344]	; (8000b40 <main+0x368>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
			angleb=arctangent2(x,y);
 80009ea:	4b69      	ldr	r3, [pc, #420]	; (8000b90 <main+0x3b8>)
 80009ec:	ed93 7b00 	vldr	d7, [r3]
 80009f0:	4b68      	ldr	r3, [pc, #416]	; (8000b94 <main+0x3bc>)
 80009f2:	ed93 6b00 	vldr	d6, [r3]
 80009f6:	eeb0 1b46 	vmov.f64	d1, d6
 80009fa:	eeb0 0b47 	vmov.f64	d0, d7
 80009fe:	f7ff fe37 	bl	8000670 <arctangent2>
 8000a02:	eeb0 7b40 	vmov.f64	d7, d0
 8000a06:	4b64      	ldr	r3, [pc, #400]	; (8000b98 <main+0x3c0>)
 8000a08:	ed83 7b00 	vstr	d7, [r3]
			Lcorrect=pow((x*x+y*y-error*error),0.5);
 8000a0c:	4b60      	ldr	r3, [pc, #384]	; (8000b90 <main+0x3b8>)
 8000a0e:	ed93 6b00 	vldr	d6, [r3]
 8000a12:	4b5f      	ldr	r3, [pc, #380]	; (8000b90 <main+0x3b8>)
 8000a14:	ed93 7b00 	vldr	d7, [r3]
 8000a18:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000a1c:	4b5d      	ldr	r3, [pc, #372]	; (8000b94 <main+0x3bc>)
 8000a1e:	ed93 5b00 	vldr	d5, [r3]
 8000a22:	4b5c      	ldr	r3, [pc, #368]	; (8000b94 <main+0x3bc>)
 8000a24:	ed93 7b00 	vldr	d7, [r3]
 8000a28:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000a2c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000a30:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8000b20 <main+0x348>
 8000a34:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000a38:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 8000a3c:	eeb0 0b47 	vmov.f64	d0, d7
 8000a40:	f00f f83e 	bl	800fac0 <pow>
 8000a44:	eeb0 7b40 	vmov.f64	d7, d0
 8000a48:	4b54      	ldr	r3, [pc, #336]	; (8000b9c <main+0x3c4>)
 8000a4a:	ed83 7b00 	vstr	d7, [r3]
			cerror=(x*x+y*y+Lcorrect*Lcorrect-error*error)/(2*pow(x*x+y*y,0.5)*Lcorrect);
 8000a4e:	4b50      	ldr	r3, [pc, #320]	; (8000b90 <main+0x3b8>)
 8000a50:	ed93 6b00 	vldr	d6, [r3]
 8000a54:	4b4e      	ldr	r3, [pc, #312]	; (8000b90 <main+0x3b8>)
 8000a56:	ed93 7b00 	vldr	d7, [r3]
 8000a5a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000a5e:	4b4d      	ldr	r3, [pc, #308]	; (8000b94 <main+0x3bc>)
 8000a60:	ed93 5b00 	vldr	d5, [r3]
 8000a64:	4b4b      	ldr	r3, [pc, #300]	; (8000b94 <main+0x3bc>)
 8000a66:	ed93 7b00 	vldr	d7, [r3]
 8000a6a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000a6e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000a72:	4b4a      	ldr	r3, [pc, #296]	; (8000b9c <main+0x3c4>)
 8000a74:	ed93 5b00 	vldr	d5, [r3]
 8000a78:	4b48      	ldr	r3, [pc, #288]	; (8000b9c <main+0x3c4>)
 8000a7a:	ed93 7b00 	vldr	d7, [r3]
 8000a7e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000a82:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000a86:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8000b20 <main+0x348>
 8000a8a:	ee37 8b46 	vsub.f64	d8, d7, d6
 8000a8e:	4b40      	ldr	r3, [pc, #256]	; (8000b90 <main+0x3b8>)
 8000a90:	ed93 6b00 	vldr	d6, [r3]
 8000a94:	4b3e      	ldr	r3, [pc, #248]	; (8000b90 <main+0x3b8>)
 8000a96:	ed93 7b00 	vldr	d7, [r3]
 8000a9a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000a9e:	4b3d      	ldr	r3, [pc, #244]	; (8000b94 <main+0x3bc>)
 8000aa0:	ed93 5b00 	vldr	d5, [r3]
 8000aa4:	4b3b      	ldr	r3, [pc, #236]	; (8000b94 <main+0x3bc>)
 8000aa6:	ed93 7b00 	vldr	d7, [r3]
 8000aaa:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000aae:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ab2:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 8000ab6:	eeb0 0b47 	vmov.f64	d0, d7
 8000aba:	f00f f801 	bl	800fac0 <pow>
 8000abe:	eeb0 7b40 	vmov.f64	d7, d0
 8000ac2:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000ac6:	4b35      	ldr	r3, [pc, #212]	; (8000b9c <main+0x3c4>)
 8000ac8:	ed93 7b00 	vldr	d7, [r3]
 8000acc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000ad0:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8000ad4:	4b32      	ldr	r3, [pc, #200]	; (8000ba0 <main+0x3c8>)
 8000ad6:	ed83 7b00 	vstr	d7, [r3]
			if(cerror>1||cerror<-1) temp=1;
 8000ada:	4b31      	ldr	r3, [pc, #196]	; (8000ba0 <main+0x3c8>)
 8000adc:	ed93 7b00 	vldr	d7, [r3]
 8000ae0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000ae4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aec:	dc09      	bgt.n	8000b02 <main+0x32a>
 8000aee:	4b2c      	ldr	r3, [pc, #176]	; (8000ba0 <main+0x3c8>)
 8000af0:	ed93 7b00 	vldr	d7, [r3]
 8000af4:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8000af8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b00:	d550      	bpl.n	8000ba4 <main+0x3cc>
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <main+0x368>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	e04c      	b.n	8000ba4 <main+0x3cc>
 8000b0a:	bf00      	nop
 8000b0c:	f3af 8000 	nop.w
 8000b10:	fbe76c8b 	.word	0xfbe76c8b
 8000b14:	405889a9 	.word	0x405889a9
 8000b18:	f5c28f5c 	.word	0xf5c28f5c
 8000b1c:	405f6c28 	.word	0x405f6c28
 8000b20:	35a85878 	.word	0x35a85878
 8000b24:	40107bcd 	.word	0x40107bcd
 8000b28:	240001e8 	.word	0x240001e8
 8000b2c:	240001f0 	.word	0x240001f0
 8000b30:	240001f8 	.word	0x240001f8
 8000b34:	24000070 	.word	0x24000070
 8000b38:	24000078 	.word	0x24000078
 8000b3c:	24000218 	.word	0x24000218
 8000b40:	24000268 	.word	0x24000268
 8000b44:	240010bc 	.word	0x240010bc
 8000b48:	24000f24 	.word	0x24000f24
 8000b4c:	24000f70 	.word	0x24000f70
 8000b50:	24000d00 	.word	0x24000d00
 8000b54:	24001158 	.word	0x24001158
 8000b58:	24000e60 	.word	0x24000e60
 8000b5c:	24000fc8 	.word	0x24000fc8
 8000b60:	24001020 	.word	0x24001020
 8000b64:	240011fc 	.word	0x240011fc
 8000b68:	24000cb4 	.word	0x24000cb4
 8000b6c:	2400106c 	.word	0x2400106c
 8000b70:	240011b0 	.word	0x240011b0
 8000b74:	41400000 	.word	0x41400000
 8000b78:	411a6666 	.word	0x411a6666
 8000b7c:	24000298 	.word	0x24000298
 8000b80:	24000140 	.word	0x24000140
 8000b84:	24000148 	.word	0x24000148
 8000b88:	24000138 	.word	0x24000138
 8000b8c:	24000130 	.word	0x24000130
 8000b90:	240002b8 	.word	0x240002b8
 8000b94:	240002c0 	.word	0x240002c0
 8000b98:	24000260 	.word	0x24000260
 8000b9c:	24000220 	.word	0x24000220
 8000ba0:	24000238 	.word	0x24000238
			angle_error=acos(cerror);
 8000ba4:	4bd2      	ldr	r3, [pc, #840]	; (8000ef0 <main+0x718>)
 8000ba6:	ed93 7b00 	vldr	d7, [r3]
 8000baa:	eeb0 0b47 	vmov.f64	d0, d7
 8000bae:	f00f fbe3 	bl	8010378 <acos>
 8000bb2:	eeb0 7b40 	vmov.f64	d7, d0
 8000bb6:	4bcf      	ldr	r3, [pc, #828]	; (8000ef4 <main+0x71c>)
 8000bb8:	ed83 7b00 	vstr	d7, [r3]
			if(temp==1)angle_true=angleb-angle_error;
 8000bbc:	4bce      	ldr	r3, [pc, #824]	; (8000ef8 <main+0x720>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d10a      	bne.n	8000bda <main+0x402>
 8000bc4:	4bcd      	ldr	r3, [pc, #820]	; (8000efc <main+0x724>)
 8000bc6:	ed93 6b00 	vldr	d6, [r3]
 8000bca:	4bca      	ldr	r3, [pc, #808]	; (8000ef4 <main+0x71c>)
 8000bcc:	ed93 7b00 	vldr	d7, [r3]
 8000bd0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000bd4:	4bca      	ldr	r3, [pc, #808]	; (8000f00 <main+0x728>)
 8000bd6:	ed83 7b00 	vstr	d7, [r3]
			x_true=Lcorrect*cos(angle_true);
 8000bda:	4bc9      	ldr	r3, [pc, #804]	; (8000f00 <main+0x728>)
 8000bdc:	ed93 7b00 	vldr	d7, [r3]
 8000be0:	eeb0 0b47 	vmov.f64	d0, d7
 8000be4:	f00f fb2c 	bl	8010240 <cos>
 8000be8:	eeb0 6b40 	vmov.f64	d6, d0
 8000bec:	4bc5      	ldr	r3, [pc, #788]	; (8000f04 <main+0x72c>)
 8000bee:	ed93 7b00 	vldr	d7, [r3]
 8000bf2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000bf6:	4bc4      	ldr	r3, [pc, #784]	; (8000f08 <main+0x730>)
 8000bf8:	ed83 7b00 	vstr	d7, [r3]
			y_true=Lcorrect*sin(angle_true);
 8000bfc:	4bc0      	ldr	r3, [pc, #768]	; (8000f00 <main+0x728>)
 8000bfe:	ed93 7b00 	vldr	d7, [r3]
 8000c02:	eeb0 0b47 	vmov.f64	d0, d7
 8000c06:	f00f fb6f 	bl	80102e8 <sin>
 8000c0a:	eeb0 6b40 	vmov.f64	d6, d0
 8000c0e:	4bbd      	ldr	r3, [pc, #756]	; (8000f04 <main+0x72c>)
 8000c10:	ed93 7b00 	vldr	d7, [r3]
 8000c14:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000c18:	4bbc      	ldr	r3, [pc, #752]	; (8000f0c <main+0x734>)
 8000c1a:	ed83 7b00 	vstr	d7, [r3]
			c2=(x_true*x_true+y_true*y_true-L1*L1-L2*L2)/(2*L1*L2);
 8000c1e:	4bba      	ldr	r3, [pc, #744]	; (8000f08 <main+0x730>)
 8000c20:	ed93 6b00 	vldr	d6, [r3]
 8000c24:	4bb8      	ldr	r3, [pc, #736]	; (8000f08 <main+0x730>)
 8000c26:	ed93 7b00 	vldr	d7, [r3]
 8000c2a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000c2e:	4bb7      	ldr	r3, [pc, #732]	; (8000f0c <main+0x734>)
 8000c30:	ed93 5b00 	vldr	d5, [r3]
 8000c34:	4bb5      	ldr	r3, [pc, #724]	; (8000f0c <main+0x734>)
 8000c36:	ed93 7b00 	vldr	d7, [r3]
 8000c3a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000c3e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000c42:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8000ea0 <main+0x6c8>
 8000c46:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000c4a:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8000ea8 <main+0x6d0>
 8000c4e:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000c52:	ed9f 5b97 	vldr	d5, [pc, #604]	; 8000eb0 <main+0x6d8>
 8000c56:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c5a:	4bad      	ldr	r3, [pc, #692]	; (8000f10 <main+0x738>)
 8000c5c:	ed83 7b00 	vstr	d7, [r3]
			if(c2>1||c2<-1) temp=1;
 8000c60:	4bab      	ldr	r3, [pc, #684]	; (8000f10 <main+0x738>)
 8000c62:	ed93 7b00 	vldr	d7, [r3]
 8000c66:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000c6a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c72:	dc09      	bgt.n	8000c88 <main+0x4b0>
 8000c74:	4ba6      	ldr	r3, [pc, #664]	; (8000f10 <main+0x738>)
 8000c76:	ed93 7b00 	vldr	d7, [r3]
 8000c7a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8000c7e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c86:	d502      	bpl.n	8000c8e <main+0x4b6>
 8000c88:	4b9b      	ldr	r3, [pc, #620]	; (8000ef8 <main+0x720>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	601a      	str	r2, [r3, #0]
			if(temp==0) angle2_Now=(acos(c2))*180.0/PI;//small arm's angle
 8000c8e:	4b9a      	ldr	r3, [pc, #616]	; (8000ef8 <main+0x720>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d113      	bne.n	8000cbe <main+0x4e6>
 8000c96:	4b9e      	ldr	r3, [pc, #632]	; (8000f10 <main+0x738>)
 8000c98:	ed93 7b00 	vldr	d7, [r3]
 8000c9c:	eeb0 0b47 	vmov.f64	d0, d7
 8000ca0:	f00f fb6a 	bl	8010378 <acos>
 8000ca4:	eeb0 7b40 	vmov.f64	d7, d0
 8000ca8:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8000eb8 <main+0x6e0>
 8000cac:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000cb0:	ed9f 5b83 	vldr	d5, [pc, #524]	; 8000ec0 <main+0x6e8>
 8000cb4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cb8:	4b96      	ldr	r3, [pc, #600]	; (8000f14 <main+0x73c>)
 8000cba:	ed83 7b00 	vstr	d7, [r3]

			if(angle2_Now<(-54.31)&&angle_before2<125.69&&angle_before2>0) angle2_Now=360+angle2_Now;
 8000cbe:	4b95      	ldr	r3, [pc, #596]	; (8000f14 <main+0x73c>)
 8000cc0:	ed93 7b00 	vldr	d7, [r3]
 8000cc4:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8000ec8 <main+0x6f0>
 8000cc8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cd0:	d51b      	bpl.n	8000d0a <main+0x532>
 8000cd2:	4b91      	ldr	r3, [pc, #580]	; (8000f18 <main+0x740>)
 8000cd4:	ed93 7b00 	vldr	d7, [r3]
 8000cd8:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8000ed0 <main+0x6f8>
 8000cdc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ce4:	d511      	bpl.n	8000d0a <main+0x532>
 8000ce6:	4b8c      	ldr	r3, [pc, #560]	; (8000f18 <main+0x740>)
 8000ce8:	ed93 7b00 	vldr	d7, [r3]
 8000cec:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cf4:	dd09      	ble.n	8000d0a <main+0x532>
 8000cf6:	4b87      	ldr	r3, [pc, #540]	; (8000f14 <main+0x73c>)
 8000cf8:	ed93 7b00 	vldr	d7, [r3]
 8000cfc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8000ed8 <main+0x700>
 8000d00:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000d04:	4b83      	ldr	r3, [pc, #524]	; (8000f14 <main+0x73c>)
 8000d06:	ed83 7b00 	vstr	d7, [r3]
			if(angle2_Now<125.69&&angle2_Now>0&&angle_before2>305.69&&angle_before2>0) angle2_Now=360-angle2_Now;
 8000d0a:	4b82      	ldr	r3, [pc, #520]	; (8000f14 <main+0x73c>)
 8000d0c:	ed93 7b00 	vldr	d7, [r3]
 8000d10:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8000ed0 <main+0x6f8>
 8000d14:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d1c:	d523      	bpl.n	8000d66 <main+0x58e>
 8000d1e:	4b7d      	ldr	r3, [pc, #500]	; (8000f14 <main+0x73c>)
 8000d20:	ed93 7b00 	vldr	d7, [r3]
 8000d24:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2c:	dd1b      	ble.n	8000d66 <main+0x58e>
 8000d2e:	4b7a      	ldr	r3, [pc, #488]	; (8000f18 <main+0x740>)
 8000d30:	ed93 7b00 	vldr	d7, [r3]
 8000d34:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8000ee0 <main+0x708>
 8000d38:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d40:	dd11      	ble.n	8000d66 <main+0x58e>
 8000d42:	4b75      	ldr	r3, [pc, #468]	; (8000f18 <main+0x740>)
 8000d44:	ed93 7b00 	vldr	d7, [r3]
 8000d48:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d50:	dd09      	ble.n	8000d66 <main+0x58e>
 8000d52:	4b70      	ldr	r3, [pc, #448]	; (8000f14 <main+0x73c>)
 8000d54:	ed93 7b00 	vldr	d7, [r3]
 8000d58:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8000ed8 <main+0x700>
 8000d5c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d60:	4b6c      	ldr	r3, [pc, #432]	; (8000f14 <main+0x73c>)
 8000d62:	ed83 7b00 	vstr	d7, [r3]

			if(temp==0){
 8000d66:	4b64      	ldr	r3, [pc, #400]	; (8000ef8 <main+0x720>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f040 8092 	bne.w	8000e94 <main+0x6bc>
				cf=(L2*L2-(x_true*x_true+y_true*y_true)-L1*L1)/((-2)*L1*pow(x_true*x_true+y_true*y_true,0.5));
 8000d70:	4b65      	ldr	r3, [pc, #404]	; (8000f08 <main+0x730>)
 8000d72:	ed93 6b00 	vldr	d6, [r3]
 8000d76:	4b64      	ldr	r3, [pc, #400]	; (8000f08 <main+0x730>)
 8000d78:	ed93 7b00 	vldr	d7, [r3]
 8000d7c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000d80:	4b62      	ldr	r3, [pc, #392]	; (8000f0c <main+0x734>)
 8000d82:	ed93 5b00 	vldr	d5, [r3]
 8000d86:	4b61      	ldr	r3, [pc, #388]	; (8000f0c <main+0x734>)
 8000d88:	ed93 7b00 	vldr	d7, [r3]
 8000d8c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000d90:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000d94:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8000ea8 <main+0x6d0>
 8000d98:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000d9c:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8000ea0 <main+0x6c8>
 8000da0:	ee37 8b46 	vsub.f64	d8, d7, d6
 8000da4:	4b58      	ldr	r3, [pc, #352]	; (8000f08 <main+0x730>)
 8000da6:	ed93 6b00 	vldr	d6, [r3]
 8000daa:	4b57      	ldr	r3, [pc, #348]	; (8000f08 <main+0x730>)
 8000dac:	ed93 7b00 	vldr	d7, [r3]
 8000db0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000db4:	4b55      	ldr	r3, [pc, #340]	; (8000f0c <main+0x734>)
 8000db6:	ed93 5b00 	vldr	d5, [r3]
 8000dba:	4b54      	ldr	r3, [pc, #336]	; (8000f0c <main+0x734>)
 8000dbc:	ed93 7b00 	vldr	d7, [r3]
 8000dc0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000dc4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000dc8:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 8000dcc:	eeb0 0b47 	vmov.f64	d0, d7
 8000dd0:	f00e fe76 	bl	800fac0 <pow>
 8000dd4:	eeb0 7b40 	vmov.f64	d7, d0
 8000dd8:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8000ee8 <main+0x710>
 8000ddc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000de0:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8000de4:	4b4d      	ldr	r3, [pc, #308]	; (8000f1c <main+0x744>)
 8000de6:	ed83 7b00 	vstr	d7, [r3]
				if(cf>1||cf<-1) temp=1;
 8000dea:	4b4c      	ldr	r3, [pc, #304]	; (8000f1c <main+0x744>)
 8000dec:	ed93 7b00 	vldr	d7, [r3]
 8000df0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000df4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dfc:	dc09      	bgt.n	8000e12 <main+0x63a>
 8000dfe:	4b47      	ldr	r3, [pc, #284]	; (8000f1c <main+0x744>)
 8000e00:	ed93 7b00 	vldr	d7, [r3]
 8000e04:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8000e08:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e10:	d502      	bpl.n	8000e18 <main+0x640>
 8000e12:	4b39      	ldr	r3, [pc, #228]	; (8000ef8 <main+0x720>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	601a      	str	r2, [r3, #0]
				anglef=(acos(cf))*180.0/PI;
 8000e18:	4b40      	ldr	r3, [pc, #256]	; (8000f1c <main+0x744>)
 8000e1a:	ed93 7b00 	vldr	d7, [r3]
 8000e1e:	eeb0 0b47 	vmov.f64	d0, d7
 8000e22:	f00f faa9 	bl	8010378 <acos>
 8000e26:	eeb0 7b40 	vmov.f64	d7, d0
 8000e2a:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8000eb8 <main+0x6e0>
 8000e2e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000e32:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8000ec0 <main+0x6e8>
 8000e36:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e3a:	4b39      	ldr	r3, [pc, #228]	; (8000f20 <main+0x748>)
 8000e3c:	ed83 7b00 	vstr	d7, [r3]
				if(temp==0){                                //large arm's angle
 8000e40:	4b2d      	ldr	r3, [pc, #180]	; (8000ef8 <main+0x720>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d125      	bne.n	8000e94 <main+0x6bc>
					if(angle2_Now>0) angle1_Now=angleb+anglef;
 8000e48:	4b32      	ldr	r3, [pc, #200]	; (8000f14 <main+0x73c>)
 8000e4a:	ed93 7b00 	vldr	d7, [r3]
 8000e4e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e56:	dd0a      	ble.n	8000e6e <main+0x696>
 8000e58:	4b28      	ldr	r3, [pc, #160]	; (8000efc <main+0x724>)
 8000e5a:	ed93 6b00 	vldr	d6, [r3]
 8000e5e:	4b30      	ldr	r3, [pc, #192]	; (8000f20 <main+0x748>)
 8000e60:	ed93 7b00 	vldr	d7, [r3]
 8000e64:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e68:	4b2e      	ldr	r3, [pc, #184]	; (8000f24 <main+0x74c>)
 8000e6a:	ed83 7b00 	vstr	d7, [r3]
					if(angle2_Now<0) angle1_Now=angleb-anglef;
 8000e6e:	4b29      	ldr	r3, [pc, #164]	; (8000f14 <main+0x73c>)
 8000e70:	ed93 7b00 	vldr	d7, [r3]
 8000e74:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e7c:	d50a      	bpl.n	8000e94 <main+0x6bc>
 8000e7e:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <main+0x724>)
 8000e80:	ed93 6b00 	vldr	d6, [r3]
 8000e84:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <main+0x748>)
 8000e86:	ed93 7b00 	vldr	d7, [r3]
 8000e8a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000e8e:	4b25      	ldr	r3, [pc, #148]	; (8000f24 <main+0x74c>)
 8000e90:	ed83 7b00 	vstr	d7, [r3]
				}
			}
			if(temp==0){
 8000e94:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <main+0x720>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d151      	bne.n	8000f40 <main+0x768>
 8000e9c:	e044      	b.n	8000f28 <main+0x750>
 8000e9e:	bf00      	nop
 8000ea0:	1b089a02 	.word	0x1b089a02
 8000ea4:	4074629e 	.word	0x4074629e
 8000ea8:	0a3d70a3 	.word	0x0a3d70a3
 8000eac:	405e1cd7 	.word	0x405e1cd7
 8000eb0:	083126e9 	.word	0x083126e9
 8000eb4:	4078c6ac 	.word	0x4078c6ac
 8000eb8:	00000000 	.word	0x00000000
 8000ebc:	40668000 	.word	0x40668000
 8000ec0:	53c8d4f1 	.word	0x53c8d4f1
 8000ec4:	400921fb 	.word	0x400921fb
 8000ec8:	147ae148 	.word	0x147ae148
 8000ecc:	c04b27ae 	.word	0xc04b27ae
 8000ed0:	f5c28f5c 	.word	0xf5c28f5c
 8000ed4:	405f6c28 	.word	0x405f6c28
 8000ed8:	00000000 	.word	0x00000000
 8000edc:	40768000 	.word	0x40768000
 8000ee0:	3d70a3d7 	.word	0x3d70a3d7
 8000ee4:	40731b0a 	.word	0x40731b0a
 8000ee8:	28f5c28f 	.word	0x28f5c28f
 8000eec:	c0420f5c 	.word	0xc0420f5c
 8000ef0:	24000238 	.word	0x24000238
 8000ef4:	24000250 	.word	0x24000250
 8000ef8:	24000268 	.word	0x24000268
 8000efc:	24000260 	.word	0x24000260
 8000f00:	24000270 	.word	0x24000270
 8000f04:	24000220 	.word	0x24000220
 8000f08:	24000278 	.word	0x24000278
 8000f0c:	24000280 	.word	0x24000280
 8000f10:	24000228 	.word	0x24000228
 8000f14:	24000248 	.word	0x24000248
 8000f18:	24000078 	.word	0x24000078
 8000f1c:	24000230 	.word	0x24000230
 8000f20:	24000258 	.word	0x24000258
 8000f24:	24000240 	.word	0x24000240
				Step1_AngleGoal =angle1_Now;
 8000f28:	4b9d      	ldr	r3, [pc, #628]	; (80011a0 <main+0x9c8>)
 8000f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2e:	499d      	ldr	r1, [pc, #628]	; (80011a4 <main+0x9cc>)
 8000f30:	e9c1 2300 	strd	r2, r3, [r1]
				Step2_AngleGoal =angle2_Now;
 8000f34:	4b9c      	ldr	r3, [pc, #624]	; (80011a8 <main+0x9d0>)
 8000f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3a:	499c      	ldr	r1, [pc, #624]	; (80011ac <main+0x9d4>)
 8000f3c:	e9c1 2300 	strd	r2, r3, [r1]
			}
		 // step initailize????
		 if(Step1_AngleGoal!=angle_before1){
 8000f40:	4b98      	ldr	r3, [pc, #608]	; (80011a4 <main+0x9cc>)
 8000f42:	ed93 6b00 	vldr	d6, [r3]
 8000f46:	4b9a      	ldr	r3, [pc, #616]	; (80011b0 <main+0x9d8>)
 8000f48:	ed93 7b00 	vldr	d7, [r3]
 8000f4c:	eeb4 6b47 	vcmp.f64	d6, d7
 8000f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f54:	d037      	beq.n	8000fc6 <main+0x7ee>

			 step1=0;
 8000f56:	4b97      	ldr	r3, [pc, #604]	; (80011b4 <main+0x9dc>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
			 step1=(Step1_AngleGoal - angle_before1)*1.6/1.8;
 8000f5c:	4b91      	ldr	r3, [pc, #580]	; (80011a4 <main+0x9cc>)
 8000f5e:	ed93 6b00 	vldr	d6, [r3]
 8000f62:	4b93      	ldr	r3, [pc, #588]	; (80011b0 <main+0x9d8>)
 8000f64:	ed93 7b00 	vldr	d7, [r3]
 8000f68:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000f6c:	ed9f 6b86 	vldr	d6, [pc, #536]	; 8001188 <main+0x9b0>
 8000f70:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f74:	ed9f 5b86 	vldr	d5, [pc, #536]	; 8001190 <main+0x9b8>
 8000f78:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f7c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f80:	ee17 2a90 	vmov	r2, s15
 8000f84:	4b8b      	ldr	r3, [pc, #556]	; (80011b4 <main+0x9dc>)
 8000f86:	601a      	str	r2, [r3, #0]
			 angle_before1=Step1_AngleGoal;
 8000f88:	4b86      	ldr	r3, [pc, #536]	; (80011a4 <main+0x9cc>)
 8000f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8e:	4988      	ldr	r1, [pc, #544]	; (80011b0 <main+0x9d8>)
 8000f90:	e9c1 2300 	strd	r2, r3, [r1]
			 if(step1>=0) dir_state1=1;
 8000f94:	4b87      	ldr	r3, [pc, #540]	; (80011b4 <main+0x9dc>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	db03      	blt.n	8000fa4 <main+0x7cc>
 8000f9c:	4b86      	ldr	r3, [pc, #536]	; (80011b8 <main+0x9e0>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	e00b      	b.n	8000fbc <main+0x7e4>
			 else if(step1<0){
 8000fa4:	4b83      	ldr	r3, [pc, #524]	; (80011b4 <main+0x9dc>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	da07      	bge.n	8000fbc <main+0x7e4>
				 step1=-step1;
 8000fac:	4b81      	ldr	r3, [pc, #516]	; (80011b4 <main+0x9dc>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	425b      	negs	r3, r3
 8000fb2:	4a80      	ldr	r2, [pc, #512]	; (80011b4 <main+0x9dc>)
 8000fb4:	6013      	str	r3, [r2, #0]
				 dir_state1=0;
 8000fb6:	4b80      	ldr	r3, [pc, #512]	; (80011b8 <main+0x9e0>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
			 }
			 n++;
 8000fbc:	4b7f      	ldr	r3, [pc, #508]	; (80011bc <main+0x9e4>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	4a7e      	ldr	r2, [pc, #504]	; (80011bc <main+0x9e4>)
 8000fc4:	6013      	str	r3, [r2, #0]
		 }
		 if(Step2_AngleGoal!=angle_before2){
 8000fc6:	4b79      	ldr	r3, [pc, #484]	; (80011ac <main+0x9d4>)
 8000fc8:	ed93 6b00 	vldr	d6, [r3]
 8000fcc:	4b7c      	ldr	r3, [pc, #496]	; (80011c0 <main+0x9e8>)
 8000fce:	ed93 7b00 	vldr	d7, [r3]
 8000fd2:	eeb4 6b47 	vcmp.f64	d6, d7
 8000fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fda:	d032      	beq.n	8001042 <main+0x86a>
			 step2=0;
 8000fdc:	4b79      	ldr	r3, [pc, #484]	; (80011c4 <main+0x9ec>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
			 step2=(Step2_AngleGoal - angle_before2)*2.2/1.8;
 8000fe2:	4b72      	ldr	r3, [pc, #456]	; (80011ac <main+0x9d4>)
 8000fe4:	ed93 6b00 	vldr	d6, [r3]
 8000fe8:	4b75      	ldr	r3, [pc, #468]	; (80011c0 <main+0x9e8>)
 8000fea:	ed93 7b00 	vldr	d7, [r3]
 8000fee:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000ff2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8001198 <main+0x9c0>
 8000ff6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ffa:	ed9f 5b65 	vldr	d5, [pc, #404]	; 8001190 <main+0x9b8>
 8000ffe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001002:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001006:	ee17 2a90 	vmov	r2, s15
 800100a:	4b6e      	ldr	r3, [pc, #440]	; (80011c4 <main+0x9ec>)
 800100c:	601a      	str	r2, [r3, #0]
			 angle_before2=Step2_AngleGoal;
 800100e:	4b67      	ldr	r3, [pc, #412]	; (80011ac <main+0x9d4>)
 8001010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001014:	496a      	ldr	r1, [pc, #424]	; (80011c0 <main+0x9e8>)
 8001016:	e9c1 2300 	strd	r2, r3, [r1]
			 if(step2>=0) dir_state2=1; // goes down
 800101a:	4b6a      	ldr	r3, [pc, #424]	; (80011c4 <main+0x9ec>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	db03      	blt.n	800102a <main+0x852>
 8001022:	4b69      	ldr	r3, [pc, #420]	; (80011c8 <main+0x9f0>)
 8001024:	2201      	movs	r2, #1
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	e00b      	b.n	8001042 <main+0x86a>
			 else if(step2<0){
 800102a:	4b66      	ldr	r3, [pc, #408]	; (80011c4 <main+0x9ec>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2b00      	cmp	r3, #0
 8001030:	da07      	bge.n	8001042 <main+0x86a>
				 step2=-step2;
 8001032:	4b64      	ldr	r3, [pc, #400]	; (80011c4 <main+0x9ec>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	425b      	negs	r3, r3
 8001038:	4a62      	ldr	r2, [pc, #392]	; (80011c4 <main+0x9ec>)
 800103a:	6013      	str	r3, [r2, #0]
				 dir_state2=0;
 800103c:	4b62      	ldr	r3, [pc, #392]	; (80011c8 <main+0x9f0>)
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
			 }
		 }
		 if(Step3_AngleGoal!=angle_before3){
 8001042:	4b62      	ldr	r3, [pc, #392]	; (80011cc <main+0x9f4>)
 8001044:	ed93 6b00 	vldr	d6, [r3]
 8001048:	4b61      	ldr	r3, [pc, #388]	; (80011d0 <main+0x9f8>)
 800104a:	ed93 7b00 	vldr	d7, [r3]
 800104e:	eeb4 6b47 	vcmp.f64	d6, d7
 8001052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001056:	d033      	beq.n	80010c0 <main+0x8e8>
			 step3=0;
 8001058:	4b5e      	ldr	r3, [pc, #376]	; (80011d4 <main+0x9fc>)
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
			 n++;
 800105e:	4b57      	ldr	r3, [pc, #348]	; (80011bc <main+0x9e4>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	3301      	adds	r3, #1
 8001064:	4a55      	ldr	r2, [pc, #340]	; (80011bc <main+0x9e4>)
 8001066:	6013      	str	r3, [r2, #0]
			 step3=(Step3_AngleGoal - angle_before3)/1.8;
 8001068:	4b58      	ldr	r3, [pc, #352]	; (80011cc <main+0x9f4>)
 800106a:	ed93 6b00 	vldr	d6, [r3]
 800106e:	4b58      	ldr	r3, [pc, #352]	; (80011d0 <main+0x9f8>)
 8001070:	ed93 7b00 	vldr	d7, [r3]
 8001074:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001078:	ed9f 5b45 	vldr	d5, [pc, #276]	; 8001190 <main+0x9b8>
 800107c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001080:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001084:	ee17 2a90 	vmov	r2, s15
 8001088:	4b52      	ldr	r3, [pc, #328]	; (80011d4 <main+0x9fc>)
 800108a:	601a      	str	r2, [r3, #0]
			 angle_before3=Step3_AngleGoal;
 800108c:	4b4f      	ldr	r3, [pc, #316]	; (80011cc <main+0x9f4>)
 800108e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001092:	494f      	ldr	r1, [pc, #316]	; (80011d0 <main+0x9f8>)
 8001094:	e9c1 2300 	strd	r2, r3, [r1]
			 if(step3>=0) dir_state3=1;
 8001098:	4b4e      	ldr	r3, [pc, #312]	; (80011d4 <main+0x9fc>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	db03      	blt.n	80010a8 <main+0x8d0>
 80010a0:	4b4d      	ldr	r3, [pc, #308]	; (80011d8 <main+0xa00>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	e00b      	b.n	80010c0 <main+0x8e8>
			 else if(step3<0){
 80010a8:	4b4a      	ldr	r3, [pc, #296]	; (80011d4 <main+0x9fc>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	da07      	bge.n	80010c0 <main+0x8e8>
				 step3=-step3;
 80010b0:	4b48      	ldr	r3, [pc, #288]	; (80011d4 <main+0x9fc>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	425b      	negs	r3, r3
 80010b6:	4a47      	ldr	r2, [pc, #284]	; (80011d4 <main+0x9fc>)
 80010b8:	6013      	str	r3, [r2, #0]
				 dir_state3=0;
 80010ba:	4b47      	ldr	r3, [pc, #284]	; (80011d8 <main+0xa00>)
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
			 }
		 }
		 if(pump1=1) HAL_GPIO_WritePin(Pump1_IN1_PORT,Pump1_IN1_Pin,GPIO_PIN_SET);
 80010c0:	4b46      	ldr	r3, [pc, #280]	; (80011dc <main+0xa04>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	2201      	movs	r2, #1
 80010c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010cc:	4844      	ldr	r0, [pc, #272]	; (80011e0 <main+0xa08>)
 80010ce:	f008 fc83 	bl	80099d8 <HAL_GPIO_WritePin>
		 if(pump1=0) HAL_GPIO_WritePin(Pump1_IN1_PORT,Pump1_IN1_Pin,GPIO_PIN_RESET);
 80010d2:	4b42      	ldr	r3, [pc, #264]	; (80011dc <main+0xa04>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	4b40      	ldr	r3, [pc, #256]	; (80011dc <main+0xa04>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d005      	beq.n	80010ec <main+0x914>
 80010e0:	2200      	movs	r2, #0
 80010e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010e6:	483e      	ldr	r0, [pc, #248]	; (80011e0 <main+0xa08>)
 80010e8:	f008 fc76 	bl	80099d8 <HAL_GPIO_WritePin>
		 if(pump2=1) HAL_GPIO_WritePin(Pump2_IN3_PORT,Pump2_IN3_Pin,GPIO_PIN_SET);
 80010ec:	4b3d      	ldr	r3, [pc, #244]	; (80011e4 <main+0xa0c>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	2201      	movs	r2, #1
 80010f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010f8:	4839      	ldr	r0, [pc, #228]	; (80011e0 <main+0xa08>)
 80010fa:	f008 fc6d 	bl	80099d8 <HAL_GPIO_WritePin>
		 if(pump2=0) HAL_GPIO_WritePin(Pump2_IN3_PORT,Pump2_IN3_Pin,GPIO_PIN_RESET);
 80010fe:	4b39      	ldr	r3, [pc, #228]	; (80011e4 <main+0xa0c>)
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	4b37      	ldr	r3, [pc, #220]	; (80011e4 <main+0xa0c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d005      	beq.n	8001118 <main+0x940>
 800110c:	2200      	movs	r2, #0
 800110e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001112:	4833      	ldr	r0, [pc, #204]	; (80011e0 <main+0xa08>)
 8001114:	f008 fc60 	bl	80099d8 <HAL_GPIO_WritePin>
		 if(pump3=1) HAL_GPIO_WritePin(Pump3_IN4_PORT,Pump3_IN4_Pin,GPIO_PIN_SET);
 8001118:	4b33      	ldr	r3, [pc, #204]	; (80011e8 <main+0xa10>)
 800111a:	2201      	movs	r2, #1
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	2201      	movs	r2, #1
 8001120:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001124:	482e      	ldr	r0, [pc, #184]	; (80011e0 <main+0xa08>)
 8001126:	f008 fc57 	bl	80099d8 <HAL_GPIO_WritePin>
		 if(pump3=0) HAL_GPIO_WritePin(Pump3_IN4_PORT,Pump3_IN4_Pin,GPIO_PIN_RESET);
 800112a:	4b2f      	ldr	r3, [pc, #188]	; (80011e8 <main+0xa10>)
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <main+0xa10>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d005      	beq.n	8001144 <main+0x96c>
 8001138:	2200      	movs	r2, #0
 800113a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800113e:	4828      	ldr	r0, [pc, #160]	; (80011e0 <main+0xa08>)
 8001140:	f008 fc4a 	bl	80099d8 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	 loop();
 8001144:	f003 fe0e 	bl	8004d64 <loop>

 	 // servo control/ servo1(timer2ch3)/ servo2(timer16ch1)
 	 servo_pulse1 = 600 + 10 * Servo1_AngleGoal;
 8001148:	4b28      	ldr	r3, [pc, #160]	; (80011ec <main+0xa14>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4613      	mov	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001158:	4a25      	ldr	r2, [pc, #148]	; (80011f0 <main+0xa18>)
 800115a:	6013      	str	r3, [r2, #0]
 	 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, servo_pulse1);
 800115c:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <main+0xa18>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b24      	ldr	r3, [pc, #144]	; (80011f4 <main+0xa1c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	635a      	str	r2, [r3, #52]	; 0x34
 	 servo_pulse2 = 600 + 10 * Servo2_AngleGoal;
 8001166:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <main+0xa20>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	4613      	mov	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	4413      	add	r3, r2
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001176:	4a21      	ldr	r2, [pc, #132]	; (80011fc <main+0xa24>)
 8001178:	6013      	str	r3, [r2, #0]
 	 __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, servo_pulse2);
 800117a:	4b20      	ldr	r3, [pc, #128]	; (80011fc <main+0xa24>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4b20      	ldr	r3, [pc, #128]	; (8001200 <main+0xa28>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	635a      	str	r2, [r3, #52]	; 0x34
    {
 8001184:	f7ff bbc2 	b.w	800090c <main+0x134>
 8001188:	9999999a 	.word	0x9999999a
 800118c:	3ff99999 	.word	0x3ff99999
 8001190:	cccccccd 	.word	0xcccccccd
 8001194:	3ffccccc 	.word	0x3ffccccc
 8001198:	9999999a 	.word	0x9999999a
 800119c:	40019999 	.word	0x40019999
 80011a0:	24000240 	.word	0x24000240
 80011a4:	240001e8 	.word	0x240001e8
 80011a8:	24000248 	.word	0x24000248
 80011ac:	240001f0 	.word	0x240001f0
 80011b0:	24000070 	.word	0x24000070
 80011b4:	2400020c 	.word	0x2400020c
 80011b8:	24000058 	.word	0x24000058
 80011bc:	24000154 	.word	0x24000154
 80011c0:	24000078 	.word	0x24000078
 80011c4:	24000210 	.word	0x24000210
 80011c8:	24000060 	.word	0x24000060
 80011cc:	240001f8 	.word	0x240001f8
 80011d0:	24000218 	.word	0x24000218
 80011d4:	24000214 	.word	0x24000214
 80011d8:	24000068 	.word	0x24000068
 80011dc:	24000080 	.word	0x24000080
 80011e0:	58021000 	.word	0x58021000
 80011e4:	24000084 	.word	0x24000084
 80011e8:	24000088 	.word	0x24000088
 80011ec:	24000288 	.word	0x24000288
 80011f0:	2400028c 	.word	0x2400028c
 80011f4:	2400106c 	.word	0x2400106c
 80011f8:	2400008c 	.word	0x2400008c
 80011fc:	24000290 	.word	0x24000290
 8001200:	240011b0 	.word	0x240011b0

08001204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b09c      	sub	sp, #112	; 0x70
 8001208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120e:	224c      	movs	r2, #76	; 0x4c
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f010 f85a 	bl	80112cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	2220      	movs	r2, #32
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f010 f854 	bl	80112cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001224:	2002      	movs	r0, #2
 8001226:	f008 fbf1 	bl	8009a0c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800122a:	2300      	movs	r3, #0
 800122c:	603b      	str	r3, [r7, #0]
 800122e:	4b2c      	ldr	r3, [pc, #176]	; (80012e0 <SystemClock_Config+0xdc>)
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001236:	4a2a      	ldr	r2, [pc, #168]	; (80012e0 <SystemClock_Config+0xdc>)
 8001238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800123c:	6193      	str	r3, [r2, #24]
 800123e:	4b28      	ldr	r3, [pc, #160]	; (80012e0 <SystemClock_Config+0xdc>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001246:	603b      	str	r3, [r7, #0]
 8001248:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800124a:	bf00      	nop
 800124c:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <SystemClock_Config+0xdc>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001258:	d1f8      	bne.n	800124c <SystemClock_Config+0x48>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800125a:	2301      	movs	r3, #1
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800125e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001264:	2302      	movs	r3, #2
 8001266:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001268:	2302      	movs	r3, #2
 800126a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800126c:	2304      	movs	r3, #4
 800126e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001270:	23a8      	movs	r3, #168	; 0xa8
 8001272:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001274:	2302      	movs	r3, #2
 8001276:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001278:	2302      	movs	r3, #2
 800127a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800127c:	2302      	movs	r3, #2
 800127e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8001280:	2304      	movs	r3, #4
 8001282:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001284:	2300      	movs	r3, #0
 8001286:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001290:	4618      	mov	r0, r3
 8001292:	f008 fbf5 	bl	8009a80 <HAL_RCC_OscConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800129c:	f001 fb2a 	bl	80028f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a0:	233f      	movs	r3, #63	; 0x3f
 80012a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a4:	2303      	movs	r3, #3
 80012a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80012ac:	2308      	movs	r3, #8
 80012ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80012b0:	2340      	movs	r3, #64	; 0x40
 80012b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80012b4:	2340      	movs	r3, #64	; 0x40
 80012b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80012b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80012be:	2340      	movs	r3, #64	; 0x40
 80012c0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	2102      	movs	r1, #2
 80012c6:	4618      	mov	r0, r3
 80012c8:	f008 ff86 	bl	800a1d8 <HAL_RCC_ClockConfig>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80012d2:	f001 fb0f 	bl	80028f4 <Error_Handler>
  }
}
 80012d6:	bf00      	nop
 80012d8:	3770      	adds	r7, #112	; 0x70
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	58024800 	.word	0x58024800

080012e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b098      	sub	sp, #96	; 0x60
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
 8001304:	611a      	str	r2, [r3, #16]
 8001306:	615a      	str	r2, [r3, #20]
 8001308:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	2234      	movs	r2, #52	; 0x34
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f00f ffdb 	bl	80112cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001316:	4b39      	ldr	r3, [pc, #228]	; (80013fc <MX_TIM1_Init+0x118>)
 8001318:	4a39      	ldr	r2, [pc, #228]	; (8001400 <MX_TIM1_Init+0x11c>)
 800131a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 800131c:	4b37      	ldr	r3, [pc, #220]	; (80013fc <MX_TIM1_Init+0x118>)
 800131e:	223f      	movs	r2, #63	; 0x3f
 8001320:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001322:	4b36      	ldr	r3, [pc, #216]	; (80013fc <MX_TIM1_Init+0x118>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8001328:	4b34      	ldr	r3, [pc, #208]	; (80013fc <MX_TIM1_Init+0x118>)
 800132a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800132e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001330:	4b32      	ldr	r3, [pc, #200]	; (80013fc <MX_TIM1_Init+0x118>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001336:	4b31      	ldr	r3, [pc, #196]	; (80013fc <MX_TIM1_Init+0x118>)
 8001338:	2200      	movs	r2, #0
 800133a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133c:	4b2f      	ldr	r3, [pc, #188]	; (80013fc <MX_TIM1_Init+0x118>)
 800133e:	2200      	movs	r2, #0
 8001340:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001342:	482e      	ldr	r0, [pc, #184]	; (80013fc <MX_TIM1_Init+0x118>)
 8001344:	f00a fece 	bl	800c0e4 <HAL_TIM_PWM_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800134e:	f001 fad1 	bl	80028f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001352:	2300      	movs	r3, #0
 8001354:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001356:	2300      	movs	r3, #0
 8001358:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800135a:	2300      	movs	r3, #0
 800135c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800135e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001362:	4619      	mov	r1, r3
 8001364:	4825      	ldr	r0, [pc, #148]	; (80013fc <MX_TIM1_Init+0x118>)
 8001366:	f00c f8f9 	bl	800d55c <HAL_TIMEx_MasterConfigSynchronization>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001370:	f001 fac0 	bl	80028f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001374:	2360      	movs	r3, #96	; 0x60
 8001376:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001378:	2300      	movs	r3, #0
 800137a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800137c:	2300      	movs	r3, #0
 800137e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001380:	2300      	movs	r3, #0
 8001382:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001384:	2300      	movs	r3, #0
 8001386:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001388:	2300      	movs	r3, #0
 800138a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800138c:	2300      	movs	r3, #0
 800138e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001390:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001394:	2200      	movs	r2, #0
 8001396:	4619      	mov	r1, r3
 8001398:	4818      	ldr	r0, [pc, #96]	; (80013fc <MX_TIM1_Init+0x118>)
 800139a:	f00b fa6b 	bl	800c874 <HAL_TIM_PWM_ConfigChannel>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80013a4:	f001 faa6 	bl	80028f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013a8:	2300      	movs	r3, #0
 80013aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	4619      	mov	r1, r3
 80013dc:	4807      	ldr	r0, [pc, #28]	; (80013fc <MX_TIM1_Init+0x118>)
 80013de:	f00c f959 	bl	800d694 <HAL_TIMEx_ConfigBreakDeadTime>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80013e8:	f001 fa84 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013ec:	4803      	ldr	r0, [pc, #12]	; (80013fc <MX_TIM1_Init+0x118>)
 80013ee:	f004 fdcd 	bl	8005f8c <HAL_TIM_MspPostInit>

}
 80013f2:	bf00      	nop
 80013f4:	3760      	adds	r7, #96	; 0x60
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	2400106c 	.word	0x2400106c
 8001400:	40010000 	.word	0x40010000

08001404 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08c      	sub	sp, #48	; 0x30
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	2224      	movs	r2, #36	; 0x24
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f00f ff5a 	bl	80112cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001418:	463b      	mov	r3, r7
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001422:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <MX_TIM2_Init+0xa4>)
 8001424:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001428:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800142a:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <MX_TIM2_Init+0xa4>)
 800142c:	2200      	movs	r2, #0
 800142e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001430:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <MX_TIM2_Init+0xa4>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001436:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <MX_TIM2_Init+0xa4>)
 8001438:	f04f 32ff 	mov.w	r2, #4294967295
 800143c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <MX_TIM2_Init+0xa4>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001444:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <MX_TIM2_Init+0xa4>)
 8001446:	2200      	movs	r2, #0
 8001448:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800144a:	2301      	movs	r3, #1
 800144c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001452:	2301      	movs	r3, #1
 8001454:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800145e:	2300      	movs	r3, #0
 8001460:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001462:	2301      	movs	r3, #1
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001466:	2300      	movs	r3, #0
 8001468:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800146e:	f107 030c 	add.w	r3, r7, #12
 8001472:	4619      	mov	r1, r3
 8001474:	480c      	ldr	r0, [pc, #48]	; (80014a8 <MX_TIM2_Init+0xa4>)
 8001476:	f00a ffa9 	bl	800c3cc <HAL_TIM_Encoder_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001480:	f001 fa38 	bl	80028f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001484:	2300      	movs	r3, #0
 8001486:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800148c:	463b      	mov	r3, r7
 800148e:	4619      	mov	r1, r3
 8001490:	4805      	ldr	r0, [pc, #20]	; (80014a8 <MX_TIM2_Init+0xa4>)
 8001492:	f00c f863 	bl	800d55c <HAL_TIMEx_MasterConfigSynchronization>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800149c:	f001 fa2a 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	3730      	adds	r7, #48	; 0x30
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	240010bc 	.word	0x240010bc

080014ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08c      	sub	sp, #48	; 0x30
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014b2:	f107 030c 	add.w	r3, r7, #12
 80014b6:	2224      	movs	r2, #36	; 0x24
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f00f ff06 	bl	80112cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c0:	463b      	mov	r3, r7
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014ca:	4b21      	ldr	r3, [pc, #132]	; (8001550 <MX_TIM3_Init+0xa4>)
 80014cc:	4a21      	ldr	r2, [pc, #132]	; (8001554 <MX_TIM3_Init+0xa8>)
 80014ce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014d0:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <MX_TIM3_Init+0xa4>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d6:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <MX_TIM3_Init+0xa4>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014dc:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <MX_TIM3_Init+0xa4>)
 80014de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e4:	4b1a      	ldr	r3, [pc, #104]	; (8001550 <MX_TIM3_Init+0xa4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <MX_TIM3_Init+0xa4>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80014f0:	2301      	movs	r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014f4:	2300      	movs	r3, #0
 80014f6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014f8:	2301      	movs	r3, #1
 80014fa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001508:	2301      	movs	r3, #1
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800150c:	2300      	movs	r3, #0
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	4619      	mov	r1, r3
 800151a:	480d      	ldr	r0, [pc, #52]	; (8001550 <MX_TIM3_Init+0xa4>)
 800151c:	f00a ff56 	bl	800c3cc <HAL_TIM_Encoder_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001526:	f001 f9e5 	bl	80028f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152a:	2300      	movs	r3, #0
 800152c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001532:	463b      	mov	r3, r7
 8001534:	4619      	mov	r1, r3
 8001536:	4806      	ldr	r0, [pc, #24]	; (8001550 <MX_TIM3_Init+0xa4>)
 8001538:	f00c f810 	bl	800d55c <HAL_TIMEx_MasterConfigSynchronization>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001542:	f001 f9d7 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	3730      	adds	r7, #48	; 0x30
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	24000f70 	.word	0x24000f70
 8001554:	40000400 	.word	0x40000400

08001558 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08c      	sub	sp, #48	; 0x30
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800155e:	f107 030c 	add.w	r3, r7, #12
 8001562:	2224      	movs	r2, #36	; 0x24
 8001564:	2100      	movs	r1, #0
 8001566:	4618      	mov	r0, r3
 8001568:	f00f feb0 	bl	80112cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800156c:	463b      	mov	r3, r7
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001576:	4b21      	ldr	r3, [pc, #132]	; (80015fc <MX_TIM4_Init+0xa4>)
 8001578:	4a21      	ldr	r2, [pc, #132]	; (8001600 <MX_TIM4_Init+0xa8>)
 800157a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800157c:	4b1f      	ldr	r3, [pc, #124]	; (80015fc <MX_TIM4_Init+0xa4>)
 800157e:	2200      	movs	r2, #0
 8001580:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001582:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <MX_TIM4_Init+0xa4>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001588:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <MX_TIM4_Init+0xa4>)
 800158a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800158e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001590:	4b1a      	ldr	r3, [pc, #104]	; (80015fc <MX_TIM4_Init+0xa4>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001596:	4b19      	ldr	r3, [pc, #100]	; (80015fc <MX_TIM4_Init+0xa4>)
 8001598:	2200      	movs	r2, #0
 800159a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800159c:	2301      	movs	r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015a0:	2300      	movs	r3, #0
 80015a2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015a4:	2301      	movs	r3, #1
 80015a6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015a8:	2300      	movs	r3, #0
 80015aa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015b0:	2300      	movs	r3, #0
 80015b2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015b4:	2301      	movs	r3, #1
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	4619      	mov	r1, r3
 80015c6:	480d      	ldr	r0, [pc, #52]	; (80015fc <MX_TIM4_Init+0xa4>)
 80015c8:	f00a ff00 	bl	800c3cc <HAL_TIM_Encoder_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80015d2:	f001 f98f 	bl	80028f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015de:	463b      	mov	r3, r7
 80015e0:	4619      	mov	r1, r3
 80015e2:	4806      	ldr	r0, [pc, #24]	; (80015fc <MX_TIM4_Init+0xa4>)
 80015e4:	f00b ffba 	bl	800d55c <HAL_TIMEx_MasterConfigSynchronization>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80015ee:	f001 f981 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	3730      	adds	r7, #48	; 0x30
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	24000d00 	.word	0x24000d00
 8001600:	40000800 	.word	0x40000800

08001604 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08c      	sub	sp, #48	; 0x30
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	2224      	movs	r2, #36	; 0x24
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f00f fe5a 	bl	80112cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001618:	463b      	mov	r3, r7
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001622:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <MX_TIM5_Init+0xa4>)
 8001624:	4a21      	ldr	r2, [pc, #132]	; (80016ac <MX_TIM5_Init+0xa8>)
 8001626:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001628:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <MX_TIM5_Init+0xa4>)
 800162a:	2200      	movs	r2, #0
 800162c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162e:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <MX_TIM5_Init+0xa4>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001634:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <MX_TIM5_Init+0xa4>)
 8001636:	f04f 32ff 	mov.w	r2, #4294967295
 800163a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163c:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <MX_TIM5_Init+0xa4>)
 800163e:	2200      	movs	r2, #0
 8001640:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001642:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <MX_TIM5_Init+0xa4>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001648:	2301      	movs	r3, #1
 800164a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800164c:	2300      	movs	r3, #0
 800164e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001650:	2301      	movs	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001660:	2301      	movs	r3, #1
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001664:	2300      	movs	r3, #0
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800166c:	f107 030c 	add.w	r3, r7, #12
 8001670:	4619      	mov	r1, r3
 8001672:	480d      	ldr	r0, [pc, #52]	; (80016a8 <MX_TIM5_Init+0xa4>)
 8001674:	f00a feaa 	bl	800c3cc <HAL_TIM_Encoder_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800167e:	f001 f939 	bl	80028f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800168a:	463b      	mov	r3, r7
 800168c:	4619      	mov	r1, r3
 800168e:	4806      	ldr	r0, [pc, #24]	; (80016a8 <MX_TIM5_Init+0xa4>)
 8001690:	f00b ff64 	bl	800d55c <HAL_TIMEx_MasterConfigSynchronization>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800169a:	f001 f92b 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	3730      	adds	r7, #48	; 0x30
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	24000f24 	.word	0x24000f24
 80016ac:	40000c00 	.word	0x40000c00

080016b0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80016c0:	4b14      	ldr	r3, [pc, #80]	; (8001714 <MX_TIM6_Init+0x64>)
 80016c2:	4a15      	ldr	r2, [pc, #84]	; (8001718 <MX_TIM6_Init+0x68>)
 80016c4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 63;
 80016c6:	4b13      	ldr	r3, [pc, #76]	; (8001714 <MX_TIM6_Init+0x64>)
 80016c8:	223f      	movs	r2, #63	; 0x3f
 80016ca:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016cc:	4b11      	ldr	r3, [pc, #68]	; (8001714 <MX_TIM6_Init+0x64>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 19999;
 80016d2:	4b10      	ldr	r3, [pc, #64]	; (8001714 <MX_TIM6_Init+0x64>)
 80016d4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80016d8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016da:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <MX_TIM6_Init+0x64>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80016e0:	480c      	ldr	r0, [pc, #48]	; (8001714 <MX_TIM6_Init+0x64>)
 80016e2:	f00a fc21 	bl	800bf28 <HAL_TIM_Base_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80016ec:	f001 f902 	bl	80028f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f0:	2300      	movs	r3, #0
 80016f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80016f8:	1d3b      	adds	r3, r7, #4
 80016fa:	4619      	mov	r1, r3
 80016fc:	4805      	ldr	r0, [pc, #20]	; (8001714 <MX_TIM6_Init+0x64>)
 80016fe:	f00b ff2d 	bl	800d55c <HAL_TIMEx_MasterConfigSynchronization>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001708:	f001 f8f4 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800170c:	bf00      	nop
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	24001020 	.word	0x24001020
 8001718:	40001000 	.word	0x40001000

0800171c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800172c:	4b14      	ldr	r3, [pc, #80]	; (8001780 <MX_TIM7_Init+0x64>)
 800172e:	4a15      	ldr	r2, [pc, #84]	; (8001784 <MX_TIM7_Init+0x68>)
 8001730:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 63;
 8001732:	4b13      	ldr	r3, [pc, #76]	; (8001780 <MX_TIM7_Init+0x64>)
 8001734:	223f      	movs	r2, #63	; 0x3f
 8001736:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <MX_TIM7_Init+0x64>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <MX_TIM7_Init+0x64>)
 8001740:	f242 720f 	movw	r2, #9999	; 0x270f
 8001744:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <MX_TIM7_Init+0x64>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800174c:	480c      	ldr	r0, [pc, #48]	; (8001780 <MX_TIM7_Init+0x64>)
 800174e:	f00a fbeb 	bl	800bf28 <HAL_TIM_Base_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001758:	f001 f8cc 	bl	80028f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175c:	2300      	movs	r3, #0
 800175e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001764:	1d3b      	adds	r3, r7, #4
 8001766:	4619      	mov	r1, r3
 8001768:	4805      	ldr	r0, [pc, #20]	; (8001780 <MX_TIM7_Init+0x64>)
 800176a:	f00b fef7 	bl	800d55c <HAL_TIMEx_MasterConfigSynchronization>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001774:	f001 f8be 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001778:	bf00      	nop
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	240011fc 	.word	0x240011fc
 8001784:	40001400 	.word	0x40001400

08001788 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178e:	f107 0310 	add.w	r3, r7, #16
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800179c:	1d3b      	adds	r3, r7, #4
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80017a6:	4b20      	ldr	r3, [pc, #128]	; (8001828 <MX_TIM8_Init+0xa0>)
 80017a8:	4a20      	ldr	r2, [pc, #128]	; (800182c <MX_TIM8_Init+0xa4>)
 80017aa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 63;
 80017ac:	4b1e      	ldr	r3, [pc, #120]	; (8001828 <MX_TIM8_Init+0xa0>)
 80017ae:	223f      	movs	r2, #63	; 0x3f
 80017b0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b2:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <MX_TIM8_Init+0xa0>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1999;
 80017b8:	4b1b      	ldr	r3, [pc, #108]	; (8001828 <MX_TIM8_Init+0xa0>)
 80017ba:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80017be:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <MX_TIM8_Init+0xa0>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80017c6:	4b18      	ldr	r3, [pc, #96]	; (8001828 <MX_TIM8_Init+0xa0>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017cc:	4b16      	ldr	r3, [pc, #88]	; (8001828 <MX_TIM8_Init+0xa0>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80017d2:	4815      	ldr	r0, [pc, #84]	; (8001828 <MX_TIM8_Init+0xa0>)
 80017d4:	f00a fba8 	bl	800bf28 <HAL_TIM_Base_Init>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80017de:	f001 f889 	bl	80028f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80017e8:	f107 0310 	add.w	r3, r7, #16
 80017ec:	4619      	mov	r1, r3
 80017ee:	480e      	ldr	r0, [pc, #56]	; (8001828 <MX_TIM8_Init+0xa0>)
 80017f0:	f00b f954 	bl	800ca9c <HAL_TIM_ConfigClockSource>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80017fa:	f001 f87b 	bl	80028f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001802:	2300      	movs	r3, #0
 8001804:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	4619      	mov	r1, r3
 800180e:	4806      	ldr	r0, [pc, #24]	; (8001828 <MX_TIM8_Init+0xa0>)
 8001810:	f00b fea4 	bl	800d55c <HAL_TIMEx_MasterConfigSynchronization>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800181a:	f001 f86b 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800181e:	bf00      	nop
 8001820:	3720      	adds	r7, #32
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	24000cb4 	.word	0x24000cb4
 800182c:	40010400 	.word	0x40010400

08001830 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
 8001844:	615a      	str	r2, [r3, #20]
 8001846:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001848:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <MX_TIM12_Init+0x98>)
 800184a:	4a20      	ldr	r2, [pc, #128]	; (80018cc <MX_TIM12_Init+0x9c>)
 800184c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800184e:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <MX_TIM12_Init+0x98>)
 8001850:	2200      	movs	r2, #0
 8001852:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001854:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <MX_TIM12_Init+0x98>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800185a:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <MX_TIM12_Init+0x98>)
 800185c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001860:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001862:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <MX_TIM12_Init+0x98>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001868:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <MX_TIM12_Init+0x98>)
 800186a:	2200      	movs	r2, #0
 800186c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800186e:	4816      	ldr	r0, [pc, #88]	; (80018c8 <MX_TIM12_Init+0x98>)
 8001870:	f00a fc38 	bl	800c0e4 <HAL_TIM_PWM_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800187a:	f001 f83b 	bl	80028f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800187e:	2360      	movs	r3, #96	; 0x60
 8001880:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	2200      	movs	r2, #0
 8001892:	4619      	mov	r1, r3
 8001894:	480c      	ldr	r0, [pc, #48]	; (80018c8 <MX_TIM12_Init+0x98>)
 8001896:	f00a ffed 	bl	800c874 <HAL_TIM_PWM_ConfigChannel>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80018a0:	f001 f828 	bl	80028f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	2204      	movs	r2, #4
 80018a8:	4619      	mov	r1, r3
 80018aa:	4807      	ldr	r0, [pc, #28]	; (80018c8 <MX_TIM12_Init+0x98>)
 80018ac:	f00a ffe2 	bl	800c874 <HAL_TIM_PWM_ConfigChannel>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 80018b6:	f001 f81d 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80018ba:	4803      	ldr	r0, [pc, #12]	; (80018c8 <MX_TIM12_Init+0x98>)
 80018bc:	f004 fb66 	bl	8005f8c <HAL_TIM_MspPostInit>

}
 80018c0:	bf00      	nop
 80018c2:	3720      	adds	r7, #32
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	24001158 	.word	0x24001158
 80018cc:	40001800 	.word	0x40001800

080018d0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80018d4:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <MX_TIM13_Init+0x40>)
 80018d6:	4a0f      	ldr	r2, [pc, #60]	; (8001914 <MX_TIM13_Init+0x44>)
 80018d8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 63;
 80018da:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <MX_TIM13_Init+0x40>)
 80018dc:	223f      	movs	r2, #63	; 0x3f
 80018de:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <MX_TIM13_Init+0x40>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 999;
 80018e6:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <MX_TIM13_Init+0x40>)
 80018e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018ec:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <MX_TIM13_Init+0x40>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <MX_TIM13_Init+0x40>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80018fa:	4805      	ldr	r0, [pc, #20]	; (8001910 <MX_TIM13_Init+0x40>)
 80018fc:	f00a fb14 	bl	800bf28 <HAL_TIM_Base_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8001906:	f000 fff5 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	24000fc8 	.word	0x24000fc8
 8001914:	40001c00 	.word	0x40001c00

08001918 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b098      	sub	sp, #96	; 0x60
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001922:	2200      	movs	r2, #0
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	605a      	str	r2, [r3, #4]
 8001928:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800192a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	611a      	str	r2, [r3, #16]
 800193a:	615a      	str	r2, [r3, #20]
 800193c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	2234      	movs	r2, #52	; 0x34
 8001942:	2100      	movs	r1, #0
 8001944:	4618      	mov	r0, r3
 8001946:	f00f fcc1 	bl	80112cc <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800194a:	4b3a      	ldr	r3, [pc, #232]	; (8001a34 <MX_TIM15_Init+0x11c>)
 800194c:	4a3a      	ldr	r2, [pc, #232]	; (8001a38 <MX_TIM15_Init+0x120>)
 800194e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001950:	4b38      	ldr	r3, [pc, #224]	; (8001a34 <MX_TIM15_Init+0x11c>)
 8001952:	2200      	movs	r2, #0
 8001954:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001956:	4b37      	ldr	r3, [pc, #220]	; (8001a34 <MX_TIM15_Init+0x11c>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800195c:	4b35      	ldr	r3, [pc, #212]	; (8001a34 <MX_TIM15_Init+0x11c>)
 800195e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001962:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001964:	4b33      	ldr	r3, [pc, #204]	; (8001a34 <MX_TIM15_Init+0x11c>)
 8001966:	2200      	movs	r2, #0
 8001968:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800196a:	4b32      	ldr	r3, [pc, #200]	; (8001a34 <MX_TIM15_Init+0x11c>)
 800196c:	2200      	movs	r2, #0
 800196e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001970:	4b30      	ldr	r3, [pc, #192]	; (8001a34 <MX_TIM15_Init+0x11c>)
 8001972:	2200      	movs	r2, #0
 8001974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001976:	482f      	ldr	r0, [pc, #188]	; (8001a34 <MX_TIM15_Init+0x11c>)
 8001978:	f00a fbb4 	bl	800c0e4 <HAL_TIM_PWM_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001982:	f000 ffb7 	bl	80028f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800198e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001992:	4619      	mov	r1, r3
 8001994:	4827      	ldr	r0, [pc, #156]	; (8001a34 <MX_TIM15_Init+0x11c>)
 8001996:	f00b fde1 	bl	800d55c <HAL_TIMEx_MasterConfigSynchronization>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80019a0:	f000 ffa8 	bl	80028f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019a4:	2360      	movs	r3, #96	; 0x60
 80019a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019ac:	2300      	movs	r3, #0
 80019ae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019b0:	2300      	movs	r3, #0
 80019b2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019b8:	2300      	movs	r3, #0
 80019ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019bc:	2300      	movs	r3, #0
 80019be:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019c4:	2200      	movs	r2, #0
 80019c6:	4619      	mov	r1, r3
 80019c8:	481a      	ldr	r0, [pc, #104]	; (8001a34 <MX_TIM15_Init+0x11c>)
 80019ca:	f00a ff53 	bl	800c874 <HAL_TIM_PWM_ConfigChannel>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 80019d4:	f000 ff8e 	bl	80028f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019dc:	2204      	movs	r2, #4
 80019de:	4619      	mov	r1, r3
 80019e0:	4814      	ldr	r0, [pc, #80]	; (8001a34 <MX_TIM15_Init+0x11c>)
 80019e2:	f00a ff47 	bl	800c874 <HAL_TIM_PWM_ConfigChannel>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 80019ec:	f000 ff82 	bl	80028f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019f8:	2300      	movs	r3, #0
 80019fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a08:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	4619      	mov	r1, r3
 8001a16:	4807      	ldr	r0, [pc, #28]	; (8001a34 <MX_TIM15_Init+0x11c>)
 8001a18:	f00b fe3c 	bl	800d694 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8001a22:	f000 ff67 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001a26:	4803      	ldr	r0, [pc, #12]	; (8001a34 <MX_TIM15_Init+0x11c>)
 8001a28:	f004 fab0 	bl	8005f8c <HAL_TIM_MspPostInit>

}
 8001a2c:	bf00      	nop
 8001a2e:	3760      	adds	r7, #96	; 0x60
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	24000e60 	.word	0x24000e60
 8001a38:	40014000 	.word	0x40014000

08001a3c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b094      	sub	sp, #80	; 0x50
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	60da      	str	r2, [r3, #12]
 8001a50:	611a      	str	r2, [r3, #16]
 8001a52:	615a      	str	r2, [r3, #20]
 8001a54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a56:	463b      	mov	r3, r7
 8001a58:	2234      	movs	r2, #52	; 0x34
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f00f fc35 	bl	80112cc <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001a62:	4b31      	ldr	r3, [pc, #196]	; (8001b28 <MX_TIM16_Init+0xec>)
 8001a64:	4a31      	ldr	r2, [pc, #196]	; (8001b2c <MX_TIM16_Init+0xf0>)
 8001a66:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63;
 8001a68:	4b2f      	ldr	r3, [pc, #188]	; (8001b28 <MX_TIM16_Init+0xec>)
 8001a6a:	223f      	movs	r2, #63	; 0x3f
 8001a6c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6e:	4b2e      	ldr	r3, [pc, #184]	; (8001b28 <MX_TIM16_Init+0xec>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 19999;
 8001a74:	4b2c      	ldr	r3, [pc, #176]	; (8001b28 <MX_TIM16_Init+0xec>)
 8001a76:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001a7a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7c:	4b2a      	ldr	r3, [pc, #168]	; (8001b28 <MX_TIM16_Init+0xec>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001a82:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <MX_TIM16_Init+0xec>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a88:	4b27      	ldr	r3, [pc, #156]	; (8001b28 <MX_TIM16_Init+0xec>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001a8e:	4826      	ldr	r0, [pc, #152]	; (8001b28 <MX_TIM16_Init+0xec>)
 8001a90:	f00a fa4a 	bl	800bf28 <HAL_TIM_Base_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001a9a:	f000 ff2b 	bl	80028f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001a9e:	4822      	ldr	r0, [pc, #136]	; (8001b28 <MX_TIM16_Init+0xec>)
 8001aa0:	f00a fb20 	bl	800c0e4 <HAL_TIM_PWM_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001aaa:	f000 ff23 	bl	80028f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aae:	2360      	movs	r3, #96	; 0x60
 8001ab0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001aba:	2300      	movs	r3, #0
 8001abc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ace:	2200      	movs	r2, #0
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4815      	ldr	r0, [pc, #84]	; (8001b28 <MX_TIM16_Init+0xec>)
 8001ad4:	f00a fece 	bl	800c874 <HAL_TIM_PWM_ConfigChannel>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8001ade:	f000 ff09 	bl	80028f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001aea:	2300      	movs	r3, #0
 8001aec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001af6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001afa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001b04:	463b      	mov	r3, r7
 8001b06:	4619      	mov	r1, r3
 8001b08:	4807      	ldr	r0, [pc, #28]	; (8001b28 <MX_TIM16_Init+0xec>)
 8001b0a:	f00b fdc3 	bl	800d694 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001b14:	f000 feee 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001b18:	4803      	ldr	r0, [pc, #12]	; (8001b28 <MX_TIM16_Init+0xec>)
 8001b1a:	f004 fa37 	bl	8005f8c <HAL_TIM_MspPostInit>

}
 8001b1e:	bf00      	nop
 8001b20:	3750      	adds	r7, #80	; 0x50
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	240011b0 	.word	0x240011b0
 8001b2c:	40014400 	.word	0x40014400

08001b30 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	; 0x28
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b36:	f107 031c 	add.w	r3, r7, #28
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b42:	463b      	mov	r3, r7
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
 8001b50:	615a      	str	r2, [r3, #20]
 8001b52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8001b54:	4b21      	ldr	r3, [pc, #132]	; (8001bdc <MX_TIM23_Init+0xac>)
 8001b56:	4a22      	ldr	r2, [pc, #136]	; (8001be0 <MX_TIM23_Init+0xb0>)
 8001b58:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 63;
 8001b5a:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <MX_TIM23_Init+0xac>)
 8001b5c:	223f      	movs	r2, #63	; 0x3f
 8001b5e:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b60:	4b1e      	ldr	r3, [pc, #120]	; (8001bdc <MX_TIM23_Init+0xac>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 19999;
 8001b66:	4b1d      	ldr	r3, [pc, #116]	; (8001bdc <MX_TIM23_Init+0xac>)
 8001b68:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001b6c:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b6e:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <MX_TIM23_Init+0xac>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b74:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <MX_TIM23_Init+0xac>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim23) != HAL_OK)
 8001b7a:	4818      	ldr	r0, [pc, #96]	; (8001bdc <MX_TIM23_Init+0xac>)
 8001b7c:	f00a fab2 	bl	800c0e4 <HAL_TIM_PWM_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM23_Init+0x5a>
  {
    Error_Handler();
 8001b86:	f000 feb5 	bl	80028f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8001b92:	f107 031c 	add.w	r3, r7, #28
 8001b96:	4619      	mov	r1, r3
 8001b98:	4810      	ldr	r0, [pc, #64]	; (8001bdc <MX_TIM23_Init+0xac>)
 8001b9a:	f00b fcdf 	bl	800d55c <HAL_TIMEx_MasterConfigSynchronization>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM23_Init+0x78>
  {
    Error_Handler();
 8001ba4:	f000 fea6 	bl	80028f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ba8:	2360      	movs	r3, #96	; 0x60
 8001baa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bb8:	463b      	mov	r3, r7
 8001bba:	220c      	movs	r2, #12
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4807      	ldr	r0, [pc, #28]	; (8001bdc <MX_TIM23_Init+0xac>)
 8001bc0:	f00a fe58 	bl	800c874 <HAL_TIM_PWM_ConfigChannel>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM23_Init+0x9e>
  {
    Error_Handler();
 8001bca:	f000 fe93 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */
  HAL_TIM_MspPostInit(&htim23);
 8001bce:	4803      	ldr	r0, [pc, #12]	; (8001bdc <MX_TIM23_Init+0xac>)
 8001bd0:	f004 f9dc 	bl	8005f8c <HAL_TIM_MspPostInit>

}
 8001bd4:	bf00      	nop
 8001bd6:	3728      	adds	r7, #40	; 0x28
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	24001108 	.word	0x24001108
 8001be0:	4000e000 	.word	0x4000e000

08001be4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001be8:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <MX_USART3_UART_Init+0x90>)
 8001bea:	4a23      	ldr	r2, [pc, #140]	; (8001c78 <MX_USART3_UART_Init+0x94>)
 8001bec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001bee:	4b21      	ldr	r3, [pc, #132]	; (8001c74 <MX_USART3_UART_Init+0x90>)
 8001bf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bf4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bf6:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <MX_USART3_UART_Init+0x90>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001bfc:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <MX_USART3_UART_Init+0x90>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c02:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <MX_USART3_UART_Init+0x90>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c08:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <MX_USART3_UART_Init+0x90>)
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c0e:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <MX_USART3_UART_Init+0x90>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c14:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <MX_USART3_UART_Init+0x90>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c1a:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <MX_USART3_UART_Init+0x90>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c20:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <MX_USART3_UART_Init+0x90>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c26:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <MX_USART3_UART_Init+0x90>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c2c:	4811      	ldr	r0, [pc, #68]	; (8001c74 <MX_USART3_UART_Init+0x90>)
 8001c2e:	f00b fdef 	bl	800d810 <HAL_UART_Init>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001c38:	f000 fe5c 	bl	80028f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	480d      	ldr	r0, [pc, #52]	; (8001c74 <MX_USART3_UART_Init+0x90>)
 8001c40:	f00d fe28 	bl	800f894 <HAL_UARTEx_SetTxFifoThreshold>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001c4a:	f000 fe53 	bl	80028f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c4e:	2100      	movs	r1, #0
 8001c50:	4808      	ldr	r0, [pc, #32]	; (8001c74 <MX_USART3_UART_Init+0x90>)
 8001c52:	f00d fe5d 	bl	800f910 <HAL_UARTEx_SetRxFifoThreshold>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001c5c:	f000 fe4a 	bl	80028f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001c60:	4804      	ldr	r0, [pc, #16]	; (8001c74 <MX_USART3_UART_Init+0x90>)
 8001c62:	f00d fdde 	bl	800f822 <HAL_UARTEx_DisableFifoMode>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001c6c:	f000 fe42 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	24000dc4 	.word	0x24000dc4
 8001c78:	40004800 	.word	0x40004800

08001c7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c82:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <MX_DMA_Init+0x4c>)
 8001c84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c88:	4a0f      	ldr	r2, [pc, #60]	; (8001cc8 <MX_DMA_Init+0x4c>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c92:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <MX_DMA_Init+0x4c>)
 8001c94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	607b      	str	r3, [r7, #4]
 8001c9e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	200b      	movs	r0, #11
 8001ca6:	f004 fe82 	bl	80069ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001caa:	200b      	movs	r0, #11
 8001cac:	f004 fe99 	bl	80069e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	200c      	movs	r0, #12
 8001cb6:	f004 fe7a 	bl	80069ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001cba:	200c      	movs	r0, #12
 8001cbc:	f004 fe91 	bl	80069e2 <HAL_NVIC_EnableIRQ>

}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	58024400 	.word	0x58024400

08001ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08c      	sub	sp, #48	; 0x30
 8001cd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd2:	f107 031c 	add.w	r3, r7, #28
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	60da      	str	r2, [r3, #12]
 8001ce0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ce2:	4b6b      	ldr	r3, [pc, #428]	; (8001e90 <MX_GPIO_Init+0x1c4>)
 8001ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce8:	4a69      	ldr	r2, [pc, #420]	; (8001e90 <MX_GPIO_Init+0x1c4>)
 8001cea:	f043 0310 	orr.w	r3, r3, #16
 8001cee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cf2:	4b67      	ldr	r3, [pc, #412]	; (8001e90 <MX_GPIO_Init+0x1c4>)
 8001cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf8:	f003 0310 	and.w	r3, r3, #16
 8001cfc:	61bb      	str	r3, [r7, #24]
 8001cfe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d00:	4b63      	ldr	r3, [pc, #396]	; (8001e90 <MX_GPIO_Init+0x1c4>)
 8001d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d06:	4a62      	ldr	r2, [pc, #392]	; (8001e90 <MX_GPIO_Init+0x1c4>)
 8001d08:	f043 0304 	orr.w	r3, r3, #4
 8001d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d10:	4b5f      	ldr	r3, [pc, #380]	; (8001e90 <MX_GPIO_Init+0x1c4>)
 8001d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d1e:	4b5c      	ldr	r3, [pc, #368]	; (8001e90 <MX_GPIO_Init+0x1c4>)
 8001d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d24:	4a5a      	ldr	r2, [pc, #360]	; (8001e90 <MX_GPIO_Init+0x1c4>)
 8001d26:	f043 0320 	orr.w	r3, r3, #32
 8001d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d2e:	4b58      	ldr	r3, [pc, #352]	; (8001e90 <MX_GPIO_Init+0x1c4>)
 8001d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d34:	f003 0320 	and.w	r3, r3, #32
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d3c:	4b54      	ldr	r3, [pc, #336]	; (8001e90 <MX_GPIO_Init+0x1c4>)
 8001d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d42:	4a53      	ldr	r2, [pc, #332]	; (8001e90 <MX_GPIO_Init+0x1c4>)
 8001d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d4c:	4b50      	ldr	r3, [pc, #320]	; (8001e90 <MX_GPIO_Init+0x1c4>)
 8001d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5a:	4b4d      	ldr	r3, [pc, #308]	; (8001e90 <MX_GPIO_Init+0x1c4>)
 8001d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d60:	4a4b      	ldr	r2, [pc, #300]	; (8001e90 <MX_GPIO_Init+0x1c4>)
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d6a:	4b49      	ldr	r3, [pc, #292]	; (8001e90 <MX_GPIO_Init+0x1c4>)
 8001d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d78:	4b45      	ldr	r3, [pc, #276]	; (8001e90 <MX_GPIO_Init+0x1c4>)
 8001d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d7e:	4a44      	ldr	r2, [pc, #272]	; (8001e90 <MX_GPIO_Init+0x1c4>)
 8001d80:	f043 0302 	orr.w	r3, r3, #2
 8001d84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d88:	4b41      	ldr	r3, [pc, #260]	; (8001e90 <MX_GPIO_Init+0x1c4>)
 8001d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d96:	4b3e      	ldr	r3, [pc, #248]	; (8001e90 <MX_GPIO_Init+0x1c4>)
 8001d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d9c:	4a3c      	ldr	r2, [pc, #240]	; (8001e90 <MX_GPIO_Init+0x1c4>)
 8001d9e:	f043 0308 	orr.w	r3, r3, #8
 8001da2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001da6:	4b3a      	ldr	r3, [pc, #232]	; (8001e90 <MX_GPIO_Init+0x1c4>)
 8001da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dac:	f003 0308 	and.w	r3, r3, #8
 8001db0:	603b      	str	r3, [r7, #0]
 8001db2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 8001db4:	2200      	movs	r2, #0
 8001db6:	f248 511c 	movw	r1, #34076	; 0x851c
 8001dba:	4836      	ldr	r0, [pc, #216]	; (8001e94 <MX_GPIO_Init+0x1c8>)
 8001dbc:	f007 fe0c 	bl	80099d8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_5, GPIO_PIN_RESET);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f242 0120 	movw	r1, #8224	; 0x2020
 8001dc6:	4834      	ldr	r0, [pc, #208]	; (8001e98 <MX_GPIO_Init+0x1cc>)
 8001dc8:	f007 fe06 	bl	80099d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f44f 410b 	mov.w	r1, #35584	; 0x8b00
 8001dd2:	4832      	ldr	r0, [pc, #200]	; (8001e9c <MX_GPIO_Init+0x1d0>)
 8001dd4:	f007 fe00 	bl	80099d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f243 2106 	movw	r1, #12806	; 0x3206
 8001dde:	4830      	ldr	r0, [pc, #192]	; (8001ea0 <MX_GPIO_Init+0x1d4>)
 8001de0:	f007 fdfa 	bl	80099d8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_14, GPIO_PIN_RESET);
 8001de4:	2200      	movs	r2, #0
 8001de6:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 8001dea:	482e      	ldr	r0, [pc, #184]	; (8001ea4 <MX_GPIO_Init+0x1d8>)
 8001dec:	f007 fdf4 	bl	80099d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE8
                           PE10 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8
 8001df0:	f248 531c 	movw	r3, #34076	; 0x851c
 8001df4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df6:	2301      	movs	r3, #1
 8001df8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e02:	f107 031c 	add.w	r3, r7, #28
 8001e06:	4619      	mov	r1, r3
 8001e08:	4822      	ldr	r0, [pc, #136]	; (8001e94 <MX_GPIO_Init+0x1c8>)
 8001e0a:	f007 fc3d 	bl	8009688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8001e0e:	f242 0320 	movw	r3, #8224	; 0x2020
 8001e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e14:	2301      	movs	r3, #1
 8001e16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e20:	f107 031c 	add.w	r3, r7, #28
 8001e24:	4619      	mov	r1, r3
 8001e26:	481c      	ldr	r0, [pc, #112]	; (8001e98 <MX_GPIO_Init+0x1cc>)
 8001e28:	f007 fc2e 	bl	8009688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF8 PF9 PF11 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_15;
 8001e2c:	f44f 430b 	mov.w	r3, #35584	; 0x8b00
 8001e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e32:	2301      	movs	r3, #1
 8001e34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e3e:	f107 031c 	add.w	r3, r7, #28
 8001e42:	4619      	mov	r1, r3
 8001e44:	4815      	ldr	r0, [pc, #84]	; (8001e9c <MX_GPIO_Init+0x1d0>)
 8001e46:	f007 fc1f 	bl	8009688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8001e4a:	f243 2306 	movw	r3, #12806	; 0x3206
 8001e4e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e50:	2301      	movs	r3, #1
 8001e52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5c:	f107 031c 	add.w	r3, r7, #28
 8001e60:	4619      	mov	r1, r3
 8001e62:	480f      	ldr	r0, [pc, #60]	; (8001ea0 <MX_GPIO_Init+0x1d4>)
 8001e64:	f007 fc10 	bl	8009688 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_14;
 8001e68:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001e6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e76:	2300      	movs	r3, #0
 8001e78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e7a:	f107 031c 	add.w	r3, r7, #28
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4808      	ldr	r0, [pc, #32]	; (8001ea4 <MX_GPIO_Init+0x1d8>)
 8001e82:	f007 fc01 	bl	8009688 <HAL_GPIO_Init>

}
 8001e86:	bf00      	nop
 8001e88:	3730      	adds	r7, #48	; 0x30
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	58024400 	.word	0x58024400
 8001e94:	58021000 	.word	0x58021000
 8001e98:	58020800 	.word	0x58020800
 8001e9c:	58021400 	.word	0x58021400
 8001ea0:	58020400 	.word	0x58020400
 8001ea4:	58020c00 	.word	0x58020c00

08001ea8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM13) {
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4ab6      	ldr	r2, [pc, #728]	; (8002190 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	f040 83f6 	bne.w	80026a8 <HAL_TIM_PeriodElapsedCallback+0x800>
	ms4++;
 8001ebc:	4bb5      	ldr	r3, [pc, #724]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	4ab4      	ldr	r2, [pc, #720]	; (8002194 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001ec4:	6013      	str	r3, [r2, #0]
	time=0.001;
 8001ec6:	49b4      	ldr	r1, [pc, #720]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001ec8:	a3ab      	add	r3, pc, #684	; (adr r3, 8002178 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ece:	e9c1 2300 	strd	r2, r3, [r1]

	//motor 1 / encoder(time2)/ INA(PD8) INB(PD14) PWM(time12_ch2)
	CountNow_1=__HAL_TIM_GetCounter(&htim2);
 8001ed2:	4bb2      	ldr	r3, [pc, #712]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	b21a      	sxth	r2, r3
 8001eda:	4bb1      	ldr	r3, [pc, #708]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001edc:	801a      	strh	r2, [r3, #0]
	rps_1 = (double) CountNow_1/ 4 /res_encoder/sr_ratio/time;
 8001ede:	4bb0      	ldr	r3, [pc, #704]	; (80021a0 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001ee0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ee4:	ee07 3a90 	vmov	s15, r3
 8001ee8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001eec:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001ef0:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8001ef4:	4bab      	ldr	r3, [pc, #684]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	ee07 3a90 	vmov	s15, r3
 8001efc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001f00:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001f04:	4ba8      	ldr	r3, [pc, #672]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001f06:	ed93 7b00 	vldr	d7, [r3]
 8001f0a:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8001f0e:	4ba2      	ldr	r3, [pc, #648]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001f10:	ed93 6b00 	vldr	d6, [r3]
 8001f14:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001f18:	4ba4      	ldr	r3, [pc, #656]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001f1a:	ed83 7b00 	vstr	d7, [r3]
	__HAL_TIM_SetCounter(&htim2,0);
 8001f1e:	4b9f      	ldr	r3, [pc, #636]	; (800219c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2200      	movs	r2, #0
 8001f24:	625a      	str	r2, [r3, #36]	; 0x24

	e_1=DC1_RpsGoal-rps_1;
 8001f26:	4ba2      	ldr	r3, [pc, #648]	; (80021b0 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001f28:	ed93 6b00 	vldr	d6, [r3]
 8001f2c:	4b9f      	ldr	r3, [pc, #636]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001f2e:	ed93 7b00 	vldr	d7, [r3]
 8001f32:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001f36:	4b9f      	ldr	r3, [pc, #636]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001f38:	ed83 7b00 	vstr	d7, [r3]
	P_1=p_1*e_1;
 8001f3c:	4b9e      	ldr	r3, [pc, #632]	; (80021b8 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001f3e:	ed93 6b00 	vldr	d6, [r3]
 8001f42:	4b9c      	ldr	r3, [pc, #624]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001f44:	ed93 7b00 	vldr	d7, [r3]
 8001f48:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001f4c:	4b9b      	ldr	r3, [pc, #620]	; (80021bc <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001f4e:	ed83 7b00 	vstr	d7, [r3]
	I_1=I_1+i_1*e_1*time;
 8001f52:	4b9b      	ldr	r3, [pc, #620]	; (80021c0 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001f54:	ed93 6b00 	vldr	d6, [r3]
 8001f58:	4b96      	ldr	r3, [pc, #600]	; (80021b4 <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001f5a:	ed93 7b00 	vldr	d7, [r3]
 8001f5e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001f62:	4b8d      	ldr	r3, [pc, #564]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001f64:	ed93 7b00 	vldr	d7, [r3]
 8001f68:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001f6c:	4b95      	ldr	r3, [pc, #596]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001f6e:	ed93 7b00 	vldr	d7, [r3]
 8001f72:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001f76:	4b93      	ldr	r3, [pc, #588]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001f78:	ed83 7b00 	vstr	d7, [r3]

	if(rps_1==0) I_1=0;
 8001f7c:	4b8b      	ldr	r3, [pc, #556]	; (80021ac <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001f7e:	ed93 7b00 	vldr	d7, [r3]
 8001f82:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f8a:	d107      	bne.n	8001f9c <HAL_TIM_PeriodElapsedCallback+0xf4>
 8001f8c:	498d      	ldr	r1, [pc, #564]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	f04f 0300 	mov.w	r3, #0
 8001f96:	e9c1 2300 	strd	r2, r3, [r1]
 8001f9a:	e020      	b.n	8001fde <HAL_TIM_PeriodElapsedCallback+0x136>
	else if (I_1>200) I_1=200;
 8001f9c:	4b89      	ldr	r3, [pc, #548]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001f9e:	ed93 7b00 	vldr	d7, [r3]
 8001fa2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8002180 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 8001fa6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fae:	dd06      	ble.n	8001fbe <HAL_TIM_PeriodElapsedCallback+0x116>
 8001fb0:	4984      	ldr	r1, [pc, #528]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	4b84      	ldr	r3, [pc, #528]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001fb8:	e9c1 2300 	strd	r2, r3, [r1]
 8001fbc:	e00f      	b.n	8001fde <HAL_TIM_PeriodElapsedCallback+0x136>
	else if(I_1<-200) I_1=-200;
 8001fbe:	4b81      	ldr	r3, [pc, #516]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001fc0:	ed93 7b00 	vldr	d7, [r3]
 8001fc4:	ed9f 6b70 	vldr	d6, [pc, #448]	; 8002188 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 8001fc8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd0:	d505      	bpl.n	8001fde <HAL_TIM_PeriodElapsedCallback+0x136>
 8001fd2:	497c      	ldr	r1, [pc, #496]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	4b7c      	ldr	r3, [pc, #496]	; (80021cc <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001fda:	e9c1 2300 	strd	r2, r3, [r1]

	u_1=P_1+I_1;
 8001fde:	4b77      	ldr	r3, [pc, #476]	; (80021bc <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001fe0:	ed93 6b00 	vldr	d6, [r3]
 8001fe4:	4b77      	ldr	r3, [pc, #476]	; (80021c4 <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001fe6:	ed93 7b00 	vldr	d7, [r3]
 8001fea:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001fee:	4b78      	ldr	r3, [pc, #480]	; (80021d0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001ff0:	ed83 7b00 	vstr	d7, [r3]

	if(u_1>=0) {
 8001ff4:	4b76      	ldr	r3, [pc, #472]	; (80021d0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001ff6:	ed93 7b00 	vldr	d7, [r3]
 8001ffa:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002002:	db0c      	blt.n	800201e <HAL_TIM_PeriodElapsedCallback+0x176>
		HAL_GPIO_WritePin(DCmotor1_INA_Port,DCmotor1_INA_Pin,GPIO_PIN_SET);
 8002004:	2201      	movs	r2, #1
 8002006:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800200a:	4872      	ldr	r0, [pc, #456]	; (80021d4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800200c:	f007 fce4 	bl	80099d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DCmotor1_INB_Port,DCmotor1_INB_Pin,GPIO_PIN_RESET);
 8002010:	2200      	movs	r2, #0
 8002012:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002016:	486f      	ldr	r0, [pc, #444]	; (80021d4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002018:	f007 fcde 	bl	80099d8 <HAL_GPIO_WritePin>
 800201c:	e01b      	b.n	8002056 <HAL_TIM_PeriodElapsedCallback+0x1ae>
	}
	else if(u_1<0) {
 800201e:	4b6c      	ldr	r3, [pc, #432]	; (80021d0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002020:	ed93 7b00 	vldr	d7, [r3]
 8002024:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800202c:	d513      	bpl.n	8002056 <HAL_TIM_PeriodElapsedCallback+0x1ae>
		HAL_GPIO_WritePin(DCmotor1_INA_Port,DCmotor1_INA_Pin,GPIO_PIN_RESET);
 800202e:	2200      	movs	r2, #0
 8002030:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002034:	4867      	ldr	r0, [pc, #412]	; (80021d4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002036:	f007 fccf 	bl	80099d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DCmotor1_INB_Port,DCmotor1_INB_Pin,GPIO_PIN_SET);
 800203a:	2201      	movs	r2, #1
 800203c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002040:	4864      	ldr	r0, [pc, #400]	; (80021d4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002042:	f007 fcc9 	bl	80099d8 <HAL_GPIO_WritePin>
		u_1=-u_1;
 8002046:	4b62      	ldr	r3, [pc, #392]	; (80021d0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002048:	ed93 7b00 	vldr	d7, [r3]
 800204c:	eeb1 7b47 	vneg.f64	d7, d7
 8002050:	4b5f      	ldr	r3, [pc, #380]	; (80021d0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002052:	ed83 7b00 	vstr	d7, [r3]
	}

	pulse_1=(int)u_1*1000;
 8002056:	4b5e      	ldr	r3, [pc, #376]	; (80021d0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002058:	ed93 7b00 	vldr	d7, [r3]
 800205c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002060:	ee17 2a90 	vmov	r2, s15
 8002064:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002068:	fb03 f302 	mul.w	r3, r3, r2
 800206c:	4a5a      	ldr	r2, [pc, #360]	; (80021d8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800206e:	6013      	str	r3, [r2, #0]
	if(pulse_1>65535) pulse_1=65535;
 8002070:	4b59      	ldr	r3, [pc, #356]	; (80021d8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002078:	db03      	blt.n	8002082 <HAL_TIM_PeriodElapsedCallback+0x1da>
 800207a:	4b57      	ldr	r3, [pc, #348]	; (80021d8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800207c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002080:	601a      	str	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_2,pulse_1);
 8002082:	4b55      	ldr	r3, [pc, #340]	; (80021d8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	4b55      	ldr	r3, [pc, #340]	; (80021dc <HAL_TIM_PeriodElapsedCallback+0x334>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	639a      	str	r2, [r3, #56]	; 0x38


	//motor 2/ encoder(time5)/ INA(PB12) INB(PB13) PWM(time12_ch1)
	CountNow_2=__HAL_TIM_GetCounter(&htim5);
 800208c:	4b54      	ldr	r3, [pc, #336]	; (80021e0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	b21a      	sxth	r2, r3
 8002094:	4b53      	ldr	r3, [pc, #332]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002096:	801a      	strh	r2, [r3, #0]
	rps_2 = (double) CountNow_2/ 4 /res_encoder/sr_ratio/time;
 8002098:	4b52      	ldr	r3, [pc, #328]	; (80021e4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800209a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800209e:	ee07 3a90 	vmov	s15, r3
 80020a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80020a6:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80020aa:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80020ae:	4b3d      	ldr	r3, [pc, #244]	; (80021a4 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	ee07 3a90 	vmov	s15, r3
 80020b6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80020ba:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80020be:	4b3a      	ldr	r3, [pc, #232]	; (80021a8 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80020c0:	ed93 7b00 	vldr	d7, [r3]
 80020c4:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80020c8:	4b33      	ldr	r3, [pc, #204]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80020ca:	ed93 6b00 	vldr	d6, [r3]
 80020ce:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80020d2:	4b45      	ldr	r3, [pc, #276]	; (80021e8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80020d4:	ed83 7b00 	vstr	d7, [r3]
	__HAL_TIM_SetCounter(&htim5,0);
 80020d8:	4b41      	ldr	r3, [pc, #260]	; (80021e0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2200      	movs	r2, #0
 80020de:	625a      	str	r2, [r3, #36]	; 0x24

	e_2=DC2_RpsGoal-rps_2;
 80020e0:	4b42      	ldr	r3, [pc, #264]	; (80021ec <HAL_TIM_PeriodElapsedCallback+0x344>)
 80020e2:	ed93 6b00 	vldr	d6, [r3]
 80020e6:	4b40      	ldr	r3, [pc, #256]	; (80021e8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80020e8:	ed93 7b00 	vldr	d7, [r3]
 80020ec:	ee36 7b47 	vsub.f64	d7, d6, d7
 80020f0:	4b3f      	ldr	r3, [pc, #252]	; (80021f0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80020f2:	ed83 7b00 	vstr	d7, [r3]
	P_2=p_2*e_2;
 80020f6:	4b3f      	ldr	r3, [pc, #252]	; (80021f4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80020f8:	ed93 6b00 	vldr	d6, [r3]
 80020fc:	4b3c      	ldr	r3, [pc, #240]	; (80021f0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80020fe:	ed93 7b00 	vldr	d7, [r3]
 8002102:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002106:	4b3c      	ldr	r3, [pc, #240]	; (80021f8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8002108:	ed83 7b00 	vstr	d7, [r3]
	I_2=I_2+i_2*e_2*time;
 800210c:	4b3b      	ldr	r3, [pc, #236]	; (80021fc <HAL_TIM_PeriodElapsedCallback+0x354>)
 800210e:	ed93 6b00 	vldr	d6, [r3]
 8002112:	4b37      	ldr	r3, [pc, #220]	; (80021f0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8002114:	ed93 7b00 	vldr	d7, [r3]
 8002118:	ee26 6b07 	vmul.f64	d6, d6, d7
 800211c:	4b1e      	ldr	r3, [pc, #120]	; (8002198 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800211e:	ed93 7b00 	vldr	d7, [r3]
 8002122:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002126:	4b36      	ldr	r3, [pc, #216]	; (8002200 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8002128:	ed93 7b00 	vldr	d7, [r3]
 800212c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002130:	4b33      	ldr	r3, [pc, #204]	; (8002200 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8002132:	ed83 7b00 	vstr	d7, [r3]

	if(rps_2==0) I_2=0;
 8002136:	4b2c      	ldr	r3, [pc, #176]	; (80021e8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002138:	ed93 7b00 	vldr	d7, [r3]
 800213c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8002140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002144:	d107      	bne.n	8002156 <HAL_TIM_PeriodElapsedCallback+0x2ae>
 8002146:	492e      	ldr	r1, [pc, #184]	; (8002200 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8002148:	f04f 0200 	mov.w	r2, #0
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	e9c1 2300 	strd	r2, r3, [r1]
 8002154:	e066      	b.n	8002224 <HAL_TIM_PeriodElapsedCallback+0x37c>
	else if (I_2>200) I_2=200;
 8002156:	4b2a      	ldr	r3, [pc, #168]	; (8002200 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8002158:	ed93 7b00 	vldr	d7, [r3]
 800215c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8002180 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 8002160:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002168:	dd4c      	ble.n	8002204 <HAL_TIM_PeriodElapsedCallback+0x35c>
 800216a:	4925      	ldr	r1, [pc, #148]	; (8002200 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	4b15      	ldr	r3, [pc, #84]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002172:	e9c1 2300 	strd	r2, r3, [r1]
 8002176:	e055      	b.n	8002224 <HAL_TIM_PeriodElapsedCallback+0x37c>
 8002178:	d2f1a9fc 	.word	0xd2f1a9fc
 800217c:	3f50624d 	.word	0x3f50624d
 8002180:	00000000 	.word	0x00000000
 8002184:	40690000 	.word	0x40690000
 8002188:	00000000 	.word	0x00000000
 800218c:	c0690000 	.word	0xc0690000
 8002190:	40001c00 	.word	0x40001c00
 8002194:	24000150 	.word	0x24000150
 8002198:	24000008 	.word	0x24000008
 800219c:	240010bc 	.word	0x240010bc
 80021a0:	240010ba 	.word	0x240010ba
 80021a4:	24000000 	.word	0x24000000
 80021a8:	24000010 	.word	0x24000010
 80021ac:	24000fc0 	.word	0x24000fc0
 80021b0:	24000130 	.word	0x24000130
 80021b4:	240001a8 	.word	0x240001a8
 80021b8:	24000018 	.word	0x24000018
 80021bc:	24000168 	.word	0x24000168
 80021c0:	24000020 	.word	0x24000020
 80021c4:	24000188 	.word	0x24000188
 80021c8:	40690000 	.word	0x40690000
 80021cc:	c0690000 	.word	0xc0690000
 80021d0:	240001c8 	.word	0x240001c8
 80021d4:	58020c00 	.word	0x58020c00
 80021d8:	24000158 	.word	0x24000158
 80021dc:	24001158 	.word	0x24001158
 80021e0:	24000f24 	.word	0x24000f24
 80021e4:	24000cb0 	.word	0x24000cb0
 80021e8:	24000e58 	.word	0x24000e58
 80021ec:	24000138 	.word	0x24000138
 80021f0:	240001b0 	.word	0x240001b0
 80021f4:	24000028 	.word	0x24000028
 80021f8:	24000170 	.word	0x24000170
 80021fc:	24000030 	.word	0x24000030
 8002200:	24000190 	.word	0x24000190
	else if(I_2<-200) I_2=-200;
 8002204:	4b8a      	ldr	r3, [pc, #552]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x588>)
 8002206:	ed93 7b00 	vldr	d7, [r3]
 800220a:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8002420 <HAL_TIM_PeriodElapsedCallback+0x578>
 800220e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002216:	d505      	bpl.n	8002224 <HAL_TIM_PeriodElapsedCallback+0x37c>
 8002218:	4985      	ldr	r1, [pc, #532]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x588>)
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	4b85      	ldr	r3, [pc, #532]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8002220:	e9c1 2300 	strd	r2, r3, [r1]

	u_2=P_2+I_2;
 8002224:	4b84      	ldr	r3, [pc, #528]	; (8002438 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8002226:	ed93 6b00 	vldr	d6, [r3]
 800222a:	4b81      	ldr	r3, [pc, #516]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x588>)
 800222c:	ed93 7b00 	vldr	d7, [r3]
 8002230:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002234:	4b81      	ldr	r3, [pc, #516]	; (800243c <HAL_TIM_PeriodElapsedCallback+0x594>)
 8002236:	ed83 7b00 	vstr	d7, [r3]

	if(u_2>=0) {
 800223a:	4b80      	ldr	r3, [pc, #512]	; (800243c <HAL_TIM_PeriodElapsedCallback+0x594>)
 800223c:	ed93 7b00 	vldr	d7, [r3]
 8002240:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002248:	db0c      	blt.n	8002264 <HAL_TIM_PeriodElapsedCallback+0x3bc>
		HAL_GPIO_WritePin(DCmotor2_INA_Port,DCmotor2_INA_Pin,GPIO_PIN_SET);
 800224a:	2201      	movs	r2, #1
 800224c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002250:	487b      	ldr	r0, [pc, #492]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8002252:	f007 fbc1 	bl	80099d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DCmotor2_INB_Port,DCmotor2_INB_Pin,GPIO_PIN_RESET);
 8002256:	2200      	movs	r2, #0
 8002258:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800225c:	4878      	ldr	r0, [pc, #480]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x598>)
 800225e:	f007 fbbb 	bl	80099d8 <HAL_GPIO_WritePin>
 8002262:	e01b      	b.n	800229c <HAL_TIM_PeriodElapsedCallback+0x3f4>
	}
	else if(u_2<0) {
 8002264:	4b75      	ldr	r3, [pc, #468]	; (800243c <HAL_TIM_PeriodElapsedCallback+0x594>)
 8002266:	ed93 7b00 	vldr	d7, [r3]
 800226a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800226e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002272:	d513      	bpl.n	800229c <HAL_TIM_PeriodElapsedCallback+0x3f4>
		HAL_GPIO_WritePin(DCmotor2_INA_Port,DCmotor2_INA_Pin,GPIO_PIN_RESET);
 8002274:	2200      	movs	r2, #0
 8002276:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800227a:	4871      	ldr	r0, [pc, #452]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x598>)
 800227c:	f007 fbac 	bl	80099d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DCmotor2_INB_Port,DCmotor2_INB_Pin,GPIO_PIN_SET);
 8002280:	2201      	movs	r2, #1
 8002282:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002286:	486e      	ldr	r0, [pc, #440]	; (8002440 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8002288:	f007 fba6 	bl	80099d8 <HAL_GPIO_WritePin>
		u_2=-u_2;
 800228c:	4b6b      	ldr	r3, [pc, #428]	; (800243c <HAL_TIM_PeriodElapsedCallback+0x594>)
 800228e:	ed93 7b00 	vldr	d7, [r3]
 8002292:	eeb1 7b47 	vneg.f64	d7, d7
 8002296:	4b69      	ldr	r3, [pc, #420]	; (800243c <HAL_TIM_PeriodElapsedCallback+0x594>)
 8002298:	ed83 7b00 	vstr	d7, [r3]
	}

	pulse_2=(int)u_2*1000;
 800229c:	4b67      	ldr	r3, [pc, #412]	; (800243c <HAL_TIM_PeriodElapsedCallback+0x594>)
 800229e:	ed93 7b00 	vldr	d7, [r3]
 80022a2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80022a6:	ee17 2a90 	vmov	r2, s15
 80022aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ae:	fb03 f302 	mul.w	r3, r3, r2
 80022b2:	4a64      	ldr	r2, [pc, #400]	; (8002444 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80022b4:	6013      	str	r3, [r2, #0]
	if(pulse_2>65535)
 80022b6:	4b63      	ldr	r3, [pc, #396]	; (8002444 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022be:	db03      	blt.n	80022c8 <HAL_TIM_PeriodElapsedCallback+0x420>
	{
		pulse_2=65535;
 80022c0:	4b60      	ldr	r3, [pc, #384]	; (8002444 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80022c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022c6:	601a      	str	r2, [r3, #0]
	}

	__HAL_TIM_SET_COMPARE(&htim12,TIM_CHANNEL_1,pulse_2);
 80022c8:	4b5e      	ldr	r3, [pc, #376]	; (8002444 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4b5e      	ldr	r3, [pc, #376]	; (8002448 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	635a      	str	r2, [r3, #52]	; 0x34

	//motor 3/ encoder(time3)/ INA(PE2) INB(PE3) PWM(time15_ch1)
	CountNow_3=__HAL_TIM_GetCounter(&htim3);
 80022d2:	4b5e      	ldr	r3, [pc, #376]	; (800244c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	b21a      	sxth	r2, r3
 80022da:	4b5d      	ldr	r3, [pc, #372]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80022dc:	801a      	strh	r2, [r3, #0]
	rps_3 = (double) CountNow_3/ 4 /res_encoder/sr_ratio/time;
 80022de:	4b5c      	ldr	r3, [pc, #368]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 80022e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022e4:	ee07 3a90 	vmov	s15, r3
 80022e8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80022ec:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80022f0:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80022f4:	4b57      	ldr	r3, [pc, #348]	; (8002454 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	ee07 3a90 	vmov	s15, r3
 80022fc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002300:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002304:	4b54      	ldr	r3, [pc, #336]	; (8002458 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8002306:	ed93 7b00 	vldr	d7, [r3]
 800230a:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800230e:	4b53      	ldr	r3, [pc, #332]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8002310:	ed93 6b00 	vldr	d6, [r3]
 8002314:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002318:	4b51      	ldr	r3, [pc, #324]	; (8002460 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 800231a:	ed83 7b00 	vstr	d7, [r3]
	__HAL_TIM_SetCounter(&htim3,0);
 800231e:	4b4b      	ldr	r3, [pc, #300]	; (800244c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2200      	movs	r2, #0
 8002324:	625a      	str	r2, [r3, #36]	; 0x24

	e_3=DC3_RpsGoal-rps_3;
 8002326:	4b4f      	ldr	r3, [pc, #316]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 8002328:	ed93 6b00 	vldr	d6, [r3]
 800232c:	4b4c      	ldr	r3, [pc, #304]	; (8002460 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 800232e:	ed93 7b00 	vldr	d7, [r3]
 8002332:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002336:	4b4c      	ldr	r3, [pc, #304]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8002338:	ed83 7b00 	vstr	d7, [r3]
	P_3=p_3*e_3;
 800233c:	4b4b      	ldr	r3, [pc, #300]	; (800246c <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 800233e:	ed93 6b00 	vldr	d6, [r3]
 8002342:	4b49      	ldr	r3, [pc, #292]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8002344:	ed93 7b00 	vldr	d7, [r3]
 8002348:	ee26 7b07 	vmul.f64	d7, d6, d7
 800234c:	4b48      	ldr	r3, [pc, #288]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 800234e:	ed83 7b00 	vstr	d7, [r3]
	I_3=I_3+i_3*e_3*time;
 8002352:	4b48      	ldr	r3, [pc, #288]	; (8002474 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8002354:	ed93 6b00 	vldr	d6, [r3]
 8002358:	4b43      	ldr	r3, [pc, #268]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 800235a:	ed93 7b00 	vldr	d7, [r3]
 800235e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002362:	4b3e      	ldr	r3, [pc, #248]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8002364:	ed93 7b00 	vldr	d7, [r3]
 8002368:	ee26 6b07 	vmul.f64	d6, d6, d7
 800236c:	4b42      	ldr	r3, [pc, #264]	; (8002478 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800236e:	ed93 7b00 	vldr	d7, [r3]
 8002372:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002376:	4b40      	ldr	r3, [pc, #256]	; (8002478 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8002378:	ed83 7b00 	vstr	d7, [r3]

	if(rps_3==0) I_3=0;
 800237c:	4b38      	ldr	r3, [pc, #224]	; (8002460 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 800237e:	ed93 7b00 	vldr	d7, [r3]
 8002382:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8002386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800238a:	d107      	bne.n	800239c <HAL_TIM_PeriodElapsedCallback+0x4f4>
 800238c:	493a      	ldr	r1, [pc, #232]	; (8002478 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	f04f 0300 	mov.w	r3, #0
 8002396:	e9c1 2300 	strd	r2, r3, [r1]
 800239a:	e020      	b.n	80023de <HAL_TIM_PeriodElapsedCallback+0x536>
	else if (I_3>200) I_3=200;
 800239c:	4b36      	ldr	r3, [pc, #216]	; (8002478 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800239e:	ed93 7b00 	vldr	d7, [r3]
 80023a2:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8002428 <HAL_TIM_PeriodElapsedCallback+0x580>
 80023a6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80023aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ae:	dd06      	ble.n	80023be <HAL_TIM_PeriodElapsedCallback+0x516>
 80023b0:	4931      	ldr	r1, [pc, #196]	; (8002478 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	4b31      	ldr	r3, [pc, #196]	; (800247c <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 80023b8:	e9c1 2300 	strd	r2, r3, [r1]
 80023bc:	e00f      	b.n	80023de <HAL_TIM_PeriodElapsedCallback+0x536>
	else if(I_3<-200) I_3=-200;
 80023be:	4b2e      	ldr	r3, [pc, #184]	; (8002478 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80023c0:	ed93 7b00 	vldr	d7, [r3]
 80023c4:	ed9f 6b16 	vldr	d6, [pc, #88]	; 8002420 <HAL_TIM_PeriodElapsedCallback+0x578>
 80023c8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80023cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d0:	d505      	bpl.n	80023de <HAL_TIM_PeriodElapsedCallback+0x536>
 80023d2:	4929      	ldr	r1, [pc, #164]	; (8002478 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	4b16      	ldr	r3, [pc, #88]	; (8002434 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 80023da:	e9c1 2300 	strd	r2, r3, [r1]

	u_3=P_3+I_3;
 80023de:	4b24      	ldr	r3, [pc, #144]	; (8002470 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 80023e0:	ed93 6b00 	vldr	d6, [r3]
 80023e4:	4b24      	ldr	r3, [pc, #144]	; (8002478 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80023e6:	ed93 7b00 	vldr	d7, [r3]
 80023ea:	ee36 7b07 	vadd.f64	d7, d6, d7
 80023ee:	4b24      	ldr	r3, [pc, #144]	; (8002480 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 80023f0:	ed83 7b00 	vstr	d7, [r3]

	if(u_3>=0) {
 80023f4:	4b22      	ldr	r3, [pc, #136]	; (8002480 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 80023f6:	ed93 7b00 	vldr	d7, [r3]
 80023fa:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80023fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002402:	db41      	blt.n	8002488 <HAL_TIM_PeriodElapsedCallback+0x5e0>
		HAL_GPIO_WritePin(DCmotor3_INA_Port,DCmotor3_INA_Pin,GPIO_PIN_SET);
 8002404:	2201      	movs	r2, #1
 8002406:	2108      	movs	r1, #8
 8002408:	481e      	ldr	r0, [pc, #120]	; (8002484 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800240a:	f007 fae5 	bl	80099d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DCmotor3_INB_Port,DCmotor3_INB_Pin,GPIO_PIN_RESET);
 800240e:	2200      	movs	r2, #0
 8002410:	2104      	movs	r1, #4
 8002412:	481c      	ldr	r0, [pc, #112]	; (8002484 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8002414:	f007 fae0 	bl	80099d8 <HAL_GPIO_WritePin>
 8002418:	e050      	b.n	80024bc <HAL_TIM_PeriodElapsedCallback+0x614>
 800241a:	bf00      	nop
 800241c:	f3af 8000 	nop.w
 8002420:	00000000 	.word	0x00000000
 8002424:	c0690000 	.word	0xc0690000
 8002428:	00000000 	.word	0x00000000
 800242c:	40690000 	.word	0x40690000
 8002430:	24000190 	.word	0x24000190
 8002434:	c0690000 	.word	0xc0690000
 8002438:	24000170 	.word	0x24000170
 800243c:	240001d0 	.word	0x240001d0
 8002440:	58020400 	.word	0x58020400
 8002444:	2400015c 	.word	0x2400015c
 8002448:	24001158 	.word	0x24001158
 800244c:	24000f70 	.word	0x24000f70
 8002450:	240010b8 	.word	0x240010b8
 8002454:	24000000 	.word	0x24000000
 8002458:	24000010 	.word	0x24000010
 800245c:	24000008 	.word	0x24000008
 8002460:	240011a8 	.word	0x240011a8
 8002464:	24000140 	.word	0x24000140
 8002468:	240001b8 	.word	0x240001b8
 800246c:	24000038 	.word	0x24000038
 8002470:	24000178 	.word	0x24000178
 8002474:	24000040 	.word	0x24000040
 8002478:	24000198 	.word	0x24000198
 800247c:	40690000 	.word	0x40690000
 8002480:	240001d8 	.word	0x240001d8
 8002484:	58021000 	.word	0x58021000
	}
	else if(u_3<0) {
 8002488:	4ba3      	ldr	r3, [pc, #652]	; (8002718 <HAL_TIM_PeriodElapsedCallback+0x870>)
 800248a:	ed93 7b00 	vldr	d7, [r3]
 800248e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002496:	d511      	bpl.n	80024bc <HAL_TIM_PeriodElapsedCallback+0x614>
		HAL_GPIO_WritePin(DCmotor3_INA_Port,DCmotor3_INA_Pin,GPIO_PIN_RESET);
 8002498:	2200      	movs	r2, #0
 800249a:	2108      	movs	r1, #8
 800249c:	489f      	ldr	r0, [pc, #636]	; (800271c <HAL_TIM_PeriodElapsedCallback+0x874>)
 800249e:	f007 fa9b 	bl	80099d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DCmotor3_INB_Port,DCmotor3_INB_Pin,GPIO_PIN_SET);
 80024a2:	2201      	movs	r2, #1
 80024a4:	2104      	movs	r1, #4
 80024a6:	489d      	ldr	r0, [pc, #628]	; (800271c <HAL_TIM_PeriodElapsedCallback+0x874>)
 80024a8:	f007 fa96 	bl	80099d8 <HAL_GPIO_WritePin>
		u_3=-u_3;
 80024ac:	4b9a      	ldr	r3, [pc, #616]	; (8002718 <HAL_TIM_PeriodElapsedCallback+0x870>)
 80024ae:	ed93 7b00 	vldr	d7, [r3]
 80024b2:	eeb1 7b47 	vneg.f64	d7, d7
 80024b6:	4b98      	ldr	r3, [pc, #608]	; (8002718 <HAL_TIM_PeriodElapsedCallback+0x870>)
 80024b8:	ed83 7b00 	vstr	d7, [r3]
	}

	pulse_3=(int)u_3*1000;
 80024bc:	4b96      	ldr	r3, [pc, #600]	; (8002718 <HAL_TIM_PeriodElapsedCallback+0x870>)
 80024be:	ed93 7b00 	vldr	d7, [r3]
 80024c2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80024c6:	ee17 2a90 	vmov	r2, s15
 80024ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ce:	fb03 f302 	mul.w	r3, r3, r2
 80024d2:	4a93      	ldr	r2, [pc, #588]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x878>)
 80024d4:	6013      	str	r3, [r2, #0]
	if(pulse_3>65535)
 80024d6:	4b92      	ldr	r3, [pc, #584]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x878>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024de:	db03      	blt.n	80024e8 <HAL_TIM_PeriodElapsedCallback+0x640>
	{
		pulse_3=65535;
 80024e0:	4b8f      	ldr	r3, [pc, #572]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x878>)
 80024e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024e6:	601a      	str	r2, [r3, #0]
	}

	__HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_1,pulse_3);
 80024e8:	4b8d      	ldr	r3, [pc, #564]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x878>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4b8d      	ldr	r3, [pc, #564]	; (8002724 <HAL_TIM_PeriodElapsedCallback+0x87c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	635a      	str	r2, [r3, #52]	; 0x34

	//motor 4/ encoder(time4)/ INA(PE4) INB(PC13) PWM(time15_ch2)
	CountNow_4=__HAL_TIM_GetCounter(&htim4);
 80024f2:	4b8d      	ldr	r3, [pc, #564]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0x880>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	b21a      	sxth	r2, r3
 80024fa:	4b8c      	ldr	r3, [pc, #560]	; (800272c <HAL_TIM_PeriodElapsedCallback+0x884>)
 80024fc:	801a      	strh	r2, [r3, #0]
	rps_4 = (double) CountNow_4/ 4 /res_encoder/sr_ratio/time;
 80024fe:	4b8b      	ldr	r3, [pc, #556]	; (800272c <HAL_TIM_PeriodElapsedCallback+0x884>)
 8002500:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002504:	ee07 3a90 	vmov	s15, r3
 8002508:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800250c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8002510:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8002514:	4b86      	ldr	r3, [pc, #536]	; (8002730 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	ee07 3a90 	vmov	s15, r3
 800251c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002520:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002524:	4b83      	ldr	r3, [pc, #524]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x88c>)
 8002526:	ed93 7b00 	vldr	d7, [r3]
 800252a:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800252e:	4b82      	ldr	r3, [pc, #520]	; (8002738 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8002530:	ed93 6b00 	vldr	d6, [r3]
 8002534:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002538:	4b80      	ldr	r3, [pc, #512]	; (800273c <HAL_TIM_PeriodElapsedCallback+0x894>)
 800253a:	ed83 7b00 	vstr	d7, [r3]
	__HAL_TIM_SetCounter(&htim4,0);
 800253e:	4b7a      	ldr	r3, [pc, #488]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0x880>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2200      	movs	r2, #0
 8002544:	625a      	str	r2, [r3, #36]	; 0x24

	e_4=DC4_RpsGoal-rps_4;
 8002546:	4b7e      	ldr	r3, [pc, #504]	; (8002740 <HAL_TIM_PeriodElapsedCallback+0x898>)
 8002548:	ed93 6b00 	vldr	d6, [r3]
 800254c:	4b7b      	ldr	r3, [pc, #492]	; (800273c <HAL_TIM_PeriodElapsedCallback+0x894>)
 800254e:	ed93 7b00 	vldr	d7, [r3]
 8002552:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002556:	4b7b      	ldr	r3, [pc, #492]	; (8002744 <HAL_TIM_PeriodElapsedCallback+0x89c>)
 8002558:	ed83 7b00 	vstr	d7, [r3]
	P_4=p_4*e_4;
 800255c:	4b7a      	ldr	r3, [pc, #488]	; (8002748 <HAL_TIM_PeriodElapsedCallback+0x8a0>)
 800255e:	ed93 6b00 	vldr	d6, [r3]
 8002562:	4b78      	ldr	r3, [pc, #480]	; (8002744 <HAL_TIM_PeriodElapsedCallback+0x89c>)
 8002564:	ed93 7b00 	vldr	d7, [r3]
 8002568:	ee26 7b07 	vmul.f64	d7, d6, d7
 800256c:	4b77      	ldr	r3, [pc, #476]	; (800274c <HAL_TIM_PeriodElapsedCallback+0x8a4>)
 800256e:	ed83 7b00 	vstr	d7, [r3]
	I_4=I_4+i_4*e_4*time;
 8002572:	4b77      	ldr	r3, [pc, #476]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0x8a8>)
 8002574:	ed93 6b00 	vldr	d6, [r3]
 8002578:	4b72      	ldr	r3, [pc, #456]	; (8002744 <HAL_TIM_PeriodElapsedCallback+0x89c>)
 800257a:	ed93 7b00 	vldr	d7, [r3]
 800257e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002582:	4b6d      	ldr	r3, [pc, #436]	; (8002738 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8002584:	ed93 7b00 	vldr	d7, [r3]
 8002588:	ee26 6b07 	vmul.f64	d6, d6, d7
 800258c:	4b71      	ldr	r3, [pc, #452]	; (8002754 <HAL_TIM_PeriodElapsedCallback+0x8ac>)
 800258e:	ed93 7b00 	vldr	d7, [r3]
 8002592:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002596:	4b6f      	ldr	r3, [pc, #444]	; (8002754 <HAL_TIM_PeriodElapsedCallback+0x8ac>)
 8002598:	ed83 7b00 	vstr	d7, [r3]

	if(rps_4==0) I_4=0;
 800259c:	4b67      	ldr	r3, [pc, #412]	; (800273c <HAL_TIM_PeriodElapsedCallback+0x894>)
 800259e:	ed93 7b00 	vldr	d7, [r3]
 80025a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80025a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025aa:	d107      	bne.n	80025bc <HAL_TIM_PeriodElapsedCallback+0x714>
 80025ac:	4969      	ldr	r1, [pc, #420]	; (8002754 <HAL_TIM_PeriodElapsedCallback+0x8ac>)
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	e9c1 2300 	strd	r2, r3, [r1]
 80025ba:	e020      	b.n	80025fe <HAL_TIM_PeriodElapsedCallback+0x756>
	else if (I_4>200) I_4=200;
 80025bc:	4b65      	ldr	r3, [pc, #404]	; (8002754 <HAL_TIM_PeriodElapsedCallback+0x8ac>)
 80025be:	ed93 7b00 	vldr	d7, [r3]
 80025c2:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8002708 <HAL_TIM_PeriodElapsedCallback+0x860>
 80025c6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80025ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ce:	dd06      	ble.n	80025de <HAL_TIM_PeriodElapsedCallback+0x736>
 80025d0:	4960      	ldr	r1, [pc, #384]	; (8002754 <HAL_TIM_PeriodElapsedCallback+0x8ac>)
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	4b60      	ldr	r3, [pc, #384]	; (8002758 <HAL_TIM_PeriodElapsedCallback+0x8b0>)
 80025d8:	e9c1 2300 	strd	r2, r3, [r1]
 80025dc:	e00f      	b.n	80025fe <HAL_TIM_PeriodElapsedCallback+0x756>
	else if(I_4<-200) I_4=-200;
 80025de:	4b5d      	ldr	r3, [pc, #372]	; (8002754 <HAL_TIM_PeriodElapsedCallback+0x8ac>)
 80025e0:	ed93 7b00 	vldr	d7, [r3]
 80025e4:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8002710 <HAL_TIM_PeriodElapsedCallback+0x868>
 80025e8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80025ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f0:	d505      	bpl.n	80025fe <HAL_TIM_PeriodElapsedCallback+0x756>
 80025f2:	4958      	ldr	r1, [pc, #352]	; (8002754 <HAL_TIM_PeriodElapsedCallback+0x8ac>)
 80025f4:	f04f 0200 	mov.w	r2, #0
 80025f8:	4b58      	ldr	r3, [pc, #352]	; (800275c <HAL_TIM_PeriodElapsedCallback+0x8b4>)
 80025fa:	e9c1 2300 	strd	r2, r3, [r1]

	u_4=P_4+I_4;
 80025fe:	4b53      	ldr	r3, [pc, #332]	; (800274c <HAL_TIM_PeriodElapsedCallback+0x8a4>)
 8002600:	ed93 6b00 	vldr	d6, [r3]
 8002604:	4b53      	ldr	r3, [pc, #332]	; (8002754 <HAL_TIM_PeriodElapsedCallback+0x8ac>)
 8002606:	ed93 7b00 	vldr	d7, [r3]
 800260a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800260e:	4b54      	ldr	r3, [pc, #336]	; (8002760 <HAL_TIM_PeriodElapsedCallback+0x8b8>)
 8002610:	ed83 7b00 	vstr	d7, [r3]

	if(u_4>=0) {
 8002614:	4b52      	ldr	r3, [pc, #328]	; (8002760 <HAL_TIM_PeriodElapsedCallback+0x8b8>)
 8002616:	ed93 7b00 	vldr	d7, [r3]
 800261a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800261e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002622:	db0b      	blt.n	800263c <HAL_TIM_PeriodElapsedCallback+0x794>
		HAL_GPIO_WritePin(DCmotor4_INA_Port,DCmotor4_INA_Pin,GPIO_PIN_SET);
 8002624:	2201      	movs	r2, #1
 8002626:	2110      	movs	r1, #16
 8002628:	483c      	ldr	r0, [pc, #240]	; (800271c <HAL_TIM_PeriodElapsedCallback+0x874>)
 800262a:	f007 f9d5 	bl	80099d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DCmotor4_INB_Port,DCmotor4_INB_Pin,GPIO_PIN_RESET);
 800262e:	2200      	movs	r2, #0
 8002630:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002634:	484b      	ldr	r0, [pc, #300]	; (8002764 <HAL_TIM_PeriodElapsedCallback+0x8bc>)
 8002636:	f007 f9cf 	bl	80099d8 <HAL_GPIO_WritePin>
 800263a:	e01a      	b.n	8002672 <HAL_TIM_PeriodElapsedCallback+0x7ca>
	}
	else if(u_4<0) {
 800263c:	4b48      	ldr	r3, [pc, #288]	; (8002760 <HAL_TIM_PeriodElapsedCallback+0x8b8>)
 800263e:	ed93 7b00 	vldr	d7, [r3]
 8002642:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264a:	d512      	bpl.n	8002672 <HAL_TIM_PeriodElapsedCallback+0x7ca>
		HAL_GPIO_WritePin(DCmotor4_INA_Port,DCmotor4_INA_Pin,GPIO_PIN_RESET);
 800264c:	2200      	movs	r2, #0
 800264e:	2110      	movs	r1, #16
 8002650:	4832      	ldr	r0, [pc, #200]	; (800271c <HAL_TIM_PeriodElapsedCallback+0x874>)
 8002652:	f007 f9c1 	bl	80099d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DCmotor4_INB_Port,DCmotor4_INB_Pin,GPIO_PIN_SET);
 8002656:	2201      	movs	r2, #1
 8002658:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800265c:	4841      	ldr	r0, [pc, #260]	; (8002764 <HAL_TIM_PeriodElapsedCallback+0x8bc>)
 800265e:	f007 f9bb 	bl	80099d8 <HAL_GPIO_WritePin>
		u_4=-u_4;
 8002662:	4b3f      	ldr	r3, [pc, #252]	; (8002760 <HAL_TIM_PeriodElapsedCallback+0x8b8>)
 8002664:	ed93 7b00 	vldr	d7, [r3]
 8002668:	eeb1 7b47 	vneg.f64	d7, d7
 800266c:	4b3c      	ldr	r3, [pc, #240]	; (8002760 <HAL_TIM_PeriodElapsedCallback+0x8b8>)
 800266e:	ed83 7b00 	vstr	d7, [r3]
	}

	pulse_4=(int)u_4*1000;
 8002672:	4b3b      	ldr	r3, [pc, #236]	; (8002760 <HAL_TIM_PeriodElapsedCallback+0x8b8>)
 8002674:	ed93 7b00 	vldr	d7, [r3]
 8002678:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800267c:	ee17 2a90 	vmov	r2, s15
 8002680:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002684:	fb03 f302 	mul.w	r3, r3, r2
 8002688:	4a37      	ldr	r2, [pc, #220]	; (8002768 <HAL_TIM_PeriodElapsedCallback+0x8c0>)
 800268a:	6013      	str	r3, [r2, #0]
	if(pulse_4>65535)
 800268c:	4b36      	ldr	r3, [pc, #216]	; (8002768 <HAL_TIM_PeriodElapsedCallback+0x8c0>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002694:	db03      	blt.n	800269e <HAL_TIM_PeriodElapsedCallback+0x7f6>
	{
		pulse_4=65535;
 8002696:	4b34      	ldr	r3, [pc, #208]	; (8002768 <HAL_TIM_PeriodElapsedCallback+0x8c0>)
 8002698:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800269c:	601a      	str	r2, [r3, #0]
	}

	__HAL_TIM_SET_COMPARE(&htim15,TIM_CHANNEL_2,pulse_4);
 800269e:	4b32      	ldr	r3, [pc, #200]	; (8002768 <HAL_TIM_PeriodElapsedCallback+0x8c0>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	4b20      	ldr	r3, [pc, #128]	; (8002724 <HAL_TIM_PeriodElapsedCallback+0x87c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	639a      	str	r2, [r3, #56]	; 0x38

}
	// control step 1/timer6
	if (htim->Instance == TIM6) {
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a2f      	ldr	r2, [pc, #188]	; (800276c <HAL_TIM_PeriodElapsedCallback+0x8c4>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d17a      	bne.n	80027a8 <HAL_TIM_PeriodElapsedCallback+0x900>
		ms1++;
 80026b2:	4b2f      	ldr	r3, [pc, #188]	; (8002770 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	3301      	adds	r3, #1
 80026b8:	4a2d      	ldr	r2, [pc, #180]	; (8002770 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 80026ba:	6013      	str	r3, [r2, #0]


		if(step1!=0){
 80026bc:	4b2d      	ldr	r3, [pc, #180]	; (8002774 <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d071      	beq.n	80027a8 <HAL_TIM_PeriodElapsedCallback+0x900>
			if (dir_state1 == 1) HAL_GPIO_WritePin(Step1_DIR_Port, Step1_DIR_Pin, GPIO_PIN_SET);
 80026c4:	4b2c      	ldr	r3, [pc, #176]	; (8002778 <HAL_TIM_PeriodElapsedCallback+0x8d0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d105      	bne.n	80026d8 <HAL_TIM_PeriodElapsedCallback+0x830>
 80026cc:	2201      	movs	r2, #1
 80026ce:	2120      	movs	r1, #32
 80026d0:	4824      	ldr	r0, [pc, #144]	; (8002764 <HAL_TIM_PeriodElapsedCallback+0x8bc>)
 80026d2:	f007 f981 	bl	80099d8 <HAL_GPIO_WritePin>
 80026d6:	e008      	b.n	80026ea <HAL_TIM_PeriodElapsedCallback+0x842>
			else if (dir_state1 == 0) HAL_GPIO_WritePin(Step1_DIR_Port, Step1_DIR_Pin, GPIO_PIN_RESET);
 80026d8:	4b27      	ldr	r3, [pc, #156]	; (8002778 <HAL_TIM_PeriodElapsedCallback+0x8d0>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d104      	bne.n	80026ea <HAL_TIM_PeriodElapsedCallback+0x842>
 80026e0:	2200      	movs	r2, #0
 80026e2:	2120      	movs	r1, #32
 80026e4:	481f      	ldr	r0, [pc, #124]	; (8002764 <HAL_TIM_PeriodElapsedCallback+0x8bc>)
 80026e6:	f007 f977 	bl	80099d8 <HAL_GPIO_WritePin>

			if (step_state1 == 1) {
 80026ea:	4b24      	ldr	r3, [pc, #144]	; (800277c <HAL_TIM_PeriodElapsedCallback+0x8d4>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d148      	bne.n	8002784 <HAL_TIM_PeriodElapsedCallback+0x8dc>
				HAL_GPIO_WritePin(Step1_STEP_Port, Step1_STEP_Pin, GPIO_PIN_SET);
 80026f2:	2201      	movs	r2, #1
 80026f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026f8:	4821      	ldr	r0, [pc, #132]	; (8002780 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 80026fa:	f007 f96d 	bl	80099d8 <HAL_GPIO_WritePin>
				step_state1 = 0;
 80026fe:	4b1f      	ldr	r3, [pc, #124]	; (800277c <HAL_TIM_PeriodElapsedCallback+0x8d4>)
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	e050      	b.n	80027a8 <HAL_TIM_PeriodElapsedCallback+0x900>
 8002706:	bf00      	nop
 8002708:	00000000 	.word	0x00000000
 800270c:	40690000 	.word	0x40690000
 8002710:	00000000 	.word	0x00000000
 8002714:	c0690000 	.word	0xc0690000
 8002718:	240001d8 	.word	0x240001d8
 800271c:	58021000 	.word	0x58021000
 8002720:	24000160 	.word	0x24000160
 8002724:	24000e60 	.word	0x24000e60
 8002728:	24000d00 	.word	0x24000d00
 800272c:	24001154 	.word	0x24001154
 8002730:	24000000 	.word	0x24000000
 8002734:	24000010 	.word	0x24000010
 8002738:	24000008 	.word	0x24000008
 800273c:	24001018 	.word	0x24001018
 8002740:	24000148 	.word	0x24000148
 8002744:	240001c0 	.word	0x240001c0
 8002748:	24000048 	.word	0x24000048
 800274c:	24000180 	.word	0x24000180
 8002750:	24000050 	.word	0x24000050
 8002754:	240001a0 	.word	0x240001a0
 8002758:	40690000 	.word	0x40690000
 800275c:	c0690000 	.word	0xc0690000
 8002760:	240001e0 	.word	0x240001e0
 8002764:	58020800 	.word	0x58020800
 8002768:	24000164 	.word	0x24000164
 800276c:	40001000 	.word	0x40001000
 8002770:	24000200 	.word	0x24000200
 8002774:	2400020c 	.word	0x2400020c
 8002778:	24000058 	.word	0x24000058
 800277c:	2400005c 	.word	0x2400005c
 8002780:	58021400 	.word	0x58021400
			}
			else if (step_state1 == 0) {
 8002784:	4b4d      	ldr	r3, [pc, #308]	; (80028bc <HAL_TIM_PeriodElapsedCallback+0xa14>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10d      	bne.n	80027a8 <HAL_TIM_PeriodElapsedCallback+0x900>
				HAL_GPIO_WritePin(Step1_STEP_Port, Step1_STEP_Pin, GPIO_PIN_RESET);
 800278c:	2200      	movs	r2, #0
 800278e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002792:	484b      	ldr	r0, [pc, #300]	; (80028c0 <HAL_TIM_PeriodElapsedCallback+0xa18>)
 8002794:	f007 f920 	bl	80099d8 <HAL_GPIO_WritePin>
				step_state1 = 1;
 8002798:	4b48      	ldr	r3, [pc, #288]	; (80028bc <HAL_TIM_PeriodElapsedCallback+0xa14>)
 800279a:	2201      	movs	r2, #1
 800279c:	601a      	str	r2, [r3, #0]
				step1--;
 800279e:	4b49      	ldr	r3, [pc, #292]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0xa1c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	4a47      	ldr	r2, [pc, #284]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0xa1c>)
 80027a6:	6013      	str	r3, [r2, #0]
			}
		}
	}

	// control step 2/timer7
	if (htim->Instance == TIM7) {
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a46      	ldr	r2, [pc, #280]	; (80028c8 <HAL_TIM_PeriodElapsedCallback+0xa20>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d13d      	bne.n	800282e <HAL_TIM_PeriodElapsedCallback+0x986>
		ms2++;
 80027b2:	4b46      	ldr	r3, [pc, #280]	; (80028cc <HAL_TIM_PeriodElapsedCallback+0xa24>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	3301      	adds	r3, #1
 80027b8:	4a44      	ldr	r2, [pc, #272]	; (80028cc <HAL_TIM_PeriodElapsedCallback+0xa24>)
 80027ba:	6013      	str	r3, [r2, #0]


		if(step2!=0){
 80027bc:	4b44      	ldr	r3, [pc, #272]	; (80028d0 <HAL_TIM_PeriodElapsedCallback+0xa28>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d034      	beq.n	800282e <HAL_TIM_PeriodElapsedCallback+0x986>
			if (dir_state2 == 1) HAL_GPIO_WritePin(Step2_DIR_Port, Step2_DIR_Pin, GPIO_PIN_SET);
 80027c4:	4b43      	ldr	r3, [pc, #268]	; (80028d4 <HAL_TIM_PeriodElapsedCallback+0xa2c>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d106      	bne.n	80027da <HAL_TIM_PeriodElapsedCallback+0x932>
 80027cc:	2201      	movs	r2, #1
 80027ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027d2:	483b      	ldr	r0, [pc, #236]	; (80028c0 <HAL_TIM_PeriodElapsedCallback+0xa18>)
 80027d4:	f007 f900 	bl	80099d8 <HAL_GPIO_WritePin>
 80027d8:	e009      	b.n	80027ee <HAL_TIM_PeriodElapsedCallback+0x946>
			else if (dir_state2 == 0) HAL_GPIO_WritePin(Step2_DIR_Port, Step2_DIR_Pin, GPIO_PIN_RESET);
 80027da:	4b3e      	ldr	r3, [pc, #248]	; (80028d4 <HAL_TIM_PeriodElapsedCallback+0xa2c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d105      	bne.n	80027ee <HAL_TIM_PeriodElapsedCallback+0x946>
 80027e2:	2200      	movs	r2, #0
 80027e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027e8:	4835      	ldr	r0, [pc, #212]	; (80028c0 <HAL_TIM_PeriodElapsedCallback+0xa18>)
 80027ea:	f007 f8f5 	bl	80099d8 <HAL_GPIO_WritePin>

			if (step_state2 == 1) {
 80027ee:	4b3a      	ldr	r3, [pc, #232]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d109      	bne.n	800280a <HAL_TIM_PeriodElapsedCallback+0x962>
				HAL_GPIO_WritePin(Step2_STEP_Port, Step2_STEP_Pin, GPIO_PIN_SET);
 80027f6:	2201      	movs	r2, #1
 80027f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027fc:	4830      	ldr	r0, [pc, #192]	; (80028c0 <HAL_TIM_PeriodElapsedCallback+0xa18>)
 80027fe:	f007 f8eb 	bl	80099d8 <HAL_GPIO_WritePin>
				step_state2 = 0;
 8002802:	4b35      	ldr	r3, [pc, #212]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	e011      	b.n	800282e <HAL_TIM_PeriodElapsedCallback+0x986>
			}
			else if (step_state2 == 0) {
 800280a:	4b33      	ldr	r3, [pc, #204]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10d      	bne.n	800282e <HAL_TIM_PeriodElapsedCallback+0x986>
				HAL_GPIO_WritePin(Step2_STEP_Port, Step2_STEP_Pin, GPIO_PIN_RESET);
 8002812:	2200      	movs	r2, #0
 8002814:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002818:	4829      	ldr	r0, [pc, #164]	; (80028c0 <HAL_TIM_PeriodElapsedCallback+0xa18>)
 800281a:	f007 f8dd 	bl	80099d8 <HAL_GPIO_WritePin>
				step_state2 = 1;
 800281e:	4b2e      	ldr	r3, [pc, #184]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8002820:	2201      	movs	r2, #1
 8002822:	601a      	str	r2, [r3, #0]
				step2--;
 8002824:	4b2a      	ldr	r3, [pc, #168]	; (80028d0 <HAL_TIM_PeriodElapsedCallback+0xa28>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	3b01      	subs	r3, #1
 800282a:	4a29      	ldr	r2, [pc, #164]	; (80028d0 <HAL_TIM_PeriodElapsedCallback+0xa28>)
 800282c:	6013      	str	r3, [r2, #0]
			}
		}
	}

	// control step 3/timer8
	if (htim->Instance == TIM8) {
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a2a      	ldr	r2, [pc, #168]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0xa34>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d13d      	bne.n	80028b4 <HAL_TIM_PeriodElapsedCallback+0xa0c>
		ms3++;
 8002838:	4b29      	ldr	r3, [pc, #164]	; (80028e0 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	3301      	adds	r3, #1
 800283e:	4a28      	ldr	r2, [pc, #160]	; (80028e0 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8002840:	6013      	str	r3, [r2, #0]

		if(step3!=0){
 8002842:	4b28      	ldr	r3, [pc, #160]	; (80028e4 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d034      	beq.n	80028b4 <HAL_TIM_PeriodElapsedCallback+0xa0c>
			if (dir_state3 == 1) HAL_GPIO_WritePin(Step3_DIR_Port, Step3_DIR_Pin, GPIO_PIN_SET);
 800284a:	4b27      	ldr	r3, [pc, #156]	; (80028e8 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d106      	bne.n	8002860 <HAL_TIM_PeriodElapsedCallback+0x9b8>
 8002852:	2201      	movs	r2, #1
 8002854:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002858:	4819      	ldr	r0, [pc, #100]	; (80028c0 <HAL_TIM_PeriodElapsedCallback+0xa18>)
 800285a:	f007 f8bd 	bl	80099d8 <HAL_GPIO_WritePin>
 800285e:	e009      	b.n	8002874 <HAL_TIM_PeriodElapsedCallback+0x9cc>
			else if (dir_state3 == 0) HAL_GPIO_WritePin(Step3_DIR_Port, Step3_DIR_Pin, GPIO_PIN_RESET);
 8002860:	4b21      	ldr	r3, [pc, #132]	; (80028e8 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d105      	bne.n	8002874 <HAL_TIM_PeriodElapsedCallback+0x9cc>
 8002868:	2200      	movs	r2, #0
 800286a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800286e:	4814      	ldr	r0, [pc, #80]	; (80028c0 <HAL_TIM_PeriodElapsedCallback+0xa18>)
 8002870:	f007 f8b2 	bl	80099d8 <HAL_GPIO_WritePin>

			if (step_state3 == 1) {
 8002874:	4b1d      	ldr	r3, [pc, #116]	; (80028ec <HAL_TIM_PeriodElapsedCallback+0xa44>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d109      	bne.n	8002890 <HAL_TIM_PeriodElapsedCallback+0x9e8>
				HAL_GPIO_WritePin(Step3_STEP_Port, Step3_STEP_Pin, GPIO_PIN_SET);
 800287c:	2201      	movs	r2, #1
 800287e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002882:	481b      	ldr	r0, [pc, #108]	; (80028f0 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8002884:	f007 f8a8 	bl	80099d8 <HAL_GPIO_WritePin>
				step_state3 = 0;
 8002888:	4b18      	ldr	r3, [pc, #96]	; (80028ec <HAL_TIM_PeriodElapsedCallback+0xa44>)
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
				step3--;
			}
		}
	}

}
 800288e:	e011      	b.n	80028b4 <HAL_TIM_PeriodElapsedCallback+0xa0c>
			else if (step_state3 == 0) {
 8002890:	4b16      	ldr	r3, [pc, #88]	; (80028ec <HAL_TIM_PeriodElapsedCallback+0xa44>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10d      	bne.n	80028b4 <HAL_TIM_PeriodElapsedCallback+0xa0c>
				HAL_GPIO_WritePin(Step3_STEP_Port, Step3_STEP_Pin, GPIO_PIN_RESET);
 8002898:	2200      	movs	r2, #0
 800289a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800289e:	4814      	ldr	r0, [pc, #80]	; (80028f0 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 80028a0:	f007 f89a 	bl	80099d8 <HAL_GPIO_WritePin>
				step_state3 = 1;
 80028a4:	4b11      	ldr	r3, [pc, #68]	; (80028ec <HAL_TIM_PeriodElapsedCallback+0xa44>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	601a      	str	r2, [r3, #0]
				step3--;
 80028aa:	4b0e      	ldr	r3, [pc, #56]	; (80028e4 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	4a0c      	ldr	r2, [pc, #48]	; (80028e4 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 80028b2:	6013      	str	r3, [r2, #0]
}
 80028b4:	bf00      	nop
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	2400005c 	.word	0x2400005c
 80028c0:	58021400 	.word	0x58021400
 80028c4:	2400020c 	.word	0x2400020c
 80028c8:	40001400 	.word	0x40001400
 80028cc:	24000204 	.word	0x24000204
 80028d0:	24000210 	.word	0x24000210
 80028d4:	24000060 	.word	0x24000060
 80028d8:	24000064 	.word	0x24000064
 80028dc:	40010400 	.word	0x40010400
 80028e0:	24000208 	.word	0x24000208
 80028e4:	24000214 	.word	0x24000214
 80028e8:	24000068 	.word	0x24000068
 80028ec:	2400006c 	.word	0x2400006c
 80028f0:	58020400 	.word	0x58020400

080028f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028f8:	b672      	cpsid	i
}
 80028fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028fc:	e7fe      	b.n	80028fc <Error_Handler+0x8>

080028fe <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4618      	mov	r0, r3
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	4a04      	ldr	r2, [pc, #16]	; (800293c <_ZN3ros3MsgC1Ev+0x1c>)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4618      	mov	r0, r3
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	08011864 	.word	0x08011864

08002940 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
      data()
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4618      	mov	r0, r3
 800294c:	f7ff ffe8 	bl	8002920 <_ZN3ros3MsgC1Ev>
 8002950:	4a06      	ldr	r2, [pc, #24]	; (800296c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3304      	adds	r3, #4
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff ffcf 	bl	80028fe <_ZN3ros4TimeC1Ev>
    {
    }
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	0801184c 	.word	0x0801184c

08002970 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6859      	ldr	r1, [r3, #4]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	4413      	add	r3, r2
 8002988:	b2ca      	uxtb	r2, r1
 800298a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	0a19      	lsrs	r1, r3, #8
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	3301      	adds	r3, #1
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	4413      	add	r3, r2
 800299a:	b2ca      	uxtb	r2, r1
 800299c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	0c19      	lsrs	r1, r3, #16
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	3302      	adds	r3, #2
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	4413      	add	r3, r2
 80029ac:	b2ca      	uxtb	r2, r1
 80029ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	0e19      	lsrs	r1, r3, #24
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	3303      	adds	r3, #3
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	4413      	add	r3, r2
 80029be:	b2ca      	uxtb	r2, r1
 80029c0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	3304      	adds	r3, #4
 80029c6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6899      	ldr	r1, [r3, #8]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	4413      	add	r3, r2
 80029d2:	b2ca      	uxtb	r2, r1
 80029d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	0a19      	lsrs	r1, r3, #8
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	3301      	adds	r3, #1
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	4413      	add	r3, r2
 80029e4:	b2ca      	uxtb	r2, r1
 80029e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	0c19      	lsrs	r1, r3, #16
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	3302      	adds	r3, #2
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	4413      	add	r3, r2
 80029f6:	b2ca      	uxtb	r2, r1
 80029f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	0e19      	lsrs	r1, r3, #24
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	3303      	adds	r3, #3
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	4413      	add	r3, r2
 8002a08:	b2ca      	uxtb	r2, r1
 8002a0a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	3304      	adds	r3, #4
 8002a10:	60fb      	str	r3, [r7, #12]
      return offset;
 8002a12:	68fb      	ldr	r3, [r7, #12]
    }
 8002a14:	4618      	mov	r0, r3
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	4413      	add	r3, r2
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	461a      	mov	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	3301      	adds	r3, #1
 8002a44:	6839      	ldr	r1, [r7, #0]
 8002a46:	440b      	add	r3, r1
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	021b      	lsls	r3, r3, #8
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	3302      	adds	r3, #2
 8002a5a:	6839      	ldr	r1, [r7, #0]
 8002a5c:	440b      	add	r3, r1
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	041b      	lsls	r3, r3, #16
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	3303      	adds	r3, #3
 8002a70:	6839      	ldr	r1, [r7, #0]
 8002a72:	440b      	add	r3, r1
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	061b      	lsls	r3, r3, #24
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	3304      	adds	r3, #4
 8002a82:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	4413      	add	r3, r2
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	6839      	ldr	r1, [r7, #0]
 8002a9c:	440b      	add	r3, r1
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	021b      	lsls	r3, r3, #8
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	3302      	adds	r3, #2
 8002ab0:	6839      	ldr	r1, [r7, #0]
 8002ab2:	440b      	add	r3, r1
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	041b      	lsls	r3, r3, #16
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	3303      	adds	r3, #3
 8002ac6:	6839      	ldr	r1, [r7, #0]
 8002ac8:	440b      	add	r3, r1
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	061b      	lsls	r3, r3, #24
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	60fb      	str	r3, [r7, #12]
     return offset;
 8002ada:	68fb      	ldr	r3, [r7, #12]
    }
 8002adc:	4618      	mov	r0, r3
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	4b03      	ldr	r3, [pc, #12]	; (8002b00 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	08011578 	.word	0x08011578

08002b04 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	4b03      	ldr	r3, [pc, #12]	; (8002b1c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8002b0e:	4618      	mov	r0, r3
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	08011588 	.word	0x08011588

08002b20 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff fef8 	bl	8002920 <_ZN3ros3MsgC1Ev>
 8002b30:	4a0b      	ldr	r2, [pc, #44]	; (8002b60 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	809a      	strh	r2, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a09      	ldr	r2, [pc, #36]	; (8002b64 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002b40:	609a      	str	r2, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a07      	ldr	r2, [pc, #28]	; (8002b64 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002b46:	60da      	str	r2, [r3, #12]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a06      	ldr	r2, [pc, #24]	; (8002b64 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002b4c:	611a      	str	r2, [r3, #16]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	615a      	str	r2, [r3, #20]
    {
    }
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	08011834 	.word	0x08011834
 8002b64:	080115ac 	.word	0x080115ac

08002b68 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	8899      	ldrh	r1, [r3, #4]
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	4413      	add	r3, r2
 8002b80:	b2ca      	uxtb	r2, r1
 8002b82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	889b      	ldrh	r3, [r3, #4]
 8002b88:	0a1b      	lsrs	r3, r3, #8
 8002b8a:	b299      	uxth	r1, r3
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	4413      	add	r3, r2
 8002b94:	b2ca      	uxtb	r2, r1
 8002b96:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	3302      	adds	r3, #2
 8002b9c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fd fbb4 	bl	8000310 <strlen>
 8002ba8:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	4413      	add	r3, r2
 8002bb0:	69b9      	ldr	r1, [r7, #24]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f002 f8e0 	bl	8004d78 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	3304      	adds	r3, #4
 8002bbc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	18d0      	adds	r0, r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	4619      	mov	r1, r3
 8002bcc:	f00e fb70 	bl	80112b0 <memcpy>
      offset += length_topic_name;
 8002bd0:	69fa      	ldr	r2, [r7, #28]
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7fd fb97 	bl	8000310 <strlen>
 8002be2:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	4413      	add	r3, r2
 8002bea:	6979      	ldr	r1, [r7, #20]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f002 f8c3 	bl	8004d78 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	18d0      	adds	r0, r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	4619      	mov	r1, r3
 8002c06:	f00e fb53 	bl	80112b0 <memcpy>
      offset += length_message_type;
 8002c0a:	69fa      	ldr	r2, [r7, #28]
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	4413      	add	r3, r2
 8002c10:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fd fb7a 	bl	8000310 <strlen>
 8002c1c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	4413      	add	r3, r2
 8002c24:	6939      	ldr	r1, [r7, #16]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f002 f8a6 	bl	8004d78 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	3304      	adds	r3, #4
 8002c30:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	18d0      	adds	r0, r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	4619      	mov	r1, r3
 8002c40:	f00e fb36 	bl	80112b0 <memcpy>
      offset += length_md5sum;
 8002c44:	69fa      	ldr	r2, [r7, #28]
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	4413      	add	r3, r2
 8002c4a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8002c52:	68f9      	ldr	r1, [r7, #12]
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	4413      	add	r3, r2
 8002c5a:	b2ca      	uxtb	r2, r1
 8002c5c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	0a19      	lsrs	r1, r3, #8
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	3301      	adds	r3, #1
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	4413      	add	r3, r2
 8002c6a:	b2ca      	uxtb	r2, r1
 8002c6c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	0c19      	lsrs	r1, r3, #16
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	3302      	adds	r3, #2
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	4413      	add	r3, r2
 8002c7a:	b2ca      	uxtb	r2, r1
 8002c7c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	0e19      	lsrs	r1, r3, #24
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3303      	adds	r3, #3
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	4413      	add	r3, r2
 8002c8a:	b2ca      	uxtb	r2, r1
 8002c8c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	3304      	adds	r3, #4
 8002c92:	61fb      	str	r3, [r7, #28]
      return offset;
 8002c94:	69fb      	ldr	r3, [r7, #28]
    }
 8002c96:	4618      	mov	r0, r3
 8002c98:	3720      	adds	r7, #32
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b08a      	sub	sp, #40	; 0x28
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	889b      	ldrh	r3, [r3, #4]
 8002cbe:	b21a      	sxth	r2, r3
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	6839      	ldr	r1, [r7, #0]
 8002cc6:	440b      	add	r3, r1
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	021b      	lsls	r3, r3, #8
 8002ccc:	b21b      	sxth	r3, r3
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	b21b      	sxth	r3, r3
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	3302      	adds	r3, #2
 8002cdc:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	683a      	ldr	r2, [r7, #0]
 8002ce2:	441a      	add	r2, r3
 8002ce4:	f107 0314 	add.w	r3, r7, #20
 8002ce8:	4611      	mov	r1, r2
 8002cea:	4618      	mov	r0, r3
 8002cec:	f002 f862 	bl	8004db4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	3304      	adds	r3, #4
 8002cf4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	4413      	add	r3, r2
 8002d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d20c      	bcs.n	8002d20 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	441a      	add	r2, r3
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	6839      	ldr	r1, [r7, #0]
 8002d12:	440b      	add	r3, r1
 8002d14:	7812      	ldrb	r2, [r2, #0]
 8002d16:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1e:	e7ec      	b.n	8002cfa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	4413      	add	r3, r2
 8002d26:	3b01      	subs	r3, #1
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	441a      	add	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	4413      	add	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	441a      	add	r2, r3
 8002d4a:	f107 0310 	add.w	r3, r7, #16
 8002d4e:	4611      	mov	r1, r2
 8002d50:	4618      	mov	r0, r3
 8002d52:	f002 f82f 	bl	8004db4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	3304      	adds	r3, #4
 8002d5a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	623b      	str	r3, [r7, #32]
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4413      	add	r3, r2
 8002d66:	6a3a      	ldr	r2, [r7, #32]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d20c      	bcs.n	8002d86 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	6a3b      	ldr	r3, [r7, #32]
 8002d70:	441a      	add	r2, r3
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	3b01      	subs	r3, #1
 8002d76:	6839      	ldr	r1, [r7, #0]
 8002d78:	440b      	add	r3, r1
 8002d7a:	7812      	ldrb	r2, [r2, #0]
 8002d7c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	3301      	adds	r3, #1
 8002d82:	623b      	str	r3, [r7, #32]
 8002d84:	e7ec      	b.n	8002d60 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	4413      	add	r3, r2
 8002d92:	2200      	movs	r2, #0
 8002d94:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	441a      	add	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4413      	add	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	441a      	add	r2, r3
 8002db0:	f107 030c 	add.w	r3, r7, #12
 8002db4:	4611      	mov	r1, r2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f001 fffc 	bl	8004db4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	3304      	adds	r3, #4
 8002dc0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	61fb      	str	r3, [r7, #28]
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4413      	add	r3, r2
 8002dcc:	69fa      	ldr	r2, [r7, #28]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d20c      	bcs.n	8002dec <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	441a      	add	r2, r3
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	6839      	ldr	r1, [r7, #0]
 8002dde:	440b      	add	r3, r1
 8002de0:	7812      	ldrb	r2, [r2, #0]
 8002de2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	3301      	adds	r3, #1
 8002de8:	61fb      	str	r3, [r7, #28]
 8002dea:	e7ec      	b.n	8002dc6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4413      	add	r3, r2
 8002df2:	3b01      	subs	r3, #1
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	4413      	add	r3, r2
 8002df8:	2200      	movs	r2, #0
 8002dfa:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	441a      	add	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002e10:	2300      	movs	r3, #0
 8002e12:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	6839      	ldr	r1, [r7, #0]
 8002e1a:	440a      	add	r2, r1
 8002e1c:	7812      	ldrb	r2, [r2, #0]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	3301      	adds	r3, #1
 8002e28:	6839      	ldr	r1, [r7, #0]
 8002e2a:	440b      	add	r3, r1
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	021b      	lsls	r3, r3, #8
 8002e30:	4313      	orrs	r3, r2
 8002e32:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	3302      	adds	r3, #2
 8002e3a:	6839      	ldr	r1, [r7, #0]
 8002e3c:	440b      	add	r3, r1
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	041b      	lsls	r3, r3, #16
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	3303      	adds	r3, #3
 8002e4c:	6839      	ldr	r1, [r7, #0]
 8002e4e:	440b      	add	r3, r1
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	061b      	lsls	r3, r3, #24
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	3304      	adds	r3, #4
 8002e62:	61bb      	str	r3, [r7, #24]
     return offset;
 8002e64:	69bb      	ldr	r3, [r7, #24]
    }
 8002e66:	4618      	mov	r0, r3
 8002e68:	3728      	adds	r7, #40	; 0x28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	4b03      	ldr	r3, [pc, #12]	; (8002e88 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	080115b0 	.word	0x080115b0

08002e8c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	4b03      	ldr	r3, [pc, #12]	; (8002ea4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002e96:	4618      	mov	r0, r3
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	080115cc 	.word	0x080115cc

08002ea8 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff fd34 	bl	8002920 <_ZN3ros3MsgC1Ev>
 8002eb8:	4a06      	ldr	r2, [pc, #24]	; (8002ed4 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	711a      	strb	r2, [r3, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a04      	ldr	r2, [pc, #16]	; (8002ed8 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002ec8:	609a      	str	r2, [r3, #8]
    {
    }
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	0801181c 	.word	0x0801181c
 8002ed8:	080115ac 	.word	0x080115ac

08002edc <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	4413      	add	r3, r2
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	7912      	ldrb	r2, [r2, #4]
 8002ef4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7fd fa05 	bl	8000310 <strlen>
 8002f06:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	68b9      	ldr	r1, [r7, #8]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f001 ff31 	bl	8004d78 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	3304      	adds	r3, #4
 8002f1a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	18d0      	adds	r0, r2, r3
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	4619      	mov	r1, r3
 8002f2a:	f00e f9c1 	bl	80112b0 <memcpy>
      offset += length_msg;
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	4413      	add	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]
      return offset;
 8002f36:	68fb      	ldr	r3, [r7, #12]
    }
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	4413      	add	r3, r2
 8002f54:	781a      	ldrb	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	441a      	add	r2, r3
 8002f66:	f107 030c 	add.w	r3, r7, #12
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f001 ff21 	bl	8004db4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	3304      	adds	r3, #4
 8002f76:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	4413      	add	r3, r2
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d20c      	bcs.n	8002fa2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	441a      	add	r2, r3
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	3b01      	subs	r3, #1
 8002f92:	6839      	ldr	r1, [r7, #0]
 8002f94:	440b      	add	r3, r1
 8002f96:	7812      	ldrb	r2, [r2, #0]
 8002f98:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	e7ec      	b.n	8002f7c <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	4413      	add	r3, r2
 8002fae:	2200      	movs	r2, #0
 8002fb0:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	441a      	add	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]
     return offset;
 8002fc6:	693b      	ldr	r3, [r7, #16]
    }
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	4b03      	ldr	r3, [pc, #12]	; (8002fe8 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002fda:	4618      	mov	r0, r3
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	080115f0 	.word	0x080115f0

08002fec <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	4b03      	ldr	r3, [pc, #12]	; (8003004 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	08011604 	.word	0x08011604

08003008 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff fc84 	bl	8002920 <_ZN3ros3MsgC1Ev>
 8003018:	4a0c      	ldr	r2, [pc, #48]	; (800304c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	605a      	str	r2, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	60da      	str	r2, [r3, #12]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	611a      	str	r2, [r3, #16]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	619a      	str	r2, [r3, #24]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	61da      	str	r2, [r3, #28]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4618      	mov	r0, r3
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	08011804 	.word	0x08011804

08003050 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003050:	b580      	push	{r7, lr}
 8003052:	b08a      	sub	sp, #40	; 0x28
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800305a:	2300      	movs	r3, #0
 800305c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6859      	ldr	r1, [r3, #4]
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	4413      	add	r3, r2
 8003068:	b2ca      	uxtb	r2, r1
 800306a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	0a19      	lsrs	r1, r3, #8
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	3301      	adds	r3, #1
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	4413      	add	r3, r2
 800307a:	b2ca      	uxtb	r2, r1
 800307c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	0c19      	lsrs	r1, r3, #16
 8003084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003086:	3302      	adds	r3, #2
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	4413      	add	r3, r2
 800308c:	b2ca      	uxtb	r2, r1
 800308e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	0e19      	lsrs	r1, r3, #24
 8003096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003098:	3303      	adds	r3, #3
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	4413      	add	r3, r2
 800309e:	b2ca      	uxtb	r2, r1
 80030a0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	3304      	adds	r3, #4
 80030a6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80030a8:	2300      	movs	r3, #0
 80030aa:	623b      	str	r3, [r7, #32]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	6a3a      	ldr	r2, [r7, #32]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d22b      	bcs.n	800310e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80030c4:	6939      	ldr	r1, [r7, #16]
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	4413      	add	r3, r2
 80030cc:	b2ca      	uxtb	r2, r1
 80030ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	0a19      	lsrs	r1, r3, #8
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	3301      	adds	r3, #1
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	4413      	add	r3, r2
 80030dc:	b2ca      	uxtb	r2, r1
 80030de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	0c19      	lsrs	r1, r3, #16
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	3302      	adds	r3, #2
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	4413      	add	r3, r2
 80030ec:	b2ca      	uxtb	r2, r1
 80030ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	0e19      	lsrs	r1, r3, #24
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	3303      	adds	r3, #3
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	4413      	add	r3, r2
 80030fc:	b2ca      	uxtb	r2, r1
 80030fe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	3304      	adds	r3, #4
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	3301      	adds	r3, #1
 800310a:	623b      	str	r3, [r7, #32]
 800310c:	e7ce      	b.n	80030ac <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6919      	ldr	r1, [r3, #16]
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	4413      	add	r3, r2
 8003118:	b2ca      	uxtb	r2, r1
 800311a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	0a19      	lsrs	r1, r3, #8
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	3301      	adds	r3, #1
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	4413      	add	r3, r2
 800312a:	b2ca      	uxtb	r2, r1
 800312c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	0c19      	lsrs	r1, r3, #16
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	3302      	adds	r3, #2
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	4413      	add	r3, r2
 800313c:	b2ca      	uxtb	r2, r1
 800313e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	0e19      	lsrs	r1, r3, #24
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	3303      	adds	r3, #3
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	4413      	add	r3, r2
 800314e:	b2ca      	uxtb	r2, r1
 8003150:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8003152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003154:	3304      	adds	r3, #4
 8003156:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8003158:	2300      	movs	r3, #0
 800315a:	61fb      	str	r3, [r7, #28]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	69fa      	ldr	r2, [r7, #28]
 8003162:	429a      	cmp	r2, r3
 8003164:	d22b      	bcs.n	80031be <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699a      	ldr	r2, [r3, #24]
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8003174:	68f9      	ldr	r1, [r7, #12]
 8003176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	4413      	add	r3, r2
 800317c:	b2ca      	uxtb	r2, r1
 800317e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	0a19      	lsrs	r1, r3, #8
 8003184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003186:	3301      	adds	r3, #1
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	4413      	add	r3, r2
 800318c:	b2ca      	uxtb	r2, r1
 800318e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	0c19      	lsrs	r1, r3, #16
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	3302      	adds	r3, #2
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	4413      	add	r3, r2
 800319c:	b2ca      	uxtb	r2, r1
 800319e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	0e19      	lsrs	r1, r3, #24
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	3303      	adds	r3, #3
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	4413      	add	r3, r2
 80031ac:	b2ca      	uxtb	r2, r1
 80031ae:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	3304      	adds	r3, #4
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3301      	adds	r3, #1
 80031ba:	61fb      	str	r3, [r7, #28]
 80031bc:	e7ce      	b.n	800315c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69d9      	ldr	r1, [r3, #28]
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	4413      	add	r3, r2
 80031c8:	b2ca      	uxtb	r2, r1
 80031ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	0a19      	lsrs	r1, r3, #8
 80031d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d4:	3301      	adds	r3, #1
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	4413      	add	r3, r2
 80031da:	b2ca      	uxtb	r2, r1
 80031dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	0c19      	lsrs	r1, r3, #16
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	3302      	adds	r3, #2
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	4413      	add	r3, r2
 80031ec:	b2ca      	uxtb	r2, r1
 80031ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	69db      	ldr	r3, [r3, #28]
 80031f4:	0e19      	lsrs	r1, r3, #24
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	3303      	adds	r3, #3
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	4413      	add	r3, r2
 80031fe:	b2ca      	uxtb	r2, r1
 8003200:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	3304      	adds	r3, #4
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8003208:	2300      	movs	r3, #0
 800320a:	61bb      	str	r3, [r7, #24]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	69db      	ldr	r3, [r3, #28]
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	429a      	cmp	r2, r3
 8003214:	d228      	bcs.n	8003268 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7fd f874 	bl	8000310 <strlen>
 8003228:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	4413      	add	r3, r2
 8003230:	6979      	ldr	r1, [r7, #20]
 8003232:	4618      	mov	r0, r3
 8003234:	f001 fda0 	bl	8004d78 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	3304      	adds	r3, #4
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	18d0      	adds	r0, r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	4619      	mov	r1, r3
 8003254:	f00e f82c 	bl	80112b0 <memcpy>
      offset += length_stringsi;
 8003258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	4413      	add	r3, r2
 800325e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	3301      	adds	r3, #1
 8003264:	61bb      	str	r3, [r7, #24]
 8003266:	e7d1      	b.n	800320c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800326a:	4618      	mov	r0, r3
 800326c:	3728      	adds	r7, #40	; 0x28
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003272:	b580      	push	{r7, lr}
 8003274:	b08e      	sub	sp, #56	; 0x38
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800327c:	2300      	movs	r3, #0
 800327e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	4413      	add	r3, r2
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800328a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800328c:	3301      	adds	r3, #1
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	4413      	add	r3, r2
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	021b      	lsls	r3, r3, #8
 8003296:	6a3a      	ldr	r2, [r7, #32]
 8003298:	4313      	orrs	r3, r2
 800329a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800329c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329e:	3302      	adds	r3, #2
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	4413      	add	r3, r2
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	041b      	lsls	r3, r3, #16
 80032a8:	6a3a      	ldr	r2, [r7, #32]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80032ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b0:	3303      	adds	r3, #3
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	4413      	add	r3, r2
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	061b      	lsls	r3, r3, #24
 80032ba:	6a3a      	ldr	r2, [r7, #32]
 80032bc:	4313      	orrs	r3, r2
 80032be:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80032c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c2:	3304      	adds	r3, #4
 80032c4:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	6a3a      	ldr	r2, [r7, #32]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d90a      	bls.n	80032e6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68da      	ldr	r2, [r3, #12]
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4619      	mov	r1, r3
 80032da:	4610      	mov	r0, r2
 80032dc:	f00d fffe 	bl	80112dc <realloc>
 80032e0:	4602      	mov	r2, r0
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a3a      	ldr	r2, [r7, #32]
 80032ea:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80032ec:	2300      	movs	r3, #0
 80032ee:	633b      	str	r3, [r7, #48]	; 0x30
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d236      	bcs.n	8003368 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80032fa:	2300      	movs	r3, #0
 80032fc:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003302:	6839      	ldr	r1, [r7, #0]
 8003304:	440a      	add	r2, r1
 8003306:	7812      	ldrb	r2, [r2, #0]
 8003308:	4313      	orrs	r3, r2
 800330a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003310:	3301      	adds	r3, #1
 8003312:	6839      	ldr	r1, [r7, #0]
 8003314:	440b      	add	r3, r1
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	021b      	lsls	r3, r3, #8
 800331a:	4313      	orrs	r3, r2
 800331c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003322:	3302      	adds	r3, #2
 8003324:	6839      	ldr	r1, [r7, #0]
 8003326:	440b      	add	r3, r1
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	041b      	lsls	r3, r3, #16
 800332c:	4313      	orrs	r3, r2
 800332e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003334:	3303      	adds	r3, #3
 8003336:	6839      	ldr	r1, [r7, #0]
 8003338:	440b      	add	r3, r1
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	061b      	lsls	r3, r3, #24
 800333e:	4313      	orrs	r3, r2
 8003340:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8003348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800334a:	3304      	adds	r3, #4
 800334c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	3208      	adds	r2, #8
 800335c:	6812      	ldr	r2, [r2, #0]
 800335e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8003360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003362:	3301      	adds	r3, #1
 8003364:	633b      	str	r3, [r7, #48]	; 0x30
 8003366:	e7c3      	b.n	80032f0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	4413      	add	r3, r2
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003374:	3301      	adds	r3, #1
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	4413      	add	r3, r2
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	021b      	lsls	r3, r3, #8
 800337e:	69fa      	ldr	r2, [r7, #28]
 8003380:	4313      	orrs	r3, r2
 8003382:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003386:	3302      	adds	r3, #2
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	4413      	add	r3, r2
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	041b      	lsls	r3, r3, #16
 8003390:	69fa      	ldr	r2, [r7, #28]
 8003392:	4313      	orrs	r3, r2
 8003394:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003398:	3303      	adds	r3, #3
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	4413      	add	r3, r2
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	061b      	lsls	r3, r3, #24
 80033a2:	69fa      	ldr	r2, [r7, #28]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80033a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033aa:	3304      	adds	r3, #4
 80033ac:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	69fa      	ldr	r2, [r7, #28]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d90a      	bls.n	80033ce <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699a      	ldr	r2, [r3, #24]
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4619      	mov	r1, r3
 80033c2:	4610      	mov	r0, r2
 80033c4:	f00d ff8a 	bl	80112dc <realloc>
 80033c8:	4602      	mov	r2, r0
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69fa      	ldr	r2, [r7, #28]
 80033d2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80033d4:	2300      	movs	r3, #0
 80033d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033de:	429a      	cmp	r2, r3
 80033e0:	d236      	bcs.n	8003450 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80033e2:	2300      	movs	r3, #0
 80033e4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033ea:	6839      	ldr	r1, [r7, #0]
 80033ec:	440a      	add	r2, r1
 80033ee:	7812      	ldrb	r2, [r2, #0]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f8:	3301      	adds	r3, #1
 80033fa:	6839      	ldr	r1, [r7, #0]
 80033fc:	440b      	add	r3, r1
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	021b      	lsls	r3, r3, #8
 8003402:	4313      	orrs	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800340a:	3302      	adds	r3, #2
 800340c:	6839      	ldr	r1, [r7, #0]
 800340e:	440b      	add	r3, r1
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	041b      	lsls	r3, r3, #16
 8003414:	4313      	orrs	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800341c:	3303      	adds	r3, #3
 800341e:	6839      	ldr	r1, [r7, #0]
 8003420:	440b      	add	r3, r1
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	061b      	lsls	r3, r3, #24
 8003426:	4313      	orrs	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8003430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003432:	3304      	adds	r3, #4
 8003434:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	3214      	adds	r2, #20
 8003444:	6812      	ldr	r2, [r2, #0]
 8003446:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8003448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344a:	3301      	adds	r3, #1
 800344c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800344e:	e7c3      	b.n	80033d8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	4413      	add	r3, r2
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800345a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800345c:	3301      	adds	r3, #1
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	4413      	add	r3, r2
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	021b      	lsls	r3, r3, #8
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4313      	orrs	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800346c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800346e:	3302      	adds	r3, #2
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	4413      	add	r3, r2
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	041b      	lsls	r3, r3, #16
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800347e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003480:	3303      	adds	r3, #3
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	4413      	add	r3, r2
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	061b      	lsls	r3, r3, #24
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	4313      	orrs	r3, r2
 800348e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8003490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003492:	3304      	adds	r3, #4
 8003494:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	429a      	cmp	r2, r3
 800349e:	d90a      	bls.n	80034b6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4619      	mov	r1, r3
 80034aa:	4610      	mov	r0, r2
 80034ac:	f00d ff16 	bl	80112dc <realloc>
 80034b0:	4602      	mov	r2, r0
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80034bc:	2300      	movs	r3, #0
 80034be:	62bb      	str	r3, [r7, #40]	; 0x28
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d23f      	bcs.n	800354a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80034ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	441a      	add	r2, r3
 80034d0:	f107 030c 	add.w	r3, r7, #12
 80034d4:	4611      	mov	r1, r2
 80034d6:	4618      	mov	r0, r3
 80034d8:	f001 fc6c 	bl	8004db4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80034dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034de:	3304      	adds	r3, #4
 80034e0:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80034e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
 80034e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4413      	add	r3, r2
 80034ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d20c      	bcs.n	800350c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	441a      	add	r2, r3
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	3b01      	subs	r3, #1
 80034fc:	6839      	ldr	r1, [r7, #0]
 80034fe:	440b      	add	r3, r1
 8003500:	7812      	ldrb	r2, [r2, #0]
 8003502:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	3301      	adds	r3, #1
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
 800350a:	e7ec      	b.n	80034e6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800350c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	4413      	add	r3, r2
 8003512:	3b01      	subs	r3, #1
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	4413      	add	r3, r2
 8003518:	2200      	movs	r2, #0
 800351a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800351c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800351e:	3b01      	subs	r3, #1
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	441a      	add	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8003528:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	4413      	add	r3, r2
 800352e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	3220      	adds	r2, #32
 800353e:	6812      	ldr	r2, [r2, #0]
 8003540:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8003542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003544:	3301      	adds	r3, #1
 8003546:	62bb      	str	r3, [r7, #40]	; 0x28
 8003548:	e7ba      	b.n	80034c0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 800354a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 800354c:	4618      	mov	r0, r3
 800354e:	3738      	adds	r7, #56	; 0x38
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	4b03      	ldr	r3, [pc, #12]	; (800356c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800355e:	4618      	mov	r0, r3
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	08011728 	.word	0x08011728

08003570 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	4b03      	ldr	r3, [pc, #12]	; (8003588 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 800357a:	4618      	mov	r0, r3
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	08011628 	.word	0x08011628

0800358c <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
  }
 8003598:	4618      	mov	r0, r3
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a42      	ldr	r2, [pc, #264]	; (80036c0 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d068      	beq.n	800368c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a40      	ldr	r2, [pc, #256]	; (80036c4 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d061      	beq.n	800368c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a3d      	ldr	r2, [pc, #244]	; (80036c8 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d05a      	beq.n	800368c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a3b      	ldr	r2, [pc, #236]	; (80036cc <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d053      	beq.n	800368c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a38      	ldr	r2, [pc, #224]	; (80036d0 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d04c      	beq.n	800368c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a36      	ldr	r2, [pc, #216]	; (80036d4 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d045      	beq.n	800368c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a33      	ldr	r2, [pc, #204]	; (80036d8 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d03e      	beq.n	800368c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a31      	ldr	r2, [pc, #196]	; (80036dc <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d037      	beq.n	800368c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a2e      	ldr	r2, [pc, #184]	; (80036e0 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d030      	beq.n	800368c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a2c      	ldr	r2, [pc, #176]	; (80036e4 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d029      	beq.n	800368c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a29      	ldr	r2, [pc, #164]	; (80036e8 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d022      	beq.n	800368c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a27      	ldr	r2, [pc, #156]	; (80036ec <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d01b      	beq.n	800368c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a24      	ldr	r2, [pc, #144]	; (80036f0 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d014      	beq.n	800368c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a22      	ldr	r2, [pc, #136]	; (80036f4 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d00d      	beq.n	800368c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a1f      	ldr	r2, [pc, #124]	; (80036f8 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d006      	beq.n	800368c <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a1d      	ldr	r2, [pc, #116]	; (80036fc <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d109      	bne.n	80036a0 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800369a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800369e:	e008      	b.n	80036b2 <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80036ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036b2:	4618      	mov	r0, r3
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	40020010 	.word	0x40020010
 80036c4:	40020028 	.word	0x40020028
 80036c8:	40020040 	.word	0x40020040
 80036cc:	40020058 	.word	0x40020058
 80036d0:	40020070 	.word	0x40020070
 80036d4:	40020088 	.word	0x40020088
 80036d8:	400200a0 	.word	0x400200a0
 80036dc:	400200b8 	.word	0x400200b8
 80036e0:	40020410 	.word	0x40020410
 80036e4:	40020428 	.word	0x40020428
 80036e8:	40020440 	.word	0x40020440
 80036ec:	40020458 	.word	0x40020458
 80036f0:	40020470 	.word	0x40020470
 80036f4:	40020488 	.word	0x40020488
 80036f8:	400204a0 	.word	0x400204a0
 80036fc:	400204b8 	.word	0x400204b8

08003700 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a0a      	ldr	r2, [pc, #40]	; (8003734 <_ZN13STM32HardwareC1Ev+0x34>)
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4618      	mov	r0, r3
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	24000dc4 	.word	0x24000dc4

08003738 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f804 	bl	800374e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8003746:	bf00      	nop
 8003748:	3708      	adds	r7, #8
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800374e:	b580      	push	{r7, lr}
 8003750:	b082      	sub	sp, #8
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6818      	ldr	r0, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	3304      	adds	r3, #4
 800375e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003762:	4619      	mov	r1, r3
 8003764:	f00a f936 	bl	800d9d4 <HAL_UART_Receive_DMA>
    }
 8003768:	bf00      	nop
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <_ZN13STM32Hardware4readEv>:

    int read(){
 8003770:	b590      	push	{r4, r7, lr}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
      int c = -1;
 8003778:	f04f 33ff 	mov.w	r3, #4294967295
 800377c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7ff ff0d 	bl	80035a4 <_ZN13STM32Hardware10getRdmaIndEv>
 800378a:	4603      	mov	r3, r0
 800378c:	429c      	cmp	r4, r3
 800378e:	bf14      	ite	ne
 8003790:	2301      	movne	r3, #1
 8003792:	2300      	moveq	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d012      	beq.n	80037c0 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80037a0:	1c59      	adds	r1, r3, #1
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	4413      	add	r3, r2
 80037ac:	791b      	ldrb	r3, [r3, #4]
 80037ae:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80037b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 80037c0:	68fb      	ldr	r3, [r7, #12]
    }
 80037c2:	4618      	mov	r0, r3
 80037c4:	3714      	adds	r7, #20
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd90      	pop	{r4, r7, pc}
	...

080037cc <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037dc:	2b20      	cmp	r3, #32
 80037de:	d108      	bne.n	80037f2 <_ZN13STM32Hardware5flushEv+0x26>
 80037e0:	4b27      	ldr	r3, [pc, #156]	; (8003880 <_ZN13STM32Hardware5flushEv+0xb4>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	f083 0301 	eor.w	r3, r3, #1
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <_ZN13STM32Hardware5flushEv+0x26>
 80037ee:	2301      	movs	r3, #1
 80037f0:	e000      	b.n	80037f4 <_ZN13STM32Hardware5flushEv+0x28>
 80037f2:	2300      	movs	r3, #0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d03f      	beq.n	8003878 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 80037f8:	4b21      	ldr	r3, [pc, #132]	; (8003880 <_ZN13STM32Hardware5flushEv+0xb4>)
 80037fa:	2201      	movs	r2, #1
 80037fc:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800380a:	429a      	cmp	r2, r3
 800380c:	d031      	beq.n	8003872 <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800381a:	429a      	cmp	r2, r3
 800381c:	d20a      	bcs.n	8003834 <_ZN13STM32Hardware5flushEv+0x68>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8003824:	b29a      	uxth	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800382c:	b29b      	uxth	r3, r3
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	b29b      	uxth	r3, r3
 8003832:	e006      	b.n	8003842 <_ZN13STM32Hardware5flushEv+0x76>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800383a:	b29b      	uxth	r3, r3
 800383c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003840:	b29b      	uxth	r3, r3
 8003842:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6818      	ldr	r0, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800384e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	4413      	add	r3, r2
 8003856:	89fa      	ldrh	r2, [r7, #14]
 8003858:	4619      	mov	r1, r3
 800385a:	f00a f829 	bl	800d8b0 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8003864:	89fb      	ldrh	r3, [r7, #14]
 8003866:	4413      	add	r3, r2
 8003868:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8003872:	4b03      	ldr	r3, [pc, #12]	; (8003880 <_ZN13STM32Hardware5flushEv+0xb4>)
 8003874:	2200      	movs	r2, #0
 8003876:	701a      	strb	r2, [r3, #0]
      }
    }
 8003878:	bf00      	nop
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	240002c8 	.word	0x240002c8

08003884 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
      int n = length;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800389a:	bfa8      	it	ge
 800389c:	f44f 7300 	movge.w	r3, #512	; 0x200
 80038a0:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80038a8:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	4293      	cmp	r3, r2
 80038b0:	bf28      	it	cs
 80038b2:	4613      	movcs	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80038bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	4413      	add	r3, r2
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	68b9      	ldr	r1, [r7, #8]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f00d fcf1 	bl	80112b0 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	4413      	add	r3, r2
 80038d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d00b      	beq.n	8003902 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	18d1      	adds	r1, r2, r3
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	461a      	mov	r2, r3
 80038fe:	f00d fcd7 	bl	80112b0 <memcpy>
      }

      flush();
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f7ff ff62 	bl	80037cc <_ZN13STM32Hardware5flushEv>
    }
 8003908:	bf00      	nop
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	f002 ff62 	bl	80067e0 <HAL_GetTick>
 800391c:	4603      	mov	r3, r0
 800391e:	4618      	mov	r0, r3
 8003920:	3708      	adds	r7, #8
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4618      	mov	r0, r3
 8003934:	f7fe fff4 	bl	8002920 <_ZN3ros3MsgC1Ev>
 8003938:	4a0e      	ldr	r2, [pc, #56]	; (8003974 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	f04f 0200 	mov.w	r2, #0
 8003944:	f04f 0300 	mov.w	r3, #0
 8003948:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	f04f 0300 	mov.w	r3, #0
 8003956:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	f04f 0300 	mov.w	r3, #0
 8003964:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4618      	mov	r0, r3
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	080117c0 	.word	0x080117c0

08003978 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003978:	b480      	push	{r7}
 800397a:	b08b      	sub	sp, #44	; 0x2c
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003982:	2300      	movs	r3, #0
 8003984:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800398c:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8003990:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003994:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003996:	6838      	ldr	r0, [r7, #0]
 8003998:	4401      	add	r1, r0
 800399a:	b2d3      	uxtb	r3, r2
 800399c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800399e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	0a02      	lsrs	r2, r0, #8
 80039ac:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80039b0:	0a0b      	lsrs	r3, r1, #8
 80039b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039b4:	3101      	adds	r1, #1
 80039b6:	6838      	ldr	r0, [r7, #0]
 80039b8:	4401      	add	r1, r0
 80039ba:	b2d3      	uxtb	r3, r2
 80039bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80039be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	f04f 0300 	mov.w	r3, #0
 80039ca:	0c02      	lsrs	r2, r0, #16
 80039cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80039d0:	0c0b      	lsrs	r3, r1, #16
 80039d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039d4:	3102      	adds	r1, #2
 80039d6:	6838      	ldr	r0, [r7, #0]
 80039d8:	4401      	add	r1, r0
 80039da:	b2d3      	uxtb	r3, r2
 80039dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80039de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	f04f 0300 	mov.w	r3, #0
 80039ea:	0e02      	lsrs	r2, r0, #24
 80039ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80039f0:	0e0b      	lsrs	r3, r1, #24
 80039f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039f4:	3103      	adds	r1, #3
 80039f6:	6838      	ldr	r0, [r7, #0]
 80039f8:	4401      	add	r1, r0
 80039fa:	b2d3      	uxtb	r3, r2
 80039fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80039fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003a02:	f04f 0200 	mov.w	r2, #0
 8003a06:	f04f 0300 	mov.w	r3, #0
 8003a0a:	000a      	movs	r2, r1
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a10:	3104      	adds	r1, #4
 8003a12:	6838      	ldr	r0, [r7, #0]
 8003a14:	4401      	add	r1, r0
 8003a16:	b2d3      	uxtb	r3, r2
 8003a18:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8003a1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003a1e:	f04f 0200 	mov.w	r2, #0
 8003a22:	f04f 0300 	mov.w	r3, #0
 8003a26:	0a0a      	lsrs	r2, r1, #8
 8003a28:	2300      	movs	r3, #0
 8003a2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a2c:	3105      	adds	r1, #5
 8003a2e:	6838      	ldr	r0, [r7, #0]
 8003a30:	4401      	add	r1, r0
 8003a32:	b2d3      	uxtb	r3, r2
 8003a34:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8003a36:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003a3a:	f04f 0200 	mov.w	r2, #0
 8003a3e:	f04f 0300 	mov.w	r3, #0
 8003a42:	0c0a      	lsrs	r2, r1, #16
 8003a44:	2300      	movs	r3, #0
 8003a46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a48:	3106      	adds	r1, #6
 8003a4a:	6838      	ldr	r0, [r7, #0]
 8003a4c:	4401      	add	r1, r0
 8003a4e:	b2d3      	uxtb	r3, r2
 8003a50:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8003a52:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	f04f 0300 	mov.w	r3, #0
 8003a5e:	0e0a      	lsrs	r2, r1, #24
 8003a60:	2300      	movs	r3, #0
 8003a62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a64:	3107      	adds	r1, #7
 8003a66:	6838      	ldr	r0, [r7, #0]
 8003a68:	4401      	add	r1, r0
 8003a6a:	b2d3      	uxtb	r3, r2
 8003a6c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	3308      	adds	r3, #8
 8003a72:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003a7a:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8003a7e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003a82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a84:	6838      	ldr	r0, [r7, #0]
 8003a86:	4401      	add	r1, r0
 8003a88:	b2d3      	uxtb	r3, r2
 8003a8a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8003a8c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	f04f 0300 	mov.w	r3, #0
 8003a98:	0a02      	lsrs	r2, r0, #8
 8003a9a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003a9e:	0a0b      	lsrs	r3, r1, #8
 8003aa0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003aa2:	3101      	adds	r1, #1
 8003aa4:	6838      	ldr	r0, [r7, #0]
 8003aa6:	4401      	add	r1, r0
 8003aa8:	b2d3      	uxtb	r3, r2
 8003aaa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8003aac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003ab0:	f04f 0200 	mov.w	r2, #0
 8003ab4:	f04f 0300 	mov.w	r3, #0
 8003ab8:	0c02      	lsrs	r2, r0, #16
 8003aba:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003abe:	0c0b      	lsrs	r3, r1, #16
 8003ac0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ac2:	3102      	adds	r1, #2
 8003ac4:	6838      	ldr	r0, [r7, #0]
 8003ac6:	4401      	add	r1, r0
 8003ac8:	b2d3      	uxtb	r3, r2
 8003aca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003acc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003ad0:	f04f 0200 	mov.w	r2, #0
 8003ad4:	f04f 0300 	mov.w	r3, #0
 8003ad8:	0e02      	lsrs	r2, r0, #24
 8003ada:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003ade:	0e0b      	lsrs	r3, r1, #24
 8003ae0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ae2:	3103      	adds	r1, #3
 8003ae4:	6838      	ldr	r0, [r7, #0]
 8003ae6:	4401      	add	r1, r0
 8003ae8:	b2d3      	uxtb	r3, r2
 8003aea:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8003aec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003af0:	f04f 0200 	mov.w	r2, #0
 8003af4:	f04f 0300 	mov.w	r3, #0
 8003af8:	000a      	movs	r2, r1
 8003afa:	2300      	movs	r3, #0
 8003afc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003afe:	3104      	adds	r1, #4
 8003b00:	6838      	ldr	r0, [r7, #0]
 8003b02:	4401      	add	r1, r0
 8003b04:	b2d3      	uxtb	r3, r2
 8003b06:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8003b08:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	f04f 0300 	mov.w	r3, #0
 8003b14:	0a0a      	lsrs	r2, r1, #8
 8003b16:	2300      	movs	r3, #0
 8003b18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b1a:	3105      	adds	r1, #5
 8003b1c:	6838      	ldr	r0, [r7, #0]
 8003b1e:	4401      	add	r1, r0
 8003b20:	b2d3      	uxtb	r3, r2
 8003b22:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003b24:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	f04f 0300 	mov.w	r3, #0
 8003b30:	0c0a      	lsrs	r2, r1, #16
 8003b32:	2300      	movs	r3, #0
 8003b34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b36:	3106      	adds	r1, #6
 8003b38:	6838      	ldr	r0, [r7, #0]
 8003b3a:	4401      	add	r1, r0
 8003b3c:	b2d3      	uxtb	r3, r2
 8003b3e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003b40:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003b44:	f04f 0200 	mov.w	r2, #0
 8003b48:	f04f 0300 	mov.w	r3, #0
 8003b4c:	0e0a      	lsrs	r2, r1, #24
 8003b4e:	2300      	movs	r3, #0
 8003b50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b52:	3107      	adds	r1, #7
 8003b54:	6838      	ldr	r0, [r7, #0]
 8003b56:	4401      	add	r1, r0
 8003b58:	b2d3      	uxtb	r3, r2
 8003b5a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	3308      	adds	r3, #8
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003b68:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8003b6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b72:	6838      	ldr	r0, [r7, #0]
 8003b74:	4401      	add	r1, r0
 8003b76:	b2d3      	uxtb	r3, r2
 8003b78:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8003b7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b7e:	f04f 0200 	mov.w	r2, #0
 8003b82:	f04f 0300 	mov.w	r3, #0
 8003b86:	0a02      	lsrs	r2, r0, #8
 8003b88:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003b8c:	0a0b      	lsrs	r3, r1, #8
 8003b8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b90:	3101      	adds	r1, #1
 8003b92:	6838      	ldr	r0, [r7, #0]
 8003b94:	4401      	add	r1, r0
 8003b96:	b2d3      	uxtb	r3, r2
 8003b98:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8003b9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b9e:	f04f 0200 	mov.w	r2, #0
 8003ba2:	f04f 0300 	mov.w	r3, #0
 8003ba6:	0c02      	lsrs	r2, r0, #16
 8003ba8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003bac:	0c0b      	lsrs	r3, r1, #16
 8003bae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bb0:	3102      	adds	r1, #2
 8003bb2:	6838      	ldr	r0, [r7, #0]
 8003bb4:	4401      	add	r1, r0
 8003bb6:	b2d3      	uxtb	r3, r2
 8003bb8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8003bba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	f04f 0300 	mov.w	r3, #0
 8003bc6:	0e02      	lsrs	r2, r0, #24
 8003bc8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003bcc:	0e0b      	lsrs	r3, r1, #24
 8003bce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bd0:	3103      	adds	r1, #3
 8003bd2:	6838      	ldr	r0, [r7, #0]
 8003bd4:	4401      	add	r1, r0
 8003bd6:	b2d3      	uxtb	r3, r2
 8003bd8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8003bda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003bde:	f04f 0200 	mov.w	r2, #0
 8003be2:	f04f 0300 	mov.w	r3, #0
 8003be6:	000a      	movs	r2, r1
 8003be8:	2300      	movs	r3, #0
 8003bea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bec:	3104      	adds	r1, #4
 8003bee:	6838      	ldr	r0, [r7, #0]
 8003bf0:	4401      	add	r1, r0
 8003bf2:	b2d3      	uxtb	r3, r2
 8003bf4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8003bf6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	0a0a      	lsrs	r2, r1, #8
 8003c04:	2300      	movs	r3, #0
 8003c06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c08:	3105      	adds	r1, #5
 8003c0a:	6838      	ldr	r0, [r7, #0]
 8003c0c:	4401      	add	r1, r0
 8003c0e:	b2d3      	uxtb	r3, r2
 8003c10:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8003c12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c16:	f04f 0200 	mov.w	r2, #0
 8003c1a:	f04f 0300 	mov.w	r3, #0
 8003c1e:	0c0a      	lsrs	r2, r1, #16
 8003c20:	2300      	movs	r3, #0
 8003c22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c24:	3106      	adds	r1, #6
 8003c26:	6838      	ldr	r0, [r7, #0]
 8003c28:	4401      	add	r1, r0
 8003c2a:	b2d3      	uxtb	r3, r2
 8003c2c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8003c2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c32:	f04f 0200 	mov.w	r2, #0
 8003c36:	f04f 0300 	mov.w	r3, #0
 8003c3a:	0e0a      	lsrs	r2, r1, #24
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c40:	3107      	adds	r1, #7
 8003c42:	6838      	ldr	r0, [r7, #0]
 8003c44:	4401      	add	r1, r0
 8003c46:	b2d3      	uxtb	r3, r2
 8003c48:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	3308      	adds	r3, #8
 8003c4e:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003c52:	4618      	mov	r0, r3
 8003c54:	372c      	adds	r7, #44	; 0x2c
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003c5e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003c62:	b0bb      	sub	sp, #236	; 0xec
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8003c6a:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
    {
      int offset = 0;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8003c74:	f04f 0200 	mov.w	r2, #0
 8003c78:	f04f 0300 	mov.w	r3, #0
 8003c7c:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003c80:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003c84:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003c88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c8c:	4413      	add	r3, r2
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	ea40 0402 	orr.w	r4, r0, r2
 8003c9a:	ea41 0503 	orr.w	r5, r1, r3
 8003c9e:	e9c7 4536 	strd	r4, r5, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003ca2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003cb0:	4413      	add	r3, r2
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	f04f 0000 	mov.w	r0, #0
 8003cbe:	f04f 0100 	mov.w	r1, #0
 8003cc2:	0219      	lsls	r1, r3, #8
 8003cc4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8003cc8:	0210      	lsls	r0, r2, #8
 8003cca:	ea44 0a00 	orr.w	sl, r4, r0
 8003cce:	ea45 0b01 	orr.w	fp, r5, r1
 8003cd2:	e9c7 ab36 	strd	sl, fp, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003cd6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cde:	1c9a      	adds	r2, r3, #2
 8003ce0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ce4:	4413      	add	r3, r2
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	f04f 0300 	mov.w	r3, #0
 8003cee:	f04f 0000 	mov.w	r0, #0
 8003cf2:	f04f 0100 	mov.w	r1, #0
 8003cf6:	0419      	lsls	r1, r3, #16
 8003cf8:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8003cfc:	0410      	lsls	r0, r2, #16
 8003cfe:	ea44 0300 	orr.w	r3, r4, r0
 8003d02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d06:	ea45 0301 	orr.w	r3, r5, r1
 8003d0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003d0e:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8003d12:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003d16:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d1e:	1cda      	adds	r2, r3, #3
 8003d20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d24:	4413      	add	r3, r2
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	b2da      	uxtb	r2, r3
 8003d2a:	f04f 0300 	mov.w	r3, #0
 8003d2e:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8003d32:	ea4f 6802 	mov.w	r8, r2, lsl #24
 8003d36:	ea40 0308 	orr.w	r3, r0, r8
 8003d3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d3e:	ea41 0309 	orr.w	r3, r1, r9
 8003d42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d46:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8003d4a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003d4e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d56:	1d1a      	adds	r2, r3, #4
 8003d58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d5c:	4413      	add	r3, r2
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	b2da      	uxtb	r2, r3
 8003d62:	f04f 0300 	mov.w	r3, #0
 8003d66:	f04f 0000 	mov.w	r0, #0
 8003d6a:	f04f 0100 	mov.w	r1, #0
 8003d6e:	0011      	movs	r1, r2
 8003d70:	2000      	movs	r0, #0
 8003d72:	ea44 0300 	orr.w	r3, r4, r0
 8003d76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d7a:	ea45 0301 	orr.w	r3, r5, r1
 8003d7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d82:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003d86:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003d8a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d92:	1d5a      	adds	r2, r3, #5
 8003d94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d98:	4413      	add	r3, r2
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	f04f 0300 	mov.w	r3, #0
 8003da2:	f04f 0000 	mov.w	r0, #0
 8003da6:	f04f 0100 	mov.w	r1, #0
 8003daa:	0211      	lsls	r1, r2, #8
 8003dac:	2000      	movs	r0, #0
 8003dae:	ea44 0300 	orr.w	r3, r4, r0
 8003db2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003db6:	ea45 0301 	orr.w	r3, r5, r1
 8003dba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003dbe:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8003dc2:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003dc6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dce:	1d9a      	adds	r2, r3, #6
 8003dd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003dd4:	4413      	add	r3, r2
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	b2da      	uxtb	r2, r3
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	f04f 0000 	mov.w	r0, #0
 8003de2:	f04f 0100 	mov.w	r1, #0
 8003de6:	0411      	lsls	r1, r2, #16
 8003de8:	2000      	movs	r0, #0
 8003dea:	ea44 0300 	orr.w	r3, r4, r0
 8003dee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003df2:	ea45 0301 	orr.w	r3, r5, r1
 8003df6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003dfa:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003dfe:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003e02:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e0a:	1dda      	adds	r2, r3, #7
 8003e0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e10:	4413      	add	r3, r2
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	b2da      	uxtb	r2, r3
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	f04f 0000 	mov.w	r0, #0
 8003e1e:	f04f 0100 	mov.w	r1, #0
 8003e22:	0611      	lsls	r1, r2, #24
 8003e24:	2000      	movs	r0, #0
 8003e26:	ea44 0300 	orr.w	r3, r4, r0
 8003e2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e2e:	ea45 0301 	orr.w	r3, r5, r1
 8003e32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e36:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8003e3a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      this->x = u_x.real;
 8003e3e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003e42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e46:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e4e:	3308      	adds	r3, #8
 8003e50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	f04f 0300 	mov.w	r3, #0
 8003e5c:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003e60:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003e64:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003e68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e6c:	4413      	add	r3, r2
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	f04f 0300 	mov.w	r3, #0
 8003e76:	ea40 0402 	orr.w	r4, r0, r2
 8003e7a:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003e7e:	430b      	orrs	r3, r1
 8003e80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003e84:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003e88:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003e8c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003e9a:	4413      	add	r3, r2
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	f04f 0000 	mov.w	r0, #0
 8003ea8:	f04f 0100 	mov.w	r1, #0
 8003eac:	0219      	lsls	r1, r3, #8
 8003eae:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8003eb2:	0210      	lsls	r0, r2, #8
 8003eb4:	ea44 0300 	orr.w	r3, r4, r0
 8003eb8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ebc:	ea45 0301 	orr.w	r3, r5, r1
 8003ec0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ec4:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8003ec8:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003ecc:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed4:	1c9a      	adds	r2, r3, #2
 8003ed6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003eda:	4413      	add	r3, r2
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	f04f 0300 	mov.w	r3, #0
 8003ee4:	f04f 0000 	mov.w	r0, #0
 8003ee8:	f04f 0100 	mov.w	r1, #0
 8003eec:	0419      	lsls	r1, r3, #16
 8003eee:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8003ef2:	0410      	lsls	r0, r2, #16
 8003ef4:	ea44 0300 	orr.w	r3, r4, r0
 8003ef8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003efa:	ea45 0301 	orr.w	r3, r5, r1
 8003efe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f00:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003f04:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003f08:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8003f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f10:	1cda      	adds	r2, r3, #3
 8003f12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f16:	4413      	add	r3, r2
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	f04f 0300 	mov.w	r3, #0
 8003f20:	0a14      	lsrs	r4, r2, #8
 8003f22:	677c      	str	r4, [r7, #116]	; 0x74
 8003f24:	0613      	lsls	r3, r2, #24
 8003f26:	673b      	str	r3, [r7, #112]	; 0x70
 8003f28:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8003f2c:	4623      	mov	r3, r4
 8003f2e:	4303      	orrs	r3, r0
 8003f30:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f32:	462b      	mov	r3, r5
 8003f34:	430b      	orrs	r3, r1
 8003f36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f38:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003f3c:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003f40:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f48:	1d1a      	adds	r2, r3, #4
 8003f4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f4e:	4413      	add	r3, r2
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	f04f 0000 	mov.w	r0, #0
 8003f5c:	f04f 0100 	mov.w	r1, #0
 8003f60:	0011      	movs	r1, r2
 8003f62:	2000      	movs	r0, #0
 8003f64:	ea44 0300 	orr.w	r3, r4, r0
 8003f68:	663b      	str	r3, [r7, #96]	; 0x60
 8003f6a:	ea45 0301 	orr.w	r3, r5, r1
 8003f6e:	667b      	str	r3, [r7, #100]	; 0x64
 8003f70:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8003f74:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003f78:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f80:	1d5a      	adds	r2, r3, #5
 8003f82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f86:	4413      	add	r3, r2
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	f04f 0300 	mov.w	r3, #0
 8003f90:	f04f 0000 	mov.w	r0, #0
 8003f94:	f04f 0100 	mov.w	r1, #0
 8003f98:	0211      	lsls	r1, r2, #8
 8003f9a:	2000      	movs	r0, #0
 8003f9c:	ea44 0300 	orr.w	r3, r4, r0
 8003fa0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fa2:	ea45 0301 	orr.w	r3, r5, r1
 8003fa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fa8:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003fac:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003fb0:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fb8:	1d9a      	adds	r2, r3, #6
 8003fba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003fbe:	4413      	add	r3, r2
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	f04f 0300 	mov.w	r3, #0
 8003fc8:	f04f 0000 	mov.w	r0, #0
 8003fcc:	f04f 0100 	mov.w	r1, #0
 8003fd0:	0411      	lsls	r1, r2, #16
 8003fd2:	2000      	movs	r0, #0
 8003fd4:	ea44 0300 	orr.w	r3, r4, r0
 8003fd8:	653b      	str	r3, [r7, #80]	; 0x50
 8003fda:	ea45 0301 	orr.w	r3, r5, r1
 8003fde:	657b      	str	r3, [r7, #84]	; 0x54
 8003fe0:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8003fe4:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003fe8:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ff0:	1dda      	adds	r2, r3, #7
 8003ff2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ff6:	4413      	add	r3, r2
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	f04f 0000 	mov.w	r0, #0
 8004004:	f04f 0100 	mov.w	r1, #0
 8004008:	0611      	lsls	r1, r2, #24
 800400a:	2000      	movs	r0, #0
 800400c:	ea44 0300 	orr.w	r3, r4, r0
 8004010:	64bb      	str	r3, [r7, #72]	; 0x48
 8004012:	ea45 0301 	orr.w	r3, r5, r1
 8004016:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004018:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800401c:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      this->y = u_y.real;
 8004020:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004024:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004028:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 800402c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004030:	3308      	adds	r3, #8
 8004032:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8004036:	f04f 0200 	mov.w	r2, #0
 800403a:	f04f 0300 	mov.w	r3, #0
 800403e:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004042:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004046:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800404a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800404e:	4413      	add	r3, r2
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	b2da      	uxtb	r2, r3
 8004054:	f04f 0300 	mov.w	r3, #0
 8004058:	ea40 0402 	orr.w	r4, r0, r2
 800405c:	643c      	str	r4, [r7, #64]	; 0x40
 800405e:	430b      	orrs	r3, r1
 8004060:	647b      	str	r3, [r7, #68]	; 0x44
 8004062:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8004066:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800406a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800406e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004072:	1c5a      	adds	r2, r3, #1
 8004074:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004078:	4413      	add	r3, r2
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	b2da      	uxtb	r2, r3
 800407e:	f04f 0300 	mov.w	r3, #0
 8004082:	f04f 0000 	mov.w	r0, #0
 8004086:	f04f 0100 	mov.w	r1, #0
 800408a:	0219      	lsls	r1, r3, #8
 800408c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004090:	0210      	lsls	r0, r2, #8
 8004092:	ea44 0300 	orr.w	r3, r4, r0
 8004096:	63bb      	str	r3, [r7, #56]	; 0x38
 8004098:	ea45 0301 	orr.w	r3, r5, r1
 800409c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800409e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80040a2:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80040a6:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80040aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ae:	1c9a      	adds	r2, r3, #2
 80040b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040b4:	4413      	add	r3, r2
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	f04f 0300 	mov.w	r3, #0
 80040be:	f04f 0000 	mov.w	r0, #0
 80040c2:	f04f 0100 	mov.w	r1, #0
 80040c6:	0419      	lsls	r1, r3, #16
 80040c8:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80040cc:	0410      	lsls	r0, r2, #16
 80040ce:	ea44 0300 	orr.w	r3, r4, r0
 80040d2:	633b      	str	r3, [r7, #48]	; 0x30
 80040d4:	ea45 0301 	orr.w	r3, r5, r1
 80040d8:	637b      	str	r3, [r7, #52]	; 0x34
 80040da:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80040de:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80040e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80040e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ea:	1cda      	adds	r2, r3, #3
 80040ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040f0:	4413      	add	r3, r2
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	f04f 0300 	mov.w	r3, #0
 80040fa:	0a14      	lsrs	r4, r2, #8
 80040fc:	62fc      	str	r4, [r7, #44]	; 0x2c
 80040fe:	0613      	lsls	r3, r2, #24
 8004100:	62bb      	str	r3, [r7, #40]	; 0x28
 8004102:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8004106:	4623      	mov	r3, r4
 8004108:	4303      	orrs	r3, r0
 800410a:	623b      	str	r3, [r7, #32]
 800410c:	462b      	mov	r3, r5
 800410e:	430b      	orrs	r3, r1
 8004110:	627b      	str	r3, [r7, #36]	; 0x24
 8004112:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004116:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800411a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800411e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004122:	3304      	adds	r3, #4
 8004124:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004128:	4413      	add	r3, r2
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	b2dc      	uxtb	r4, r3
 800412e:	f04f 0500 	mov.w	r5, #0
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	f04f 0300 	mov.w	r3, #0
 800413a:	0023      	movs	r3, r4
 800413c:	2200      	movs	r2, #0
 800413e:	ea40 0402 	orr.w	r4, r0, r2
 8004142:	61bc      	str	r4, [r7, #24]
 8004144:	430b      	orrs	r3, r1
 8004146:	61fb      	str	r3, [r7, #28]
 8004148:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800414c:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004150:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004158:	3305      	adds	r3, #5
 800415a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800415e:	4413      	add	r3, r2
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	b2dc      	uxtb	r4, r3
 8004164:	f04f 0500 	mov.w	r5, #0
 8004168:	f04f 0200 	mov.w	r2, #0
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	0223      	lsls	r3, r4, #8
 8004172:	2200      	movs	r2, #0
 8004174:	ea40 0402 	orr.w	r4, r0, r2
 8004178:	613c      	str	r4, [r7, #16]
 800417a:	430b      	orrs	r3, r1
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004182:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004186:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800418a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800418e:	3306      	adds	r3, #6
 8004190:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004194:	4413      	add	r3, r2
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	b2dc      	uxtb	r4, r3
 800419a:	f04f 0500 	mov.w	r5, #0
 800419e:	f04f 0200 	mov.w	r2, #0
 80041a2:	f04f 0300 	mov.w	r3, #0
 80041a6:	0423      	lsls	r3, r4, #16
 80041a8:	2200      	movs	r2, #0
 80041aa:	ea40 0402 	orr.w	r4, r0, r2
 80041ae:	60bc      	str	r4, [r7, #8]
 80041b0:	430b      	orrs	r3, r1
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80041b8:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80041bc:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80041c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c4:	3307      	adds	r3, #7
 80041c6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80041ca:	4413      	add	r3, r2
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	b2dc      	uxtb	r4, r3
 80041d0:	f04f 0500 	mov.w	r5, #0
 80041d4:	f04f 0200 	mov.w	r2, #0
 80041d8:	f04f 0300 	mov.w	r3, #0
 80041dc:	0623      	lsls	r3, r4, #24
 80041de:	2200      	movs	r2, #0
 80041e0:	ea40 0402 	orr.w	r4, r0, r2
 80041e4:	603c      	str	r4, [r7, #0]
 80041e6:	430b      	orrs	r3, r1
 80041e8:	607b      	str	r3, [r7, #4]
 80041ea:	e9d7 3400 	ldrd	r3, r4, [r7]
 80041ee:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      this->z = u_z.real;
 80041f2:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80041f6:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80041fa:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 80041fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004202:	3308      	adds	r3, #8
 8004204:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
     return offset;
 8004208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    }
 800420c:	4618      	mov	r0, r3
 800420e:	37ec      	adds	r7, #236	; 0xec
 8004210:	46bd      	mov	sp, r7
 8004212:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004216:	4770      	bx	lr

08004218 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	4b03      	ldr	r3, [pc, #12]	; (8004230 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8004222:	4618      	mov	r0, r3
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	0801164c 	.word	0x0801164c

08004234 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	4b03      	ldr	r3, [pc, #12]	; (800424c <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 800423e:	4618      	mov	r0, r3
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	08011664 	.word	0x08011664

08004250 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4618      	mov	r0, r3
 800425c:	f7fe fb60 	bl	8002920 <_ZN3ros3MsgC1Ev>
 8004260:	4a08      	ldr	r2, [pc, #32]	; (8004284 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	3308      	adds	r3, #8
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff fb5c 	bl	8003928 <_ZN13geometry_msgs7Vector3C1Ev>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3328      	adds	r3, #40	; 0x28
 8004274:	4618      	mov	r0, r3
 8004276:	f7ff fb57 	bl	8003928 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4618      	mov	r0, r3
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	080117a8 	.word	0x080117a8

08004288 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004292:	2300      	movs	r3, #0
 8004294:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f103 0008 	add.w	r0, r3, #8
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	4413      	add	r3, r2
 80042a2:	4619      	mov	r1, r3
 80042a4:	f7ff fb68 	bl	8003978 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80042a8:	4602      	mov	r2, r0
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	4413      	add	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	4413      	add	r3, r2
 80042bc:	4619      	mov	r1, r3
 80042be:	f7ff fb5b 	bl	8003978 <_ZNK13geometry_msgs7Vector39serializeEPh>
 80042c2:	4602      	mov	r2, r0
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4413      	add	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]
      return offset;
 80042ca:	68fb      	ldr	r3, [r7, #12]
    }
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80042de:	2300      	movs	r3, #0
 80042e0:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f103 0008 	add.w	r0, r3, #8
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	4413      	add	r3, r2
 80042ee:	4619      	mov	r1, r3
 80042f0:	f7ff fcb5 	bl	8003c5e <_ZN13geometry_msgs7Vector311deserializeEPh>
 80042f4:	4602      	mov	r2, r0
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4413      	add	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	4413      	add	r3, r2
 8004308:	4619      	mov	r1, r3
 800430a:	f7ff fca8 	bl	8003c5e <_ZN13geometry_msgs7Vector311deserializeEPh>
 800430e:	4602      	mov	r2, r0
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4413      	add	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]
     return offset;
 8004316:	68fb      	ldr	r3, [r7, #12]
    }
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	4b03      	ldr	r3, [pc, #12]	; (8004338 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 800432a:	4618      	mov	r0, r3
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	08011688 	.word	0x08011688

0800433c <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	4b03      	ldr	r3, [pc, #12]	; (8004354 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8004346:	4618      	mov	r0, r3
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	0801169c 	.word	0x0801169c

08004358 <_ZN13geometry_msgs5PointC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Point():
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4618      	mov	r0, r3
 8004364:	f7fe fadc 	bl	8002920 <_ZN3ros3MsgC1Ev>
 8004368:	4a0e      	ldr	r2, [pc, #56]	; (80043a4 <_ZN13geometry_msgs5PointC1Ev+0x4c>)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	f04f 0200 	mov.w	r2, #0
 8004374:	f04f 0300 	mov.w	r3, #0
 8004378:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	f04f 0300 	mov.w	r3, #0
 8004386:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	08011790 	.word	0x08011790

080043a8 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80043a8:	b480      	push	{r7}
 80043aa:	b08b      	sub	sp, #44	; 0x2c
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80043b2:	2300      	movs	r3, #0
 80043b4:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80043bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80043c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043c6:	6838      	ldr	r0, [r7, #0]
 80043c8:	4401      	add	r1, r0
 80043ca:	b2d3      	uxtb	r3, r2
 80043cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80043ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	0a02      	lsrs	r2, r0, #8
 80043dc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80043e0:	0a0b      	lsrs	r3, r1, #8
 80043e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043e4:	3101      	adds	r1, #1
 80043e6:	6838      	ldr	r0, [r7, #0]
 80043e8:	4401      	add	r1, r0
 80043ea:	b2d3      	uxtb	r3, r2
 80043ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80043ee:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80043f2:	f04f 0200 	mov.w	r2, #0
 80043f6:	f04f 0300 	mov.w	r3, #0
 80043fa:	0c02      	lsrs	r2, r0, #16
 80043fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004400:	0c0b      	lsrs	r3, r1, #16
 8004402:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004404:	3102      	adds	r1, #2
 8004406:	6838      	ldr	r0, [r7, #0]
 8004408:	4401      	add	r1, r0
 800440a:	b2d3      	uxtb	r3, r2
 800440c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800440e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004412:	f04f 0200 	mov.w	r2, #0
 8004416:	f04f 0300 	mov.w	r3, #0
 800441a:	0e02      	lsrs	r2, r0, #24
 800441c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004420:	0e0b      	lsrs	r3, r1, #24
 8004422:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004424:	3103      	adds	r1, #3
 8004426:	6838      	ldr	r0, [r7, #0]
 8004428:	4401      	add	r1, r0
 800442a:	b2d3      	uxtb	r3, r2
 800442c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800442e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	f04f 0300 	mov.w	r3, #0
 800443a:	000a      	movs	r2, r1
 800443c:	2300      	movs	r3, #0
 800443e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004440:	3104      	adds	r1, #4
 8004442:	6838      	ldr	r0, [r7, #0]
 8004444:	4401      	add	r1, r0
 8004446:	b2d3      	uxtb	r3, r2
 8004448:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800444a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800444e:	f04f 0200 	mov.w	r2, #0
 8004452:	f04f 0300 	mov.w	r3, #0
 8004456:	0a0a      	lsrs	r2, r1, #8
 8004458:	2300      	movs	r3, #0
 800445a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800445c:	3105      	adds	r1, #5
 800445e:	6838      	ldr	r0, [r7, #0]
 8004460:	4401      	add	r1, r0
 8004462:	b2d3      	uxtb	r3, r2
 8004464:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8004466:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800446a:	f04f 0200 	mov.w	r2, #0
 800446e:	f04f 0300 	mov.w	r3, #0
 8004472:	0c0a      	lsrs	r2, r1, #16
 8004474:	2300      	movs	r3, #0
 8004476:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004478:	3106      	adds	r1, #6
 800447a:	6838      	ldr	r0, [r7, #0]
 800447c:	4401      	add	r1, r0
 800447e:	b2d3      	uxtb	r3, r2
 8004480:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8004482:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004486:	f04f 0200 	mov.w	r2, #0
 800448a:	f04f 0300 	mov.w	r3, #0
 800448e:	0e0a      	lsrs	r2, r1, #24
 8004490:	2300      	movs	r3, #0
 8004492:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004494:	3107      	adds	r1, #7
 8004496:	6838      	ldr	r0, [r7, #0]
 8004498:	4401      	add	r1, r0
 800449a:	b2d3      	uxtb	r3, r2
 800449c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	3308      	adds	r3, #8
 80044a2:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80044aa:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80044ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80044b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044b4:	6838      	ldr	r0, [r7, #0]
 80044b6:	4401      	add	r1, r0
 80044b8:	b2d3      	uxtb	r3, r2
 80044ba:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80044bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	f04f 0300 	mov.w	r3, #0
 80044c8:	0a02      	lsrs	r2, r0, #8
 80044ca:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80044ce:	0a0b      	lsrs	r3, r1, #8
 80044d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044d2:	3101      	adds	r1, #1
 80044d4:	6838      	ldr	r0, [r7, #0]
 80044d6:	4401      	add	r1, r0
 80044d8:	b2d3      	uxtb	r3, r2
 80044da:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80044dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80044e0:	f04f 0200 	mov.w	r2, #0
 80044e4:	f04f 0300 	mov.w	r3, #0
 80044e8:	0c02      	lsrs	r2, r0, #16
 80044ea:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80044ee:	0c0b      	lsrs	r3, r1, #16
 80044f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044f2:	3102      	adds	r1, #2
 80044f4:	6838      	ldr	r0, [r7, #0]
 80044f6:	4401      	add	r1, r0
 80044f8:	b2d3      	uxtb	r3, r2
 80044fa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80044fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004500:	f04f 0200 	mov.w	r2, #0
 8004504:	f04f 0300 	mov.w	r3, #0
 8004508:	0e02      	lsrs	r2, r0, #24
 800450a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800450e:	0e0b      	lsrs	r3, r1, #24
 8004510:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004512:	3103      	adds	r1, #3
 8004514:	6838      	ldr	r0, [r7, #0]
 8004516:	4401      	add	r1, r0
 8004518:	b2d3      	uxtb	r3, r2
 800451a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 800451c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004520:	f04f 0200 	mov.w	r2, #0
 8004524:	f04f 0300 	mov.w	r3, #0
 8004528:	000a      	movs	r2, r1
 800452a:	2300      	movs	r3, #0
 800452c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800452e:	3104      	adds	r1, #4
 8004530:	6838      	ldr	r0, [r7, #0]
 8004532:	4401      	add	r1, r0
 8004534:	b2d3      	uxtb	r3, r2
 8004536:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8004538:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800453c:	f04f 0200 	mov.w	r2, #0
 8004540:	f04f 0300 	mov.w	r3, #0
 8004544:	0a0a      	lsrs	r2, r1, #8
 8004546:	2300      	movs	r3, #0
 8004548:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800454a:	3105      	adds	r1, #5
 800454c:	6838      	ldr	r0, [r7, #0]
 800454e:	4401      	add	r1, r0
 8004550:	b2d3      	uxtb	r3, r2
 8004552:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8004554:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004558:	f04f 0200 	mov.w	r2, #0
 800455c:	f04f 0300 	mov.w	r3, #0
 8004560:	0c0a      	lsrs	r2, r1, #16
 8004562:	2300      	movs	r3, #0
 8004564:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004566:	3106      	adds	r1, #6
 8004568:	6838      	ldr	r0, [r7, #0]
 800456a:	4401      	add	r1, r0
 800456c:	b2d3      	uxtb	r3, r2
 800456e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8004570:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004574:	f04f 0200 	mov.w	r2, #0
 8004578:	f04f 0300 	mov.w	r3, #0
 800457c:	0e0a      	lsrs	r2, r1, #24
 800457e:	2300      	movs	r3, #0
 8004580:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004582:	3107      	adds	r1, #7
 8004584:	6838      	ldr	r0, [r7, #0]
 8004586:	4401      	add	r1, r0
 8004588:	b2d3      	uxtb	r3, r2
 800458a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	3308      	adds	r3, #8
 8004590:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004598:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 800459c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045a2:	6838      	ldr	r0, [r7, #0]
 80045a4:	4401      	add	r1, r0
 80045a6:	b2d3      	uxtb	r3, r2
 80045a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80045aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	f04f 0300 	mov.w	r3, #0
 80045b6:	0a02      	lsrs	r2, r0, #8
 80045b8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80045bc:	0a0b      	lsrs	r3, r1, #8
 80045be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045c0:	3101      	adds	r1, #1
 80045c2:	6838      	ldr	r0, [r7, #0]
 80045c4:	4401      	add	r1, r0
 80045c6:	b2d3      	uxtb	r3, r2
 80045c8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80045ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80045ce:	f04f 0200 	mov.w	r2, #0
 80045d2:	f04f 0300 	mov.w	r3, #0
 80045d6:	0c02      	lsrs	r2, r0, #16
 80045d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80045dc:	0c0b      	lsrs	r3, r1, #16
 80045de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045e0:	3102      	adds	r1, #2
 80045e2:	6838      	ldr	r0, [r7, #0]
 80045e4:	4401      	add	r1, r0
 80045e6:	b2d3      	uxtb	r3, r2
 80045e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80045ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80045ee:	f04f 0200 	mov.w	r2, #0
 80045f2:	f04f 0300 	mov.w	r3, #0
 80045f6:	0e02      	lsrs	r2, r0, #24
 80045f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80045fc:	0e0b      	lsrs	r3, r1, #24
 80045fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004600:	3103      	adds	r1, #3
 8004602:	6838      	ldr	r0, [r7, #0]
 8004604:	4401      	add	r1, r0
 8004606:	b2d3      	uxtb	r3, r2
 8004608:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800460a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800460e:	f04f 0200 	mov.w	r2, #0
 8004612:	f04f 0300 	mov.w	r3, #0
 8004616:	000a      	movs	r2, r1
 8004618:	2300      	movs	r3, #0
 800461a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800461c:	3104      	adds	r1, #4
 800461e:	6838      	ldr	r0, [r7, #0]
 8004620:	4401      	add	r1, r0
 8004622:	b2d3      	uxtb	r3, r2
 8004624:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8004626:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	f04f 0300 	mov.w	r3, #0
 8004632:	0a0a      	lsrs	r2, r1, #8
 8004634:	2300      	movs	r3, #0
 8004636:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004638:	3105      	adds	r1, #5
 800463a:	6838      	ldr	r0, [r7, #0]
 800463c:	4401      	add	r1, r0
 800463e:	b2d3      	uxtb	r3, r2
 8004640:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8004642:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004646:	f04f 0200 	mov.w	r2, #0
 800464a:	f04f 0300 	mov.w	r3, #0
 800464e:	0c0a      	lsrs	r2, r1, #16
 8004650:	2300      	movs	r3, #0
 8004652:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004654:	3106      	adds	r1, #6
 8004656:	6838      	ldr	r0, [r7, #0]
 8004658:	4401      	add	r1, r0
 800465a:	b2d3      	uxtb	r3, r2
 800465c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800465e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004662:	f04f 0200 	mov.w	r2, #0
 8004666:	f04f 0300 	mov.w	r3, #0
 800466a:	0e0a      	lsrs	r2, r1, #24
 800466c:	2300      	movs	r3, #0
 800466e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004670:	3107      	adds	r1, #7
 8004672:	6838      	ldr	r0, [r7, #0]
 8004674:	4401      	add	r1, r0
 8004676:	b2d3      	uxtb	r3, r2
 8004678:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	3308      	adds	r3, #8
 800467e:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004682:	4618      	mov	r0, r3
 8004684:	372c      	adds	r7, #44	; 0x2c
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800468e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004692:	b0bb      	sub	sp, #236	; 0xec
 8004694:	af00      	add	r7, sp, #0
 8004696:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800469a:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
    {
      int offset = 0;
 800469e:	2300      	movs	r3, #0
 80046a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80046a4:	f04f 0200 	mov.w	r2, #0
 80046a8:	f04f 0300 	mov.w	r3, #0
 80046ac:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80046b0:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80046b4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80046b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046bc:	4413      	add	r3, r2
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	f04f 0300 	mov.w	r3, #0
 80046c6:	ea40 0402 	orr.w	r4, r0, r2
 80046ca:	ea41 0503 	orr.w	r5, r1, r3
 80046ce:	e9c7 4536 	strd	r4, r5, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80046d2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80046d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046e0:	4413      	add	r3, r2
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	f04f 0300 	mov.w	r3, #0
 80046ea:	f04f 0000 	mov.w	r0, #0
 80046ee:	f04f 0100 	mov.w	r1, #0
 80046f2:	0219      	lsls	r1, r3, #8
 80046f4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80046f8:	0210      	lsls	r0, r2, #8
 80046fa:	ea44 0a00 	orr.w	sl, r4, r0
 80046fe:	ea45 0b01 	orr.w	fp, r5, r1
 8004702:	e9c7 ab36 	strd	sl, fp, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004706:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800470a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800470e:	1c9a      	adds	r2, r3, #2
 8004710:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004714:	4413      	add	r3, r2
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	b2da      	uxtb	r2, r3
 800471a:	f04f 0300 	mov.w	r3, #0
 800471e:	f04f 0000 	mov.w	r0, #0
 8004722:	f04f 0100 	mov.w	r1, #0
 8004726:	0419      	lsls	r1, r3, #16
 8004728:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 800472c:	0410      	lsls	r0, r2, #16
 800472e:	ea44 0300 	orr.w	r3, r4, r0
 8004732:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004736:	ea45 0301 	orr.w	r3, r5, r1
 800473a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800473e:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8004742:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004746:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800474a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800474e:	1cda      	adds	r2, r3, #3
 8004750:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004754:	4413      	add	r3, r2
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	b2da      	uxtb	r2, r3
 800475a:	f04f 0300 	mov.w	r3, #0
 800475e:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8004762:	ea4f 6802 	mov.w	r8, r2, lsl #24
 8004766:	ea40 0308 	orr.w	r3, r0, r8
 800476a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800476e:	ea41 0309 	orr.w	r3, r1, r9
 8004772:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004776:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 800477a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800477e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004786:	1d1a      	adds	r2, r3, #4
 8004788:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800478c:	4413      	add	r3, r2
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	b2da      	uxtb	r2, r3
 8004792:	f04f 0300 	mov.w	r3, #0
 8004796:	f04f 0000 	mov.w	r0, #0
 800479a:	f04f 0100 	mov.w	r1, #0
 800479e:	0011      	movs	r1, r2
 80047a0:	2000      	movs	r0, #0
 80047a2:	ea44 0300 	orr.w	r3, r4, r0
 80047a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80047aa:	ea45 0301 	orr.w	r3, r5, r1
 80047ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80047b2:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80047b6:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80047ba:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80047be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047c2:	1d5a      	adds	r2, r3, #5
 80047c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80047c8:	4413      	add	r3, r2
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	b2da      	uxtb	r2, r3
 80047ce:	f04f 0300 	mov.w	r3, #0
 80047d2:	f04f 0000 	mov.w	r0, #0
 80047d6:	f04f 0100 	mov.w	r1, #0
 80047da:	0211      	lsls	r1, r2, #8
 80047dc:	2000      	movs	r0, #0
 80047de:	ea44 0300 	orr.w	r3, r4, r0
 80047e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80047e6:	ea45 0301 	orr.w	r3, r5, r1
 80047ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80047ee:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 80047f2:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80047f6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80047fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047fe:	1d9a      	adds	r2, r3, #6
 8004800:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004804:	4413      	add	r3, r2
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	b2da      	uxtb	r2, r3
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	f04f 0000 	mov.w	r0, #0
 8004812:	f04f 0100 	mov.w	r1, #0
 8004816:	0411      	lsls	r1, r2, #16
 8004818:	2000      	movs	r0, #0
 800481a:	ea44 0300 	orr.w	r3, r4, r0
 800481e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004822:	ea45 0301 	orr.w	r3, r5, r1
 8004826:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800482a:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800482e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004832:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800483a:	1dda      	adds	r2, r3, #7
 800483c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004840:	4413      	add	r3, r2
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	b2da      	uxtb	r2, r3
 8004846:	f04f 0300 	mov.w	r3, #0
 800484a:	f04f 0000 	mov.w	r0, #0
 800484e:	f04f 0100 	mov.w	r1, #0
 8004852:	0611      	lsls	r1, r2, #24
 8004854:	2000      	movs	r0, #0
 8004856:	ea44 0300 	orr.w	r3, r4, r0
 800485a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800485e:	ea45 0301 	orr.w	r3, r5, r1
 8004862:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004866:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800486a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      this->x = u_x.real;
 800486e:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004872:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004876:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 800487a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800487e:	3308      	adds	r3, #8
 8004880:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8004884:	f04f 0200 	mov.w	r2, #0
 8004888:	f04f 0300 	mov.w	r3, #0
 800488c:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004890:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004894:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004898:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800489c:	4413      	add	r3, r2
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	f04f 0300 	mov.w	r3, #0
 80048a6:	ea40 0402 	orr.w	r4, r0, r2
 80048aa:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80048ae:	430b      	orrs	r3, r1
 80048b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80048b4:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80048b8:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80048bc:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80048c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048c4:	1c5a      	adds	r2, r3, #1
 80048c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048ca:	4413      	add	r3, r2
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	f04f 0300 	mov.w	r3, #0
 80048d4:	f04f 0000 	mov.w	r0, #0
 80048d8:	f04f 0100 	mov.w	r1, #0
 80048dc:	0219      	lsls	r1, r3, #8
 80048de:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80048e2:	0210      	lsls	r0, r2, #8
 80048e4:	ea44 0300 	orr.w	r3, r4, r0
 80048e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048ec:	ea45 0301 	orr.w	r3, r5, r1
 80048f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80048f4:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80048f8:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80048fc:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8004900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004904:	1c9a      	adds	r2, r3, #2
 8004906:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800490a:	4413      	add	r3, r2
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	b2da      	uxtb	r2, r3
 8004910:	f04f 0300 	mov.w	r3, #0
 8004914:	f04f 0000 	mov.w	r0, #0
 8004918:	f04f 0100 	mov.w	r1, #0
 800491c:	0419      	lsls	r1, r3, #16
 800491e:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8004922:	0410      	lsls	r0, r2, #16
 8004924:	ea44 0300 	orr.w	r3, r4, r0
 8004928:	67bb      	str	r3, [r7, #120]	; 0x78
 800492a:	ea45 0301 	orr.w	r3, r5, r1
 800492e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004930:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8004934:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004938:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800493c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004940:	1cda      	adds	r2, r3, #3
 8004942:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004946:	4413      	add	r3, r2
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	b2da      	uxtb	r2, r3
 800494c:	f04f 0300 	mov.w	r3, #0
 8004950:	0a14      	lsrs	r4, r2, #8
 8004952:	677c      	str	r4, [r7, #116]	; 0x74
 8004954:	0613      	lsls	r3, r2, #24
 8004956:	673b      	str	r3, [r7, #112]	; 0x70
 8004958:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800495c:	4623      	mov	r3, r4
 800495e:	4303      	orrs	r3, r0
 8004960:	66bb      	str	r3, [r7, #104]	; 0x68
 8004962:	462b      	mov	r3, r5
 8004964:	430b      	orrs	r3, r1
 8004966:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004968:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800496c:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004970:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8004974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004978:	1d1a      	adds	r2, r3, #4
 800497a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800497e:	4413      	add	r3, r2
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	b2da      	uxtb	r2, r3
 8004984:	f04f 0300 	mov.w	r3, #0
 8004988:	f04f 0000 	mov.w	r0, #0
 800498c:	f04f 0100 	mov.w	r1, #0
 8004990:	0011      	movs	r1, r2
 8004992:	2000      	movs	r0, #0
 8004994:	ea44 0300 	orr.w	r3, r4, r0
 8004998:	663b      	str	r3, [r7, #96]	; 0x60
 800499a:	ea45 0301 	orr.w	r3, r5, r1
 800499e:	667b      	str	r3, [r7, #100]	; 0x64
 80049a0:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80049a4:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80049a8:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80049ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049b0:	1d5a      	adds	r2, r3, #5
 80049b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049b6:	4413      	add	r3, r2
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	b2da      	uxtb	r2, r3
 80049bc:	f04f 0300 	mov.w	r3, #0
 80049c0:	f04f 0000 	mov.w	r0, #0
 80049c4:	f04f 0100 	mov.w	r1, #0
 80049c8:	0211      	lsls	r1, r2, #8
 80049ca:	2000      	movs	r0, #0
 80049cc:	ea44 0300 	orr.w	r3, r4, r0
 80049d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80049d2:	ea45 0301 	orr.w	r3, r5, r1
 80049d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049d8:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80049dc:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80049e0:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80049e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e8:	1d9a      	adds	r2, r3, #6
 80049ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80049ee:	4413      	add	r3, r2
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	b2da      	uxtb	r2, r3
 80049f4:	f04f 0300 	mov.w	r3, #0
 80049f8:	f04f 0000 	mov.w	r0, #0
 80049fc:	f04f 0100 	mov.w	r1, #0
 8004a00:	0411      	lsls	r1, r2, #16
 8004a02:	2000      	movs	r0, #0
 8004a04:	ea44 0300 	orr.w	r3, r4, r0
 8004a08:	653b      	str	r3, [r7, #80]	; 0x50
 8004a0a:	ea45 0301 	orr.w	r3, r5, r1
 8004a0e:	657b      	str	r3, [r7, #84]	; 0x54
 8004a10:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8004a14:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004a18:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8004a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a20:	1dda      	adds	r2, r3, #7
 8004a22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a26:	4413      	add	r3, r2
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	f04f 0300 	mov.w	r3, #0
 8004a30:	f04f 0000 	mov.w	r0, #0
 8004a34:	f04f 0100 	mov.w	r1, #0
 8004a38:	0611      	lsls	r1, r2, #24
 8004a3a:	2000      	movs	r0, #0
 8004a3c:	ea44 0300 	orr.w	r3, r4, r0
 8004a40:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a42:	ea45 0301 	orr.w	r3, r5, r1
 8004a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a48:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8004a4c:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      this->y = u_y.real;
 8004a50:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004a54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a58:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8004a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a60:	3308      	adds	r3, #8
 8004a62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8004a66:	f04f 0200 	mov.w	r2, #0
 8004a6a:	f04f 0300 	mov.w	r3, #0
 8004a6e:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004a72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004a76:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004a7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a7e:	4413      	add	r3, r2
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	f04f 0300 	mov.w	r3, #0
 8004a88:	ea40 0402 	orr.w	r4, r0, r2
 8004a8c:	643c      	str	r4, [r7, #64]	; 0x40
 8004a8e:	430b      	orrs	r3, r1
 8004a90:	647b      	str	r3, [r7, #68]	; 0x44
 8004a92:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8004a96:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004a9a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8004a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa2:	1c5a      	adds	r2, r3, #1
 8004aa4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004aa8:	4413      	add	r3, r2
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	f04f 0300 	mov.w	r3, #0
 8004ab2:	f04f 0000 	mov.w	r0, #0
 8004ab6:	f04f 0100 	mov.w	r1, #0
 8004aba:	0219      	lsls	r1, r3, #8
 8004abc:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004ac0:	0210      	lsls	r0, r2, #8
 8004ac2:	ea44 0300 	orr.w	r3, r4, r0
 8004ac6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ac8:	ea45 0301 	orr.w	r3, r5, r1
 8004acc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ace:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8004ad2:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004ad6:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8004ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ade:	1c9a      	adds	r2, r3, #2
 8004ae0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ae4:	4413      	add	r3, r2
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	f04f 0300 	mov.w	r3, #0
 8004aee:	f04f 0000 	mov.w	r0, #0
 8004af2:	f04f 0100 	mov.w	r1, #0
 8004af6:	0419      	lsls	r1, r3, #16
 8004af8:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8004afc:	0410      	lsls	r0, r2, #16
 8004afe:	ea44 0300 	orr.w	r3, r4, r0
 8004b02:	633b      	str	r3, [r7, #48]	; 0x30
 8004b04:	ea45 0301 	orr.w	r3, r5, r1
 8004b08:	637b      	str	r3, [r7, #52]	; 0x34
 8004b0a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004b0e:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004b12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b1a:	1cda      	adds	r2, r3, #3
 8004b1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b20:	4413      	add	r3, r2
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	f04f 0300 	mov.w	r3, #0
 8004b2a:	0a14      	lsrs	r4, r2, #8
 8004b2c:	62fc      	str	r4, [r7, #44]	; 0x2c
 8004b2e:	0613      	lsls	r3, r2, #24
 8004b30:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b32:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8004b36:	4623      	mov	r3, r4
 8004b38:	4303      	orrs	r3, r0
 8004b3a:	623b      	str	r3, [r7, #32]
 8004b3c:	462b      	mov	r3, r5
 8004b3e:	430b      	orrs	r3, r1
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24
 8004b42:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004b46:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004b4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b52:	3304      	adds	r3, #4
 8004b54:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004b58:	4413      	add	r3, r2
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	b2dc      	uxtb	r4, r3
 8004b5e:	f04f 0500 	mov.w	r5, #0
 8004b62:	f04f 0200 	mov.w	r2, #0
 8004b66:	f04f 0300 	mov.w	r3, #0
 8004b6a:	0023      	movs	r3, r4
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	ea40 0402 	orr.w	r4, r0, r2
 8004b72:	61bc      	str	r4, [r7, #24]
 8004b74:	430b      	orrs	r3, r1
 8004b76:	61fb      	str	r3, [r7, #28]
 8004b78:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8004b7c:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004b80:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b88:	3305      	adds	r3, #5
 8004b8a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004b8e:	4413      	add	r3, r2
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	b2dc      	uxtb	r4, r3
 8004b94:	f04f 0500 	mov.w	r5, #0
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	0223      	lsls	r3, r4, #8
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	ea40 0402 	orr.w	r4, r0, r2
 8004ba8:	613c      	str	r4, [r7, #16]
 8004baa:	430b      	orrs	r3, r1
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004bb2:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004bb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bbe:	3306      	adds	r3, #6
 8004bc0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004bc4:	4413      	add	r3, r2
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	b2dc      	uxtb	r4, r3
 8004bca:	f04f 0500 	mov.w	r5, #0
 8004bce:	f04f 0200 	mov.w	r2, #0
 8004bd2:	f04f 0300 	mov.w	r3, #0
 8004bd6:	0423      	lsls	r3, r4, #16
 8004bd8:	2200      	movs	r2, #0
 8004bda:	ea40 0402 	orr.w	r4, r0, r2
 8004bde:	60bc      	str	r4, [r7, #8]
 8004be0:	430b      	orrs	r3, r1
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004be8:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004bec:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bf4:	3307      	adds	r3, #7
 8004bf6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004bfa:	4413      	add	r3, r2
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	b2dc      	uxtb	r4, r3
 8004c00:	f04f 0500 	mov.w	r5, #0
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	f04f 0300 	mov.w	r3, #0
 8004c0c:	0623      	lsls	r3, r4, #24
 8004c0e:	2200      	movs	r2, #0
 8004c10:	ea40 0402 	orr.w	r4, r0, r2
 8004c14:	603c      	str	r4, [r7, #0]
 8004c16:	430b      	orrs	r3, r1
 8004c18:	607b      	str	r3, [r7, #4]
 8004c1a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004c1e:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      this->z = u_z.real;
 8004c22:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8004c26:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8004c2a:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8004c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c32:	3308      	adds	r3, #8
 8004c34:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
     return offset;
 8004c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    }
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	37ec      	adds	r7, #236	; 0xec
 8004c40:	46bd      	mov	sp, r7
 8004c42:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004c46:	4770      	bx	lr

08004c48 <_ZN13geometry_msgs5Point7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Point"; };
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	4b03      	ldr	r3, [pc, #12]	; (8004c60 <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 8004c52:	4618      	mov	r0, r3
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	080116c0 	.word	0x080116c0

08004c64 <_ZN13geometry_msgs5Point6getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	4b03      	ldr	r3, [pc, #12]	; (8004c7c <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 8004c6e:	4618      	mov	r0, r3
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	08011664 	.word	0x08011664

08004c80 <_Z12vel_callbackRKN13geometry_msgs5TwistE>:
#include "geometry_msgs/Twist.h"
#include "geometry_msgs/Point.h"
#include "std_msgs/Float64MultiArray.h"

void vel_callback(const geometry_msgs::Twist &msg)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]

   vel[0] = msg.linear.x;  //double vel[3]宣告在mainpp.h
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004c8e:	490a      	ldr	r1, [pc, #40]	; (8004cb8 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x38>)
 8004c90:	e9c1 2300 	strd	r2, r3, [r1]
   vel[1] = msg.linear.y;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004c9a:	4907      	ldr	r1, [pc, #28]	; (8004cb8 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x38>)
 8004c9c:	e9c1 2302 	strd	r2, r3, [r1, #8]
   vel[2] = msg.angular.z;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8004ca6:	4904      	ldr	r1, [pc, #16]	; (8004cb8 <_Z12vel_callbackRKN13geometry_msgs5TwistE+0x38>)
 8004ca8:	e9c1 2304 	strd	r2, r3, [r1, #16]


}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	24000298 	.word	0x24000298

08004cbc <_Z14point_callbackRKN13geometry_msgs5PointE>:

void point_callback(const geometry_msgs::Point &msg_1)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
	x = msg_1.x;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004cca:	4907      	ldr	r1, [pc, #28]	; (8004ce8 <_Z14point_callbackRKN13geometry_msgs5PointE+0x2c>)
 8004ccc:	e9c1 2300 	strd	r2, r3, [r1]
	y = msg_1.y;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004cd6:	4905      	ldr	r1, [pc, #20]	; (8004cec <_Z14point_callbackRKN13geometry_msgs5PointE+0x30>)
 8004cd8:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	240002b8 	.word	0x240002b8
 8004cec:	240002c0 	.word	0x240002c0

08004cf0 <HAL_UART_TxCpltCallback>:
ros::NodeHandle nh;
ros::Subscriber<geometry_msgs::Twist> sub("wheel_vel", vel_callback);
ros::Subscriber<geometry_msgs::Point> sub1("Destination", point_callback);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8004cf8:	4805      	ldr	r0, [pc, #20]	; (8004d10 <HAL_UART_TxCpltCallback+0x20>)
 8004cfa:	f000 f969 	bl	8004fd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7fe fd63 	bl	80037cc <_ZN13STM32Hardware5flushEv>
}
 8004d06:	bf00      	nop
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	240002cc 	.word	0x240002cc

08004d14 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8004d1c:	4805      	ldr	r0, [pc, #20]	; (8004d34 <HAL_UART_RxCpltCallback+0x20>)
 8004d1e:	f000 f957 	bl	8004fd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8004d22:	4603      	mov	r3, r0
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fe fd12 	bl	800374e <_ZN13STM32Hardware10reset_rbufEv>
}
 8004d2a:	bf00      	nop
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	240002cc 	.word	0x240002cc

08004d38 <setup>:
void setup(void)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	af00      	add	r7, sp, #0
    nh.initNode();
 8004d3c:	4806      	ldr	r0, [pc, #24]	; (8004d58 <setup+0x20>)
 8004d3e:	f000 f953 	bl	8004fe8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
    nh.subscribe(sub);
 8004d42:	4906      	ldr	r1, [pc, #24]	; (8004d5c <setup+0x24>)
 8004d44:	4804      	ldr	r0, [pc, #16]	; (8004d58 <setup+0x20>)
 8004d46:	f000 f96c 	bl	8005022 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.subscribe(sub1);
 8004d4a:	4905      	ldr	r1, [pc, #20]	; (8004d60 <setup+0x28>)
 8004d4c:	4802      	ldr	r0, [pc, #8]	; (8004d58 <setup+0x20>)
 8004d4e:	f000 f993 	bl	8005078 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>
}
 8004d52:	bf00      	nop
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	240002cc 	.word	0x240002cc
 8004d5c:	24000c08 	.word	0x24000c08
 8004d60:	24000c68 	.word	0x24000c68

08004d64 <loop>:
void loop(void)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	af00      	add	r7, sp, #0
    nh.spinOnce();
 8004d68:	4802      	ldr	r0, [pc, #8]	; (8004d74 <loop+0x10>)
 8004d6a:	f000 f9b0 	bl	80050ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8004d6e:	bf00      	nop
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	240002cc 	.word	0x240002cc

08004d78 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8004d82:	2300      	movs	r3, #0
 8004d84:	60fb      	str	r3, [r7, #12]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	d80d      	bhi.n	8004da8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	fa22 f103 	lsr.w	r1, r2, r3
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	b2ca      	uxtb	r2, r1
 8004d9e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	3301      	adds	r3, #1
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	e7ee      	b.n	8004d86 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8004da8:	bf00      	nop
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	d811      	bhi.n	8004df2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	6839      	ldr	r1, [r7, #0]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	440a      	add	r2, r1
 8004dd8:	7812      	ldrb	r2, [r2, #0]
 8004dda:	4611      	mov	r1, r2
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	00d2      	lsls	r2, r2, #3
 8004de0:	fa01 f202 	lsl.w	r2, r1, r2
 8004de4:	431a      	orrs	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	3301      	adds	r3, #1
 8004dee:	60fb      	str	r3, [r7, #12]
 8004df0:	e7ea      	b.n	8004dc8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8004df2:	bf00      	nop
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
	...

08004e00 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	4a04      	ldr	r2, [pc, #16]	; (8004e1c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4618      	mov	r0, r3
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	080117f0 	.word	0x080117f0

08004e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7ff ffe8 	bl	8004e00 <_ZN3ros15NodeHandleBase_C1Ev>
 8004e30:	4a3a      	ldr	r2, [pc, #232]	; (8004f1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	601a      	str	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	3304      	adds	r3, #4
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fe fc60 	bl	8003700 <_ZN13STM32HardwareC1Ev>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7fe f8da 	bl	8003008 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004e54:	2300      	movs	r3, #0
 8004e56:	617b      	str	r3, [r7, #20]
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	2b18      	cmp	r3, #24
 8004e5c:	d80b      	bhi.n	8004e76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	3301      	adds	r3, #1
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	e7f0      	b.n	8004e58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004e76:	2300      	movs	r3, #0
 8004e78:	613b      	str	r3, [r7, #16]
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	2b18      	cmp	r3, #24
 8004e7e:	d80a      	bhi.n	8004e96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004e88:	2100      	movs	r1, #0
 8004e8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	3301      	adds	r3, #1
 8004e92:	613b      	str	r3, [r7, #16]
 8004e94:	e7f1      	b.n	8004e7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004e96:	2300      	movs	r3, #0
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ea0:	d20a      	bcs.n	8004eb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004eac:	2200      	movs	r2, #0
 8004eae:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	e7f0      	b.n	8004e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60bb      	str	r3, [r7, #8]
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ec2:	d20a      	bcs.n	8004eda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8004ece:	2200      	movs	r2, #0
 8004ed0:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	60bb      	str	r3, [r7, #8]
 8004ed8:	e7f0      	b.n	8004ebc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4618      	mov	r0, r3
 8004f16:	3718      	adds	r7, #24
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	0801177c 	.word	0x0801177c

08004f20 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	4a04      	ldr	r2, [pc, #16]	; (8004f3c <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4618      	mov	r0, r3
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr
 8004f3c:	080117d8 	.word	0x080117d8

08004f40 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7ff ffe5 	bl	8004f20 <_ZN3ros11Subscriber_C1Ev>
 8004f56:	4a0b      	ldr	r2, [pc, #44]	; (8004f84 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	601a      	str	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	3310      	adds	r3, #16
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7ff f975 	bl	8004250 <_ZN13geometry_msgs5TwistC1Ev>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	659a      	str	r2, [r3, #88]	; 0x58
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	609a      	str	r2, [r3, #8]
  };
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	08011764 	.word	0x08011764

08004f88 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
 8004f94:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff ffc1 	bl	8004f20 <_ZN3ros11Subscriber_C1Ev>
 8004f9e:	4a0b      	ldr	r2, [pc, #44]	; (8004fcc <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei+0x44>)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	3310      	adds	r3, #16
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7ff f9d5 	bl	8004358 <_ZN13geometry_msgs5PointC1Ev>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	631a      	str	r2, [r3, #48]	; 0x30
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	683a      	ldr	r2, [r7, #0]
 8004fb8:	635a      	str	r2, [r3, #52]	; 0x34
    topic_ = topic_name;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	609a      	str	r2, [r3, #8]
  };
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	0801174c 	.word	0x0801174c

08004fd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	3304      	adds	r3, #4
  }
 8004fdc:	4618      	mov	r0, r3
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7fe fb9f 	bl	8003738 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 800501a:	bf00      	nop
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8005022:	b480      	push	{r7}
 8005024:	b085      	sub	sp, #20
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800502c:	2300      	movs	r3, #0
 800502e:	60fb      	str	r3, [r7, #12]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2b18      	cmp	r3, #24
 8005034:	dc19      	bgt.n	800506a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800503e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10d      	bne.n	8005062 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8005046:	6839      	ldr	r1, [r7, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	605a      	str	r2, [r3, #4]
        return true;
 800505e:	2301      	movs	r3, #1
 8005060:	e004      	b.n	800506c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	3301      	adds	r3, #1
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	e7e2      	b.n	8005030 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 800506a:	2300      	movs	r3, #0
  }
 800506c:	4618      	mov	r0, r3
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8005082:	2300      	movs	r3, #0
 8005084:	60fb      	str	r3, [r7, #12]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2b18      	cmp	r3, #24
 800508a:	dc19      	bgt.n	80050c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x48>
      if (subscribers[i] == 0) // empty slot
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10d      	bne.n	80050b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x40>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800509c:	6839      	ldr	r1, [r7, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80050a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	605a      	str	r2, [r3, #4]
        return true;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e004      	b.n	80050c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	3301      	adds	r3, #1
 80050bc:	60fb      	str	r3, [r7, #12]
 80050be:	e7e2      	b.n	8005086 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5PointEvEEEEbRT_+0xe>
    return false;
 80050c0:	2300      	movs	r3, #0
  }
 80050c2:	4618      	mov	r0, r3
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr

080050ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b084      	sub	sp, #16
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3304      	adds	r3, #4
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fe fc18 	bl	8003910 <_ZN13STM32Hardware4timeEv>
 80050e0:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d903      	bls.n	80050fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005102:	2b00      	cmp	r3, #0
 8005104:	d009      	beq.n	800511a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	429a      	cmp	r2, r3
 8005110:	d903      	bls.n	800511a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8005120:	2b00      	cmp	r3, #0
 8005122:	d014      	beq.n	800514e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3304      	adds	r3, #4
 8005128:	4618      	mov	r0, r3
 800512a:	f7fe fbf1 	bl	8003910 <_ZN13STM32Hardware4timeEv>
 800512e:	4602      	mov	r2, r0
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	1ad2      	subs	r2, r2, r3
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800513a:	429a      	cmp	r2, r3
 800513c:	bf8c      	ite	hi
 800513e:	2301      	movhi	r3, #1
 8005140:	2300      	movls	r3, #0
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8005148:	f06f 0301 	mvn.w	r3, #1
 800514c:	e194      	b.n	8005478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	3304      	adds	r3, #4
 8005152:	4618      	mov	r0, r3
 8005154:	f7fe fb0c 	bl	8003770 <_ZN13STM32Hardware4readEv>
 8005158:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	f2c0 8174 	blt.w	800544a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	441a      	add	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005178:	2b07      	cmp	r3, #7
 800517a:	d11e      	bne.n	80051ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8005182:	1c59      	adds	r1, r3, #1
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	b2d1      	uxtb	r1, r2
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	4413      	add	r3, r2
 8005192:	460a      	mov	r2, r1
 8005194:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800519e:	1e5a      	subs	r2, r3, #1
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1b4      	bne.n	800511a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2208      	movs	r2, #8
 80051b4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80051b8:	e7af      	b.n	800511a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d128      	bne.n	8005216 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2bff      	cmp	r3, #255	; 0xff
 80051c8:	d10d      	bne.n	80051e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80051d0:	1c5a      	adds	r2, r3, #1
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f103 0214 	add.w	r2, r3, #20
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80051e4:	e799      	b.n	800511a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	3304      	adds	r3, #4
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fe fb90 	bl	8003910 <_ZN13STM32Hardware4timeEv>
 80051f0:	4602      	mov	r2, r0
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051fa:	4293      	cmp	r3, r2
 80051fc:	bf8c      	ite	hi
 80051fe:	2301      	movhi	r3, #1
 8005200:	2300      	movls	r3, #0
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	d088      	beq.n	800511a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8005210:	f06f 0301 	mvn.w	r3, #1
 8005214:	e130      	b.n	8005478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800521c:	2b01      	cmp	r3, #1
 800521e:	d118      	bne.n	8005252 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	2bfe      	cmp	r3, #254	; 0xfe
 8005224:	d107      	bne.n	8005236 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800522c:	1c5a      	adds	r2, r3, #1
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8005234:	e771      	b.n	800511a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8005244:	2b00      	cmp	r3, #0
 8005246:	f47f af68 	bne.w	800511a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f918 	bl	8005480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8005250:	e763      	b.n	800511a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005258:	2b02      	cmp	r3, #2
 800525a:	d113      	bne.n	8005284 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005272:	1c5a      	adds	r2, r3, #1
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8005282:	e74a      	b.n	800511a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800528a:	2b03      	cmp	r3, #3
 800528c:	d110      	bne.n	80052b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	021b      	lsls	r3, r3, #8
 8005298:	441a      	add	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80052a6:	1c5a      	adds	r2, r3, #1
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80052ae:	e734      	b.n	800511a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d116      	bne.n	80052e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80052c0:	425a      	negs	r2, r3
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	bf58      	it	pl
 80052c8:	4253      	negpl	r3, r2
 80052ca:	2bff      	cmp	r3, #255	; 0xff
 80052cc:	d107      	bne.n	80052de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80052dc:	e71d      	b.n	800511a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80052e6:	e718      	b.n	800511a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80052ee:	2b05      	cmp	r3, #5
 80052f0:	d10f      	bne.n	8005312 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68ba      	ldr	r2, [r7, #8]
 80052f6:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005300:	1c5a      	adds	r2, r3, #1
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8005310:	e703      	b.n	800511a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005318:	2b06      	cmp	r3, #6
 800531a:	d117      	bne.n	800534c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	021b      	lsls	r3, r3, #8
 8005326:	441a      	add	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2207      	movs	r2, #7
 8005332:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800533c:	2b00      	cmp	r3, #0
 800533e:	f47f aeec 	bne.w	800511a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2208      	movs	r2, #8
 8005346:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800534a:	e6e6      	b.n	800511a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8005352:	2b08      	cmp	r3, #8
 8005354:	f47f aee1 	bne.w	800511a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8005366:	425a      	negs	r2, r3
 8005368:	b2db      	uxtb	r3, r3
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	bf58      	it	pl
 800536e:	4253      	negpl	r3, r2
 8005370:	2bff      	cmp	r3, #255	; 0xff
 8005372:	f47f aed2 	bne.w	800511a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800537c:	2b00      	cmp	r3, #0
 800537e:	d110      	bne.n	80053a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f87d 	bl	8005480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f898 	bl	80054bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 800539c:	f04f 33ff 	mov.w	r3, #4294967295
 80053a0:	e06a      	b.n	8005478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80053a8:	2b0a      	cmp	r3, #10
 80053aa:	d107      	bne.n	80053bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80053b2:	4619      	mov	r1, r3
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f961 	bl	800567c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80053ba:	e6ae      	b.n	800511a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80053c2:	2b06      	cmp	r3, #6
 80053c4:	d10e      	bne.n	80053e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f603 1214 	addw	r2, r3, #2324	; 0x914
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80053d2:	4619      	mov	r1, r3
 80053d4:	4610      	mov	r0, r2
 80053d6:	f7fd ff4c 	bl	8003272 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80053e2:	e69a      	b.n	800511a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80053ea:	2b0b      	cmp	r3, #11
 80053ec:	d104      	bne.n	80053f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80053f6:	e690      	b.n	800511a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80053fe:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800540c:	2b00      	cmp	r3, #0
 800540e:	f43f ae84 	beq.w	800511a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8005418:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005422:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800542c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8005444:	4611      	mov	r1, r2
 8005446:	4798      	blx	r3
    while (true)
 8005448:	e667      	b.n	800511a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 800544a:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00f      	beq.n	8005476 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8005464:	4293      	cmp	r3, r2
 8005466:	d906      	bls.n	8005476 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f809 	bl	8005480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8005476:	2300      	movs	r3, #0
  }
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8005488:	f107 030c 	add.w	r3, r7, #12
 800548c:	4618      	mov	r0, r3
 800548e:	f7fd fa57 	bl	8002940 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f107 020c 	add.w	r2, r7, #12
 800549c:	210a      	movs	r1, #10
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	4798      	blx	r3
    rt_time = hardware_.time();
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	3304      	adds	r3, #4
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fe fa32 	bl	8003910 <_ZN13STM32Hardware4timeEv>
 80054ac:	4602      	mov	r2, r0
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 80054b4:	bf00      	nop
 80054b6:	3718      	adds	r7, #24
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80054bc:	b590      	push	{r4, r7, lr}
 80054be:	b08b      	sub	sp, #44	; 0x2c
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80054c4:	f107 030c 	add.w	r3, r7, #12
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7fd fb29 	bl	8002b20 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80054ce:	2300      	movs	r3, #0
 80054d0:	627b      	str	r3, [r7, #36]	; 0x24
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	2b18      	cmp	r3, #24
 80054d6:	dc63      	bgt.n	80055a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d056      	beq.n	8005598 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4413      	add	r3, r2
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005502:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	6859      	ldr	r1, [r3, #4]
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005524:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	3308      	adds	r3, #8
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4608      	mov	r0, r1
 8005538:	4798      	blx	r3
 800553a:	4603      	mov	r3, r0
 800553c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	6859      	ldr	r1, [r3, #4]
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	330c      	adds	r3, #12
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4608      	mov	r0, r1
 8005566:	4798      	blx	r3
 8005568:	4603      	mov	r3, r0
 800556a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800556c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005570:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681c      	ldr	r4, [r3, #0]
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	4618      	mov	r0, r3
 8005588:	f7fe f800 	bl	800358c <_ZN3ros9Publisher15getEndpointTypeEv>
 800558c:	4601      	mov	r1, r0
 800558e:	f107 030c 	add.w	r3, r7, #12
 8005592:	461a      	mov	r2, r3
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	3301      	adds	r3, #1
 800559c:	627b      	str	r3, [r7, #36]	; 0x24
 800559e:	e798      	b.n	80054d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80055a0:	2300      	movs	r3, #0
 80055a2:	627b      	str	r3, [r7, #36]	; 0x24
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	2b18      	cmp	r3, #24
 80055a8:	dc5f      	bgt.n	800566a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ae:	f202 2222 	addw	r2, r2, #546	; 0x222
 80055b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d053      	beq.n	8005662 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055be:	f202 2222 	addw	r2, r2, #546	; 0x222
 80055c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80055d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80055e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ec:	f202 2222 	addw	r2, r2, #546	; 0x222
 80055f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	3308      	adds	r3, #8
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4608      	mov	r0, r1
 80055fc:	4798      	blx	r3
 80055fe:	4603      	mov	r3, r0
 8005600:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005606:	f202 2222 	addw	r2, r2, #546	; 0x222
 800560a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005612:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	330c      	adds	r3, #12
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4608      	mov	r0, r1
 8005622:	4798      	blx	r3
 8005624:	4603      	mov	r3, r0
 8005626:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8005628:	f44f 7300 	mov.w	r3, #512	; 0x200
 800562c:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681c      	ldr	r4, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005638:	f202 2222 	addw	r2, r2, #546	; 0x222
 800563c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005644:	f202 2222 	addw	r2, r2, #546	; 0x222
 8005648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3304      	adds	r3, #4
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4608      	mov	r0, r1
 8005654:	4798      	blx	r3
 8005656:	4601      	mov	r1, r0
 8005658:	f107 030c 	add.w	r3, r7, #12
 800565c:	461a      	mov	r2, r3
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8005662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005664:	3301      	adds	r3, #1
 8005666:	627b      	str	r3, [r7, #36]	; 0x24
 8005668:	e79c      	b.n	80055a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8005672:	bf00      	nop
 8005674:	372c      	adds	r7, #44	; 0x2c
 8005676:	46bd      	mov	sp, r7
 8005678:	bd90      	pop	{r4, r7, pc}
	...

0800567c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8005686:	f107 0308 	add.w	r3, r7, #8
 800568a:	4618      	mov	r0, r3
 800568c:	f7fd f958 	bl	8002940 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3304      	adds	r3, #4
 8005694:	4618      	mov	r0, r3
 8005696:	f7fe f93b 	bl	8003910 <_ZN13STM32Hardware4timeEv>
 800569a:	4602      	mov	r2, r0
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80056a6:	f107 0308 	add.w	r3, r7, #8
 80056aa:	6839      	ldr	r1, [r7, #0]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7fd f9b7 	bl	8002a20 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	4915      	ldr	r1, [pc, #84]	; (800570c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80056b8:	fba1 1303 	umull	r1, r3, r1, r3
 80056bc:	099b      	lsrs	r3, r3, #6
 80056be:	4413      	add	r3, r2
 80056c0:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80056c2:	6939      	ldr	r1, [r7, #16]
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	4b11      	ldr	r3, [pc, #68]	; (800570c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80056c8:	fba3 0302 	umull	r0, r3, r3, r2
 80056cc:	099b      	lsrs	r3, r3, #6
 80056ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80056d2:	fb00 f303 	mul.w	r3, r0, r3
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	4a0d      	ldr	r2, [pc, #52]	; (8005710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80056da:	fb02 f303 	mul.w	r3, r2, r3
 80056de:	440b      	add	r3, r1
 80056e0:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80056e2:	f107 0308 	add.w	r3, r7, #8
 80056e6:	3304      	adds	r3, #4
 80056e8:	4619      	mov	r1, r3
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f8a4 	bl	8005838 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	3304      	adds	r3, #4
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7fe f90b 	bl	8003910 <_ZN13STM32Hardware4timeEv>
 80056fa:	4602      	mov	r2, r0
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8005702:	bf00      	nop
 8005704:	3718      	adds	r7, #24
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	10624dd3 	.word	0x10624dd3
 8005710:	000f4240 	.word	0x000f4240

08005714 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8005714:	b580      	push	{r7, lr}
 8005716:	b088      	sub	sp, #32
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2b63      	cmp	r3, #99	; 0x63
 8005724:	dd09      	ble.n	800573a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800572c:	f083 0301 	eor.w	r3, r3, #1
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8005736:	2300      	movs	r3, #0
 8005738:	e077      	b.n	800582a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8005746:	3207      	adds	r2, #7
 8005748:	4611      	mov	r1, r2
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	4798      	blx	r3
 800574e:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	22ff      	movs	r2, #255	; 0xff
 8005754:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	22fe      	movs	r2, #254	; 0xfe
 800575c:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	b2da      	uxtb	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	b29b      	uxth	r3, r3
 800576e:	121b      	asrs	r3, r3, #8
 8005770:	b2da      	uxtb	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8005784:	4413      	add	r3, r2
 8005786:	b2db      	uxtb	r3, r3
 8005788:	43db      	mvns	r3, r3
 800578a:	b2da      	uxtb	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	b2da      	uxtb	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	b21b      	sxth	r3, r3
 80057a0:	121b      	asrs	r3, r3, #8
 80057a2:	b2da      	uxtb	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 80057aa:	2300      	movs	r3, #0
 80057ac:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80057ae:	2305      	movs	r3, #5
 80057b0:	61bb      	str	r3, [r7, #24]
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	3306      	adds	r3, #6
 80057b6:	69ba      	ldr	r2, [r7, #24]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	dc0d      	bgt.n	80057d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	4413      	add	r3, r2
 80057c2:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	461a      	mov	r2, r3
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	4413      	add	r3, r2
 80057ce:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	3301      	adds	r3, #1
 80057d4:	61bb      	str	r3, [r7, #24]
 80057d6:	e7ec      	b.n	80057b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	3307      	adds	r3, #7
 80057dc:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	425a      	negs	r2, r3
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	b2d2      	uxtb	r2, r2
 80057e6:	bf58      	it	pl
 80057e8:	4253      	negpl	r3, r2
 80057ea:	b2da      	uxtb	r2, r3
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	1c59      	adds	r1, r3, #1
 80057f0:	6179      	str	r1, [r7, #20]
 80057f2:	43d2      	mvns	r2, r2
 80057f4:	b2d1      	uxtb	r1, r2
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	4413      	add	r3, r2
 80057fa:	460a      	mov	r2, r1
 80057fc:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005806:	dc0a      	bgt.n	800581e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	1d18      	adds	r0, r3, #4
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	4619      	mov	r1, r3
 8005816:	f7fe f835 	bl	8003884 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	e005      	b.n	800582a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800581e:	4905      	ldr	r1, [pc, #20]	; (8005834 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 f849 	bl	80058b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8005826:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 800582a:	4618      	mov	r0, r3
 800582c:	3720      	adds	r7, #32
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	080116d4 	.word	0x080116d4

08005838 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	3304      	adds	r3, #4
 8005846:	4618      	mov	r0, r3
 8005848:	f7fe f862 	bl	8003910 <_ZN13STM32Hardware4timeEv>
 800584c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	4915      	ldr	r1, [pc, #84]	; (80058ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8005856:	fba1 1303 	umull	r1, r3, r1, r3
 800585a:	099b      	lsrs	r3, r3, #6
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	1e5a      	subs	r2, r3, #1
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	6859      	ldr	r1, [r3, #4]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	4b0f      	ldr	r3, [pc, #60]	; (80058ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 800586e:	fba3 0302 	umull	r0, r3, r3, r2
 8005872:	099b      	lsrs	r3, r3, #6
 8005874:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005878:	fb00 f303 	mul.w	r3, r0, r3
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	4a0c      	ldr	r2, [pc, #48]	; (80058b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 8005880:	fb02 f303 	mul.w	r3, r2, r3
 8005884:	1aca      	subs	r2, r1, r3
 8005886:	4b0b      	ldr	r3, [pc, #44]	; (80058b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8005888:	4413      	add	r3, r2
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800589c:	4619      	mov	r1, r3
 800589e:	4610      	mov	r0, r2
 80058a0:	f7fa feba 	bl	8000618 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80058a4:	bf00      	nop
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	10624dd3 	.word	0x10624dd3
 80058b0:	000f4240 	.word	0x000f4240
 80058b4:	3b9aca00 	.word	0x3b9aca00

080058b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	2103      	movs	r1, #3
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f804 	bl	80058d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80058cc:	bf00      	nop
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b088      	sub	sp, #32
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	460b      	mov	r3, r1
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80058e2:	f107 0314 	add.w	r3, r7, #20
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7fd fade 	bl	8002ea8 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 80058ec:	7afb      	ldrb	r3, [r7, #11]
 80058ee:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f107 0214 	add.w	r2, r7, #20
 80058fe:	2107      	movs	r1, #7
 8005900:	68f8      	ldr	r0, [r7, #12]
 8005902:	4798      	blx	r3
  }
 8005904:	bf00      	nop
 8005906:	3720      	adds	r7, #32
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <_Z41__static_initialization_and_destruction_0ii>:
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d113      	bne.n	8005944 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005922:	4293      	cmp	r3, r2
 8005924:	d10e      	bne.n	8005944 <_Z41__static_initialization_and_destruction_0ii+0x38>
ros::NodeHandle nh;
 8005926:	4809      	ldr	r0, [pc, #36]	; (800594c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8005928:	f7ff fa7a 	bl	8004e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> sub("wheel_vel", vel_callback);
 800592c:	2301      	movs	r3, #1
 800592e:	4a08      	ldr	r2, [pc, #32]	; (8005950 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8005930:	4908      	ldr	r1, [pc, #32]	; (8005954 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8005932:	4809      	ldr	r0, [pc, #36]	; (8005958 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8005934:	f7ff fb04 	bl	8004f40 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<geometry_msgs::Point> sub1("Destination", point_callback);
 8005938:	2301      	movs	r3, #1
 800593a:	4a08      	ldr	r2, [pc, #32]	; (800595c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800593c:	4908      	ldr	r1, [pc, #32]	; (8005960 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800593e:	4809      	ldr	r0, [pc, #36]	; (8005964 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8005940:	f7ff fb22 	bl	8004f88 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvEC1EPKcPFvRKS2_Ei>
}
 8005944:	bf00      	nop
 8005946:	3708      	adds	r7, #8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	240002cc 	.word	0x240002cc
 8005950:	08004c81 	.word	0x08004c81
 8005954:	08011710 	.word	0x08011710
 8005958:	24000c08 	.word	0x24000c08
 800595c:	08004cbd 	.word	0x08004cbd
 8005960:	0801171c 	.word	0x0801171c
 8005964:	24000c68 	.word	0x24000c68

08005968 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	3310      	adds	r3, #16
 8005976:	6839      	ldr	r1, [r7, #0]
 8005978:	4618      	mov	r0, r3
 800597a:	f7fe fe88 	bl	800468e <_ZN13geometry_msgs5Point11deserializeEPh>
    this->cb_(msg);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	3210      	adds	r2, #16
 8005986:	4610      	mov	r0, r2
 8005988:	4798      	blx	r3
  }
 800598a:	bf00      	nop
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8005992:	b480      	push	{r7}
 8005994:	b083      	sub	sp, #12
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
 800599e:	4618      	mov	r0, r3
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b082      	sub	sp, #8
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	3310      	adds	r3, #16
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7ff f946 	bl	8004c48 <_ZN13geometry_msgs5Point7getTypeEv>
 80059bc:	4603      	mov	r3, r0
  }
 80059be:	4618      	mov	r0, r3
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <_ZN3ros10SubscriberIN13geometry_msgs5PointEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b082      	sub	sp, #8
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	3310      	adds	r3, #16
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7ff f946 	bl	8004c64 <_ZN13geometry_msgs5Point6getMD5Ev>
 80059d8:	4603      	mov	r3, r0
  }
 80059da:	4618      	mov	r0, r3
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b082      	sub	sp, #8
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
 80059ea:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	3310      	adds	r3, #16
 80059f0:	6839      	ldr	r1, [r7, #0]
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fe fc6e 	bl	80042d4 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	3210      	adds	r2, #16
 8005a00:	4610      	mov	r0, r2
 8005a02:	4798      	blx	r3
  }
 8005a04:	bf00      	nop
 8005a06:	3708      	adds	r7, #8
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8005a18:	4618      	mov	r0, r3
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	3310      	adds	r3, #16
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7fe fc75 	bl	8004320 <_ZN13geometry_msgs5Twist7getTypeEv>
 8005a36:	4603      	mov	r3, r0
  }
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3708      	adds	r7, #8
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3310      	adds	r3, #16
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7fe fc75 	bl	800433c <_ZN13geometry_msgs5Twist6getMD5Ev>
 8005a52:	4603      	mov	r3, r0
  }
 8005a54:	4618      	mov	r0, r3
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
    return configured_;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	370c      	adds	r7, #12
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <_GLOBAL__sub_I_vel>:
 8005a76:	b580      	push	{r7, lr}
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005a7e:	2001      	movs	r0, #1
 8005a80:	f7ff ff44 	bl	800590c <_Z41__static_initialization_and_destruction_0ii>
 8005a84:	bd80      	pop	{r7, pc}
	...

08005a88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a8e:	4b0a      	ldr	r3, [pc, #40]	; (8005ab8 <HAL_MspInit+0x30>)
 8005a90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a94:	4a08      	ldr	r2, [pc, #32]	; (8005ab8 <HAL_MspInit+0x30>)
 8005a96:	f043 0302 	orr.w	r3, r3, #2
 8005a9a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005a9e:	4b06      	ldr	r3, [pc, #24]	; (8005ab8 <HAL_MspInit+0x30>)
 8005aa0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005aa4:	f003 0302 	and.w	r3, r3, #2
 8005aa8:	607b      	str	r3, [r7, #4]
 8005aaa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005aac:	bf00      	nop
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	58024400 	.word	0x58024400

08005abc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b086      	sub	sp, #24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a42      	ldr	r2, [pc, #264]	; (8005bd4 <HAL_TIM_PWM_MspInit+0x118>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d12f      	bne.n	8005b2e <HAL_TIM_PWM_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005ace:	4b42      	ldr	r3, [pc, #264]	; (8005bd8 <HAL_TIM_PWM_MspInit+0x11c>)
 8005ad0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ad4:	4a40      	ldr	r2, [pc, #256]	; (8005bd8 <HAL_TIM_PWM_MspInit+0x11c>)
 8005ad6:	f043 0301 	orr.w	r3, r3, #1
 8005ada:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005ade:	4b3e      	ldr	r3, [pc, #248]	; (8005bd8 <HAL_TIM_PWM_MspInit+0x11c>)
 8005ae0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	617b      	str	r3, [r7, #20]
 8005aea:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8005aec:	2200      	movs	r2, #0
 8005aee:	2100      	movs	r1, #0
 8005af0:	2018      	movs	r0, #24
 8005af2:	f000 ff5c 	bl	80069ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8005af6:	2018      	movs	r0, #24
 8005af8:	f000 ff73 	bl	80069e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8005afc:	2200      	movs	r2, #0
 8005afe:	2100      	movs	r1, #0
 8005b00:	2019      	movs	r0, #25
 8005b02:	f000 ff54 	bl	80069ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8005b06:	2019      	movs	r0, #25
 8005b08:	f000 ff6b 	bl	80069e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	2100      	movs	r1, #0
 8005b10:	201a      	movs	r0, #26
 8005b12:	f000 ff4c 	bl	80069ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8005b16:	201a      	movs	r0, #26
 8005b18:	f000 ff63 	bl	80069e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	2100      	movs	r1, #0
 8005b20:	201b      	movs	r0, #27
 8005b22:	f000 ff44 	bl	80069ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8005b26:	201b      	movs	r0, #27
 8005b28:	f000 ff5b 	bl	80069e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 8005b2c:	e04d      	b.n	8005bca <HAL_TIM_PWM_MspInit+0x10e>
  else if(htim_pwm->Instance==TIM12)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a2a      	ldr	r2, [pc, #168]	; (8005bdc <HAL_TIM_PWM_MspInit+0x120>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d117      	bne.n	8005b68 <HAL_TIM_PWM_MspInit+0xac>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8005b38:	4b27      	ldr	r3, [pc, #156]	; (8005bd8 <HAL_TIM_PWM_MspInit+0x11c>)
 8005b3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b3e:	4a26      	ldr	r2, [pc, #152]	; (8005bd8 <HAL_TIM_PWM_MspInit+0x11c>)
 8005b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b44:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005b48:	4b23      	ldr	r3, [pc, #140]	; (8005bd8 <HAL_TIM_PWM_MspInit+0x11c>)
 8005b4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b52:	613b      	str	r3, [r7, #16]
 8005b54:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8005b56:	2200      	movs	r2, #0
 8005b58:	2100      	movs	r1, #0
 8005b5a:	202b      	movs	r0, #43	; 0x2b
 8005b5c:	f000 ff27 	bl	80069ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8005b60:	202b      	movs	r0, #43	; 0x2b
 8005b62:	f000 ff3e 	bl	80069e2 <HAL_NVIC_EnableIRQ>
}
 8005b66:	e030      	b.n	8005bca <HAL_TIM_PWM_MspInit+0x10e>
  else if(htim_pwm->Instance==TIM15)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a1c      	ldr	r2, [pc, #112]	; (8005be0 <HAL_TIM_PWM_MspInit+0x124>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d117      	bne.n	8005ba2 <HAL_TIM_PWM_MspInit+0xe6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005b72:	4b19      	ldr	r3, [pc, #100]	; (8005bd8 <HAL_TIM_PWM_MspInit+0x11c>)
 8005b74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b78:	4a17      	ldr	r2, [pc, #92]	; (8005bd8 <HAL_TIM_PWM_MspInit+0x11c>)
 8005b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b7e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005b82:	4b15      	ldr	r3, [pc, #84]	; (8005bd8 <HAL_TIM_PWM_MspInit+0x11c>)
 8005b84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8005b90:	2200      	movs	r2, #0
 8005b92:	2100      	movs	r1, #0
 8005b94:	2074      	movs	r0, #116	; 0x74
 8005b96:	f000 ff0a 	bl	80069ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8005b9a:	2074      	movs	r0, #116	; 0x74
 8005b9c:	f000 ff21 	bl	80069e2 <HAL_NVIC_EnableIRQ>
}
 8005ba0:	e013      	b.n	8005bca <HAL_TIM_PWM_MspInit+0x10e>
  else if(htim_pwm->Instance==TIM23)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a0f      	ldr	r2, [pc, #60]	; (8005be4 <HAL_TIM_PWM_MspInit+0x128>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d10e      	bne.n	8005bca <HAL_TIM_PWM_MspInit+0x10e>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8005bac:	4b0a      	ldr	r3, [pc, #40]	; (8005bd8 <HAL_TIM_PWM_MspInit+0x11c>)
 8005bae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005bb2:	4a09      	ldr	r2, [pc, #36]	; (8005bd8 <HAL_TIM_PWM_MspInit+0x11c>)
 8005bb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bb8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8005bbc:	4b06      	ldr	r3, [pc, #24]	; (8005bd8 <HAL_TIM_PWM_MspInit+0x11c>)
 8005bbe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005bc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bc6:	60bb      	str	r3, [r7, #8]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
}
 8005bca:	bf00      	nop
 8005bcc:	3718      	adds	r7, #24
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	40010000 	.word	0x40010000
 8005bd8:	58024400 	.word	0x58024400
 8005bdc:	40001800 	.word	0x40001800
 8005be0:	40014000 	.word	0x40014000
 8005be4:	4000e000 	.word	0x4000e000

08005be8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b090      	sub	sp, #64	; 0x40
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	601a      	str	r2, [r3, #0]
 8005bf8:	605a      	str	r2, [r3, #4]
 8005bfa:	609a      	str	r2, [r3, #8]
 8005bfc:	60da      	str	r2, [r3, #12]
 8005bfe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c08:	d14e      	bne.n	8005ca8 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005c0a:	4b7b      	ldr	r3, [pc, #492]	; (8005df8 <HAL_TIM_Encoder_MspInit+0x210>)
 8005c0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c10:	4a79      	ldr	r2, [pc, #484]	; (8005df8 <HAL_TIM_Encoder_MspInit+0x210>)
 8005c12:	f043 0301 	orr.w	r3, r3, #1
 8005c16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005c1a:	4b77      	ldr	r3, [pc, #476]	; (8005df8 <HAL_TIM_Encoder_MspInit+0x210>)
 8005c1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c20:	f003 0301 	and.w	r3, r3, #1
 8005c24:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c26:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c28:	4b73      	ldr	r3, [pc, #460]	; (8005df8 <HAL_TIM_Encoder_MspInit+0x210>)
 8005c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c2e:	4a72      	ldr	r2, [pc, #456]	; (8005df8 <HAL_TIM_Encoder_MspInit+0x210>)
 8005c30:	f043 0301 	orr.w	r3, r3, #1
 8005c34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005c38:	4b6f      	ldr	r3, [pc, #444]	; (8005df8 <HAL_TIM_Encoder_MspInit+0x210>)
 8005c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	627b      	str	r3, [r7, #36]	; 0x24
 8005c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c46:	4b6c      	ldr	r3, [pc, #432]	; (8005df8 <HAL_TIM_Encoder_MspInit+0x210>)
 8005c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c4c:	4a6a      	ldr	r2, [pc, #424]	; (8005df8 <HAL_TIM_Encoder_MspInit+0x210>)
 8005c4e:	f043 0302 	orr.w	r3, r3, #2
 8005c52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005c56:	4b68      	ldr	r3, [pc, #416]	; (8005df8 <HAL_TIM_Encoder_MspInit+0x210>)
 8005c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	623b      	str	r3, [r7, #32]
 8005c62:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005c64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c72:	2300      	movs	r3, #0
 8005c74:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005c76:	2301      	movs	r3, #1
 8005c78:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c7e:	4619      	mov	r1, r3
 8005c80:	485e      	ldr	r0, [pc, #376]	; (8005dfc <HAL_TIM_Encoder_MspInit+0x214>)
 8005c82:	f003 fd01 	bl	8009688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005c86:	2308      	movs	r3, #8
 8005c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c92:	2300      	movs	r3, #0
 8005c94:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005c96:	2301      	movs	r3, #1
 8005c98:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	4857      	ldr	r0, [pc, #348]	; (8005e00 <HAL_TIM_Encoder_MspInit+0x218>)
 8005ca2:	f003 fcf1 	bl	8009688 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8005ca6:	e0a3      	b.n	8005df0 <HAL_TIM_Encoder_MspInit+0x208>
  else if(htim_encoder->Instance==TIM3)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a55      	ldr	r2, [pc, #340]	; (8005e04 <HAL_TIM_Encoder_MspInit+0x21c>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d12e      	bne.n	8005d10 <HAL_TIM_Encoder_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005cb2:	4b51      	ldr	r3, [pc, #324]	; (8005df8 <HAL_TIM_Encoder_MspInit+0x210>)
 8005cb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005cb8:	4a4f      	ldr	r2, [pc, #316]	; (8005df8 <HAL_TIM_Encoder_MspInit+0x210>)
 8005cba:	f043 0302 	orr.w	r3, r3, #2
 8005cbe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005cc2:	4b4d      	ldr	r3, [pc, #308]	; (8005df8 <HAL_TIM_Encoder_MspInit+0x210>)
 8005cc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005cc8:	f003 0302 	and.w	r3, r3, #2
 8005ccc:	61fb      	str	r3, [r7, #28]
 8005cce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cd0:	4b49      	ldr	r3, [pc, #292]	; (8005df8 <HAL_TIM_Encoder_MspInit+0x210>)
 8005cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005cd6:	4a48      	ldr	r2, [pc, #288]	; (8005df8 <HAL_TIM_Encoder_MspInit+0x210>)
 8005cd8:	f043 0302 	orr.w	r3, r3, #2
 8005cdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005ce0:	4b45      	ldr	r3, [pc, #276]	; (8005df8 <HAL_TIM_Encoder_MspInit+0x210>)
 8005ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	61bb      	str	r3, [r7, #24]
 8005cec:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005cee:	2330      	movs	r3, #48	; 0x30
 8005cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005cfe:	2302      	movs	r3, #2
 8005d00:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d06:	4619      	mov	r1, r3
 8005d08:	483d      	ldr	r0, [pc, #244]	; (8005e00 <HAL_TIM_Encoder_MspInit+0x218>)
 8005d0a:	f003 fcbd 	bl	8009688 <HAL_GPIO_Init>
}
 8005d0e:	e06f      	b.n	8005df0 <HAL_TIM_Encoder_MspInit+0x208>
  else if(htim_encoder->Instance==TIM4)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a3c      	ldr	r2, [pc, #240]	; (8005e08 <HAL_TIM_Encoder_MspInit+0x220>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d137      	bne.n	8005d8a <HAL_TIM_Encoder_MspInit+0x1a2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005d1a:	4b37      	ldr	r3, [pc, #220]	; (8005df8 <HAL_TIM_Encoder_MspInit+0x210>)
 8005d1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d20:	4a35      	ldr	r2, [pc, #212]	; (8005df8 <HAL_TIM_Encoder_MspInit+0x210>)
 8005d22:	f043 0304 	orr.w	r3, r3, #4
 8005d26:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005d2a:	4b33      	ldr	r3, [pc, #204]	; (8005df8 <HAL_TIM_Encoder_MspInit+0x210>)
 8005d2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	617b      	str	r3, [r7, #20]
 8005d36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005d38:	4b2f      	ldr	r3, [pc, #188]	; (8005df8 <HAL_TIM_Encoder_MspInit+0x210>)
 8005d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d3e:	4a2e      	ldr	r2, [pc, #184]	; (8005df8 <HAL_TIM_Encoder_MspInit+0x210>)
 8005d40:	f043 0308 	orr.w	r3, r3, #8
 8005d44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005d48:	4b2b      	ldr	r3, [pc, #172]	; (8005df8 <HAL_TIM_Encoder_MspInit+0x210>)
 8005d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d4e:	f003 0308 	and.w	r3, r3, #8
 8005d52:	613b      	str	r3, [r7, #16]
 8005d54:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8005d56:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d60:	2300      	movs	r3, #0
 8005d62:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d64:	2300      	movs	r3, #0
 8005d66:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005d68:	2302      	movs	r3, #2
 8005d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005d6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d70:	4619      	mov	r1, r3
 8005d72:	4826      	ldr	r0, [pc, #152]	; (8005e0c <HAL_TIM_Encoder_MspInit+0x224>)
 8005d74:	f003 fc88 	bl	8009688 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005d78:	2200      	movs	r2, #0
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	201e      	movs	r0, #30
 8005d7e:	f000 fe16 	bl	80069ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005d82:	201e      	movs	r0, #30
 8005d84:	f000 fe2d 	bl	80069e2 <HAL_NVIC_EnableIRQ>
}
 8005d88:	e032      	b.n	8005df0 <HAL_TIM_Encoder_MspInit+0x208>
  else if(htim_encoder->Instance==TIM5)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a20      	ldr	r2, [pc, #128]	; (8005e10 <HAL_TIM_Encoder_MspInit+0x228>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d12d      	bne.n	8005df0 <HAL_TIM_Encoder_MspInit+0x208>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005d94:	4b18      	ldr	r3, [pc, #96]	; (8005df8 <HAL_TIM_Encoder_MspInit+0x210>)
 8005d96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005d9a:	4a17      	ldr	r2, [pc, #92]	; (8005df8 <HAL_TIM_Encoder_MspInit+0x210>)
 8005d9c:	f043 0308 	orr.w	r3, r3, #8
 8005da0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005da4:	4b14      	ldr	r3, [pc, #80]	; (8005df8 <HAL_TIM_Encoder_MspInit+0x210>)
 8005da6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005daa:	f003 0308 	and.w	r3, r3, #8
 8005dae:	60fb      	str	r3, [r7, #12]
 8005db0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005db2:	4b11      	ldr	r3, [pc, #68]	; (8005df8 <HAL_TIM_Encoder_MspInit+0x210>)
 8005db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005db8:	4a0f      	ldr	r2, [pc, #60]	; (8005df8 <HAL_TIM_Encoder_MspInit+0x210>)
 8005dba:	f043 0301 	orr.w	r3, r3, #1
 8005dbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005dc2:	4b0d      	ldr	r3, [pc, #52]	; (8005df8 <HAL_TIM_Encoder_MspInit+0x210>)
 8005dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	60bb      	str	r3, [r7, #8]
 8005dce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005de0:	2302      	movs	r3, #2
 8005de2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005de4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005de8:	4619      	mov	r1, r3
 8005dea:	4804      	ldr	r0, [pc, #16]	; (8005dfc <HAL_TIM_Encoder_MspInit+0x214>)
 8005dec:	f003 fc4c 	bl	8009688 <HAL_GPIO_Init>
}
 8005df0:	bf00      	nop
 8005df2:	3740      	adds	r7, #64	; 0x40
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	58024400 	.word	0x58024400
 8005dfc:	58020000 	.word	0x58020000
 8005e00:	58020400 	.word	0x58020400
 8005e04:	40000400 	.word	0x40000400
 8005e08:	40000800 	.word	0x40000800
 8005e0c:	58020c00 	.word	0x58020c00
 8005e10:	40000c00 	.word	0x40000c00

08005e14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b088      	sub	sp, #32
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a54      	ldr	r2, [pc, #336]	; (8005f74 <HAL_TIM_Base_MspInit+0x160>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d117      	bne.n	8005e56 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005e26:	4b54      	ldr	r3, [pc, #336]	; (8005f78 <HAL_TIM_Base_MspInit+0x164>)
 8005e28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e2c:	4a52      	ldr	r2, [pc, #328]	; (8005f78 <HAL_TIM_Base_MspInit+0x164>)
 8005e2e:	f043 0310 	orr.w	r3, r3, #16
 8005e32:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005e36:	4b50      	ldr	r3, [pc, #320]	; (8005f78 <HAL_TIM_Base_MspInit+0x164>)
 8005e38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e3c:	f003 0310 	and.w	r3, r3, #16
 8005e40:	61fb      	str	r3, [r7, #28]
 8005e42:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005e44:	2200      	movs	r2, #0
 8005e46:	2100      	movs	r1, #0
 8005e48:	2036      	movs	r0, #54	; 0x36
 8005e4a:	f000 fdb0 	bl	80069ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005e4e:	2036      	movs	r0, #54	; 0x36
 8005e50:	f000 fdc7 	bl	80069e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8005e54:	e08a      	b.n	8005f6c <HAL_TIM_Base_MspInit+0x158>
  else if(htim_base->Instance==TIM7)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a48      	ldr	r2, [pc, #288]	; (8005f7c <HAL_TIM_Base_MspInit+0x168>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d117      	bne.n	8005e90 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005e60:	4b45      	ldr	r3, [pc, #276]	; (8005f78 <HAL_TIM_Base_MspInit+0x164>)
 8005e62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e66:	4a44      	ldr	r2, [pc, #272]	; (8005f78 <HAL_TIM_Base_MspInit+0x164>)
 8005e68:	f043 0320 	orr.w	r3, r3, #32
 8005e6c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005e70:	4b41      	ldr	r3, [pc, #260]	; (8005f78 <HAL_TIM_Base_MspInit+0x164>)
 8005e72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e76:	f003 0320 	and.w	r3, r3, #32
 8005e7a:	61bb      	str	r3, [r7, #24]
 8005e7c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005e7e:	2200      	movs	r2, #0
 8005e80:	2100      	movs	r1, #0
 8005e82:	2037      	movs	r0, #55	; 0x37
 8005e84:	f000 fd93 	bl	80069ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005e88:	2037      	movs	r0, #55	; 0x37
 8005e8a:	f000 fdaa 	bl	80069e2 <HAL_NVIC_EnableIRQ>
}
 8005e8e:	e06d      	b.n	8005f6c <HAL_TIM_Base_MspInit+0x158>
  else if(htim_base->Instance==TIM8)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a3a      	ldr	r2, [pc, #232]	; (8005f80 <HAL_TIM_Base_MspInit+0x16c>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d12f      	bne.n	8005efa <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005e9a:	4b37      	ldr	r3, [pc, #220]	; (8005f78 <HAL_TIM_Base_MspInit+0x164>)
 8005e9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ea0:	4a35      	ldr	r2, [pc, #212]	; (8005f78 <HAL_TIM_Base_MspInit+0x164>)
 8005ea2:	f043 0302 	orr.w	r3, r3, #2
 8005ea6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005eaa:	4b33      	ldr	r3, [pc, #204]	; (8005f78 <HAL_TIM_Base_MspInit+0x164>)
 8005eac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005eb0:	f003 0302 	and.w	r3, r3, #2
 8005eb4:	617b      	str	r3, [r7, #20]
 8005eb6:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8005eb8:	2200      	movs	r2, #0
 8005eba:	2100      	movs	r1, #0
 8005ebc:	202b      	movs	r0, #43	; 0x2b
 8005ebe:	f000 fd76 	bl	80069ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8005ec2:	202b      	movs	r0, #43	; 0x2b
 8005ec4:	f000 fd8d 	bl	80069e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005ec8:	2200      	movs	r2, #0
 8005eca:	2100      	movs	r1, #0
 8005ecc:	202c      	movs	r0, #44	; 0x2c
 8005ece:	f000 fd6e 	bl	80069ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005ed2:	202c      	movs	r0, #44	; 0x2c
 8005ed4:	f000 fd85 	bl	80069e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8005ed8:	2200      	movs	r2, #0
 8005eda:	2100      	movs	r1, #0
 8005edc:	202d      	movs	r0, #45	; 0x2d
 8005ede:	f000 fd66 	bl	80069ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8005ee2:	202d      	movs	r0, #45	; 0x2d
 8005ee4:	f000 fd7d 	bl	80069e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8005ee8:	2200      	movs	r2, #0
 8005eea:	2100      	movs	r1, #0
 8005eec:	202e      	movs	r0, #46	; 0x2e
 8005eee:	f000 fd5e 	bl	80069ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8005ef2:	202e      	movs	r0, #46	; 0x2e
 8005ef4:	f000 fd75 	bl	80069e2 <HAL_NVIC_EnableIRQ>
}
 8005ef8:	e038      	b.n	8005f6c <HAL_TIM_Base_MspInit+0x158>
  else if(htim_base->Instance==TIM13)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a21      	ldr	r2, [pc, #132]	; (8005f84 <HAL_TIM_Base_MspInit+0x170>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d117      	bne.n	8005f34 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005f04:	4b1c      	ldr	r3, [pc, #112]	; (8005f78 <HAL_TIM_Base_MspInit+0x164>)
 8005f06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f0a:	4a1b      	ldr	r2, [pc, #108]	; (8005f78 <HAL_TIM_Base_MspInit+0x164>)
 8005f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f10:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005f14:	4b18      	ldr	r3, [pc, #96]	; (8005f78 <HAL_TIM_Base_MspInit+0x164>)
 8005f16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f1e:	613b      	str	r3, [r7, #16]
 8005f20:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005f22:	2200      	movs	r2, #0
 8005f24:	2100      	movs	r1, #0
 8005f26:	202c      	movs	r0, #44	; 0x2c
 8005f28:	f000 fd41 	bl	80069ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005f2c:	202c      	movs	r0, #44	; 0x2c
 8005f2e:	f000 fd58 	bl	80069e2 <HAL_NVIC_EnableIRQ>
}
 8005f32:	e01b      	b.n	8005f6c <HAL_TIM_Base_MspInit+0x158>
  else if(htim_base->Instance==TIM16)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a13      	ldr	r2, [pc, #76]	; (8005f88 <HAL_TIM_Base_MspInit+0x174>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d116      	bne.n	8005f6c <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005f3e:	4b0e      	ldr	r3, [pc, #56]	; (8005f78 <HAL_TIM_Base_MspInit+0x164>)
 8005f40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f44:	4a0c      	ldr	r2, [pc, #48]	; (8005f78 <HAL_TIM_Base_MspInit+0x164>)
 8005f46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f4a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005f4e:	4b0a      	ldr	r3, [pc, #40]	; (8005f78 <HAL_TIM_Base_MspInit+0x164>)
 8005f50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f58:	60fb      	str	r3, [r7, #12]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	2100      	movs	r1, #0
 8005f60:	2075      	movs	r0, #117	; 0x75
 8005f62:	f000 fd24 	bl	80069ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8005f66:	2075      	movs	r0, #117	; 0x75
 8005f68:	f000 fd3b 	bl	80069e2 <HAL_NVIC_EnableIRQ>
}
 8005f6c:	bf00      	nop
 8005f6e:	3720      	adds	r7, #32
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	40001000 	.word	0x40001000
 8005f78:	58024400 	.word	0x58024400
 8005f7c:	40001400 	.word	0x40001400
 8005f80:	40010400 	.word	0x40010400
 8005f84:	40001c00 	.word	0x40001c00
 8005f88:	40014400 	.word	0x40014400

08005f8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b08c      	sub	sp, #48	; 0x30
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f94:	f107 031c 	add.w	r3, r7, #28
 8005f98:	2200      	movs	r2, #0
 8005f9a:	601a      	str	r2, [r3, #0]
 8005f9c:	605a      	str	r2, [r3, #4]
 8005f9e:	609a      	str	r2, [r3, #8]
 8005fa0:	60da      	str	r2, [r3, #12]
 8005fa2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a5e      	ldr	r2, [pc, #376]	; (8006124 <HAL_TIM_MspPostInit+0x198>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d120      	bne.n	8005ff0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005fae:	4b5e      	ldr	r3, [pc, #376]	; (8006128 <HAL_TIM_MspPostInit+0x19c>)
 8005fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fb4:	4a5c      	ldr	r2, [pc, #368]	; (8006128 <HAL_TIM_MspPostInit+0x19c>)
 8005fb6:	f043 0310 	orr.w	r3, r3, #16
 8005fba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005fbe:	4b5a      	ldr	r3, [pc, #360]	; (8006128 <HAL_TIM_MspPostInit+0x19c>)
 8005fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fc4:	f003 0310 	and.w	r3, r3, #16
 8005fc8:	61bb      	str	r3, [r7, #24]
 8005fca:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005fcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fd2:	2302      	movs	r3, #2
 8005fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005fe2:	f107 031c 	add.w	r3, r7, #28
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	4850      	ldr	r0, [pc, #320]	; (800612c <HAL_TIM_MspPostInit+0x1a0>)
 8005fea:	f003 fb4d 	bl	8009688 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM23_MspPostInit 1 */

  /* USER CODE END TIM23_MspPostInit 1 */
  }

}
 8005fee:	e094      	b.n	800611a <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM12)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a4e      	ldr	r2, [pc, #312]	; (8006130 <HAL_TIM_MspPostInit+0x1a4>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d120      	bne.n	800603c <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ffa:	4b4b      	ldr	r3, [pc, #300]	; (8006128 <HAL_TIM_MspPostInit+0x19c>)
 8005ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006000:	4a49      	ldr	r2, [pc, #292]	; (8006128 <HAL_TIM_MspPostInit+0x19c>)
 8006002:	f043 0302 	orr.w	r3, r3, #2
 8006006:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800600a:	4b47      	ldr	r3, [pc, #284]	; (8006128 <HAL_TIM_MspPostInit+0x19c>)
 800600c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006010:	f003 0302 	and.w	r3, r3, #2
 8006014:	617b      	str	r3, [r7, #20]
 8006016:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8006018:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800601c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800601e:	2302      	movs	r3, #2
 8006020:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006022:	2300      	movs	r3, #0
 8006024:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006026:	2300      	movs	r3, #0
 8006028:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 800602a:	2302      	movs	r3, #2
 800602c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800602e:	f107 031c 	add.w	r3, r7, #28
 8006032:	4619      	mov	r1, r3
 8006034:	483f      	ldr	r0, [pc, #252]	; (8006134 <HAL_TIM_MspPostInit+0x1a8>)
 8006036:	f003 fb27 	bl	8009688 <HAL_GPIO_Init>
}
 800603a:	e06e      	b.n	800611a <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a3d      	ldr	r2, [pc, #244]	; (8006138 <HAL_TIM_MspPostInit+0x1ac>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d11f      	bne.n	8006086 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006046:	4b38      	ldr	r3, [pc, #224]	; (8006128 <HAL_TIM_MspPostInit+0x19c>)
 8006048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800604c:	4a36      	ldr	r2, [pc, #216]	; (8006128 <HAL_TIM_MspPostInit+0x19c>)
 800604e:	f043 0310 	orr.w	r3, r3, #16
 8006052:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006056:	4b34      	ldr	r3, [pc, #208]	; (8006128 <HAL_TIM_MspPostInit+0x19c>)
 8006058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800605c:	f003 0310 	and.w	r3, r3, #16
 8006060:	613b      	str	r3, [r7, #16]
 8006062:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006064:	2360      	movs	r3, #96	; 0x60
 8006066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006068:	2302      	movs	r3, #2
 800606a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800606c:	2300      	movs	r3, #0
 800606e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006070:	2300      	movs	r3, #0
 8006072:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8006074:	2304      	movs	r3, #4
 8006076:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006078:	f107 031c 	add.w	r3, r7, #28
 800607c:	4619      	mov	r1, r3
 800607e:	482b      	ldr	r0, [pc, #172]	; (800612c <HAL_TIM_MspPostInit+0x1a0>)
 8006080:	f003 fb02 	bl	8009688 <HAL_GPIO_Init>
}
 8006084:	e049      	b.n	800611a <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM16)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a2c      	ldr	r2, [pc, #176]	; (800613c <HAL_TIM_MspPostInit+0x1b0>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d120      	bne.n	80060d2 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006090:	4b25      	ldr	r3, [pc, #148]	; (8006128 <HAL_TIM_MspPostInit+0x19c>)
 8006092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006096:	4a24      	ldr	r2, [pc, #144]	; (8006128 <HAL_TIM_MspPostInit+0x19c>)
 8006098:	f043 0302 	orr.w	r3, r3, #2
 800609c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80060a0:	4b21      	ldr	r3, [pc, #132]	; (8006128 <HAL_TIM_MspPostInit+0x19c>)
 80060a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060a6:	f003 0302 	and.w	r3, r3, #2
 80060aa:	60fb      	str	r3, [r7, #12]
 80060ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80060ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060b4:	2302      	movs	r3, #2
 80060b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060b8:	2300      	movs	r3, #0
 80060ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060bc:	2300      	movs	r3, #0
 80060be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80060c0:	2301      	movs	r3, #1
 80060c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060c4:	f107 031c 	add.w	r3, r7, #28
 80060c8:	4619      	mov	r1, r3
 80060ca:	481a      	ldr	r0, [pc, #104]	; (8006134 <HAL_TIM_MspPostInit+0x1a8>)
 80060cc:	f003 fadc 	bl	8009688 <HAL_GPIO_Init>
}
 80060d0:	e023      	b.n	800611a <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM23)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a1a      	ldr	r2, [pc, #104]	; (8006140 <HAL_TIM_MspPostInit+0x1b4>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d11e      	bne.n	800611a <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80060dc:	4b12      	ldr	r3, [pc, #72]	; (8006128 <HAL_TIM_MspPostInit+0x19c>)
 80060de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060e2:	4a11      	ldr	r2, [pc, #68]	; (8006128 <HAL_TIM_MspPostInit+0x19c>)
 80060e4:	f043 0320 	orr.w	r3, r3, #32
 80060e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80060ec:	4b0e      	ldr	r3, [pc, #56]	; (8006128 <HAL_TIM_MspPostInit+0x19c>)
 80060ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060f2:	f003 0320 	and.w	r3, r3, #32
 80060f6:	60bb      	str	r3, [r7, #8]
 80060f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80060fa:	2308      	movs	r3, #8
 80060fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060fe:	2302      	movs	r3, #2
 8006100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006102:	2300      	movs	r3, #0
 8006104:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006106:	2300      	movs	r3, #0
 8006108:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 800610a:	230d      	movs	r3, #13
 800610c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800610e:	f107 031c 	add.w	r3, r7, #28
 8006112:	4619      	mov	r1, r3
 8006114:	480b      	ldr	r0, [pc, #44]	; (8006144 <HAL_TIM_MspPostInit+0x1b8>)
 8006116:	f003 fab7 	bl	8009688 <HAL_GPIO_Init>
}
 800611a:	bf00      	nop
 800611c:	3730      	adds	r7, #48	; 0x30
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	40010000 	.word	0x40010000
 8006128:	58024400 	.word	0x58024400
 800612c:	58021000 	.word	0x58021000
 8006130:	40001800 	.word	0x40001800
 8006134:	58020400 	.word	0x58020400
 8006138:	40014000 	.word	0x40014000
 800613c:	40014400 	.word	0x40014400
 8006140:	4000e000 	.word	0x4000e000
 8006144:	58021400 	.word	0x58021400

08006148 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b0b8      	sub	sp, #224	; 0xe0
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006150:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006154:	2200      	movs	r2, #0
 8006156:	601a      	str	r2, [r3, #0]
 8006158:	605a      	str	r2, [r3, #4]
 800615a:	609a      	str	r2, [r3, #8]
 800615c:	60da      	str	r2, [r3, #12]
 800615e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006160:	f107 0318 	add.w	r3, r7, #24
 8006164:	22b4      	movs	r2, #180	; 0xb4
 8006166:	2100      	movs	r1, #0
 8006168:	4618      	mov	r0, r3
 800616a:	f00b f8af 	bl	80112cc <memset>
  if(huart->Instance==USART3)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a6a      	ldr	r2, [pc, #424]	; (800631c <HAL_UART_MspInit+0x1d4>)
 8006174:	4293      	cmp	r3, r2
 8006176:	f040 80cc 	bne.w	8006312 <HAL_UART_MspInit+0x1ca>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800617a:	2302      	movs	r3, #2
 800617c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800617e:	2300      	movs	r3, #0
 8006180:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006184:	f107 0318 	add.w	r3, r7, #24
 8006188:	4618      	mov	r0, r3
 800618a:	f004 fbb1 	bl	800a8f0 <HAL_RCCEx_PeriphCLKConfig>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d001      	beq.n	8006198 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8006194:	f7fc fbae 	bl	80028f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006198:	4b61      	ldr	r3, [pc, #388]	; (8006320 <HAL_UART_MspInit+0x1d8>)
 800619a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800619e:	4a60      	ldr	r2, [pc, #384]	; (8006320 <HAL_UART_MspInit+0x1d8>)
 80061a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80061a8:	4b5d      	ldr	r3, [pc, #372]	; (8006320 <HAL_UART_MspInit+0x1d8>)
 80061aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80061ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061b2:	617b      	str	r3, [r7, #20]
 80061b4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061b6:	4b5a      	ldr	r3, [pc, #360]	; (8006320 <HAL_UART_MspInit+0x1d8>)
 80061b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061bc:	4a58      	ldr	r2, [pc, #352]	; (8006320 <HAL_UART_MspInit+0x1d8>)
 80061be:	f043 0302 	orr.w	r3, r3, #2
 80061c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80061c6:	4b56      	ldr	r3, [pc, #344]	; (8006320 <HAL_UART_MspInit+0x1d8>)
 80061c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061cc:	f003 0302 	and.w	r3, r3, #2
 80061d0:	613b      	str	r3, [r7, #16]
 80061d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80061d4:	4b52      	ldr	r3, [pc, #328]	; (8006320 <HAL_UART_MspInit+0x1d8>)
 80061d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061da:	4a51      	ldr	r2, [pc, #324]	; (8006320 <HAL_UART_MspInit+0x1d8>)
 80061dc:	f043 0308 	orr.w	r3, r3, #8
 80061e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80061e4:	4b4e      	ldr	r3, [pc, #312]	; (8006320 <HAL_UART_MspInit+0x1d8>)
 80061e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061ea:	f003 0308 	and.w	r3, r3, #8
 80061ee:	60fb      	str	r3, [r7, #12]
 80061f0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80061f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061fa:	2302      	movs	r3, #2
 80061fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006200:	2300      	movs	r3, #0
 8006202:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006206:	2300      	movs	r3, #0
 8006208:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800620c:	2307      	movs	r3, #7
 800620e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006212:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006216:	4619      	mov	r1, r3
 8006218:	4842      	ldr	r0, [pc, #264]	; (8006324 <HAL_UART_MspInit+0x1dc>)
 800621a:	f003 fa35 	bl	8009688 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800621e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006222:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006226:	2302      	movs	r3, #2
 8006228:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800622c:	2300      	movs	r3, #0
 800622e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006232:	2300      	movs	r3, #0
 8006234:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006238:	2307      	movs	r3, #7
 800623a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800623e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006242:	4619      	mov	r1, r3
 8006244:	4838      	ldr	r0, [pc, #224]	; (8006328 <HAL_UART_MspInit+0x1e0>)
 8006246:	f003 fa1f 	bl	8009688 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 800624a:	4b38      	ldr	r3, [pc, #224]	; (800632c <HAL_UART_MspInit+0x1e4>)
 800624c:	4a38      	ldr	r2, [pc, #224]	; (8006330 <HAL_UART_MspInit+0x1e8>)
 800624e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8006250:	4b36      	ldr	r3, [pc, #216]	; (800632c <HAL_UART_MspInit+0x1e4>)
 8006252:	222d      	movs	r2, #45	; 0x2d
 8006254:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006256:	4b35      	ldr	r3, [pc, #212]	; (800632c <HAL_UART_MspInit+0x1e4>)
 8006258:	2200      	movs	r2, #0
 800625a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800625c:	4b33      	ldr	r3, [pc, #204]	; (800632c <HAL_UART_MspInit+0x1e4>)
 800625e:	2200      	movs	r2, #0
 8006260:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006262:	4b32      	ldr	r3, [pc, #200]	; (800632c <HAL_UART_MspInit+0x1e4>)
 8006264:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006268:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800626a:	4b30      	ldr	r3, [pc, #192]	; (800632c <HAL_UART_MspInit+0x1e4>)
 800626c:	2200      	movs	r2, #0
 800626e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006270:	4b2e      	ldr	r3, [pc, #184]	; (800632c <HAL_UART_MspInit+0x1e4>)
 8006272:	2200      	movs	r2, #0
 8006274:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8006276:	4b2d      	ldr	r3, [pc, #180]	; (800632c <HAL_UART_MspInit+0x1e4>)
 8006278:	2200      	movs	r2, #0
 800627a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800627c:	4b2b      	ldr	r3, [pc, #172]	; (800632c <HAL_UART_MspInit+0x1e4>)
 800627e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006282:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006284:	4b29      	ldr	r3, [pc, #164]	; (800632c <HAL_UART_MspInit+0x1e4>)
 8006286:	2200      	movs	r2, #0
 8006288:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800628a:	4828      	ldr	r0, [pc, #160]	; (800632c <HAL_UART_MspInit+0x1e4>)
 800628c:	f000 fbc4 	bl	8006a18 <HAL_DMA_Init>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <HAL_UART_MspInit+0x152>
    {
      Error_Handler();
 8006296:	f7fc fb2d 	bl	80028f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a23      	ldr	r2, [pc, #140]	; (800632c <HAL_UART_MspInit+0x1e4>)
 800629e:	67da      	str	r2, [r3, #124]	; 0x7c
 80062a0:	4a22      	ldr	r2, [pc, #136]	; (800632c <HAL_UART_MspInit+0x1e4>)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80062a6:	4b23      	ldr	r3, [pc, #140]	; (8006334 <HAL_UART_MspInit+0x1ec>)
 80062a8:	4a23      	ldr	r2, [pc, #140]	; (8006338 <HAL_UART_MspInit+0x1f0>)
 80062aa:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80062ac:	4b21      	ldr	r3, [pc, #132]	; (8006334 <HAL_UART_MspInit+0x1ec>)
 80062ae:	222e      	movs	r2, #46	; 0x2e
 80062b0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80062b2:	4b20      	ldr	r3, [pc, #128]	; (8006334 <HAL_UART_MspInit+0x1ec>)
 80062b4:	2240      	movs	r2, #64	; 0x40
 80062b6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80062b8:	4b1e      	ldr	r3, [pc, #120]	; (8006334 <HAL_UART_MspInit+0x1ec>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80062be:	4b1d      	ldr	r3, [pc, #116]	; (8006334 <HAL_UART_MspInit+0x1ec>)
 80062c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062c4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80062c6:	4b1b      	ldr	r3, [pc, #108]	; (8006334 <HAL_UART_MspInit+0x1ec>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80062cc:	4b19      	ldr	r3, [pc, #100]	; (8006334 <HAL_UART_MspInit+0x1ec>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80062d2:	4b18      	ldr	r3, [pc, #96]	; (8006334 <HAL_UART_MspInit+0x1ec>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80062d8:	4b16      	ldr	r3, [pc, #88]	; (8006334 <HAL_UART_MspInit+0x1ec>)
 80062da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80062de:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80062e0:	4b14      	ldr	r3, [pc, #80]	; (8006334 <HAL_UART_MspInit+0x1ec>)
 80062e2:	2200      	movs	r2, #0
 80062e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80062e6:	4813      	ldr	r0, [pc, #76]	; (8006334 <HAL_UART_MspInit+0x1ec>)
 80062e8:	f000 fb96 	bl	8006a18 <HAL_DMA_Init>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <HAL_UART_MspInit+0x1ae>
    {
      Error_Handler();
 80062f2:	f7fc faff 	bl	80028f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a0e      	ldr	r2, [pc, #56]	; (8006334 <HAL_UART_MspInit+0x1ec>)
 80062fa:	679a      	str	r2, [r3, #120]	; 0x78
 80062fc:	4a0d      	ldr	r2, [pc, #52]	; (8006334 <HAL_UART_MspInit+0x1ec>)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006302:	2200      	movs	r2, #0
 8006304:	2100      	movs	r1, #0
 8006306:	2027      	movs	r0, #39	; 0x27
 8006308:	f000 fb51 	bl	80069ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800630c:	2027      	movs	r0, #39	; 0x27
 800630e:	f000 fb68 	bl	80069e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006312:	bf00      	nop
 8006314:	37e0      	adds	r7, #224	; 0xe0
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	40004800 	.word	0x40004800
 8006320:	58024400 	.word	0x58024400
 8006324:	58020400 	.word	0x58020400
 8006328:	58020c00 	.word	0x58020c00
 800632c:	24000d4c 	.word	0x24000d4c
 8006330:	40020010 	.word	0x40020010
 8006334:	24000eac 	.word	0x24000eac
 8006338:	40020028 	.word	0x40020028

0800633c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800633c:	b480      	push	{r7}
 800633e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006340:	e7fe      	b.n	8006340 <NMI_Handler+0x4>

08006342 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006342:	b480      	push	{r7}
 8006344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006346:	e7fe      	b.n	8006346 <HardFault_Handler+0x4>

08006348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006348:	b480      	push	{r7}
 800634a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800634c:	e7fe      	b.n	800634c <MemManage_Handler+0x4>

0800634e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800634e:	b480      	push	{r7}
 8006350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006352:	e7fe      	b.n	8006352 <BusFault_Handler+0x4>

08006354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006354:	b480      	push	{r7}
 8006356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006358:	e7fe      	b.n	8006358 <UsageFault_Handler+0x4>

0800635a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800635a:	b480      	push	{r7}
 800635c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800635e:	bf00      	nop
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006368:	b480      	push	{r7}
 800636a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800636c:	bf00      	nop
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006376:	b480      	push	{r7}
 8006378:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800637a:	bf00      	nop
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006388:	f000 fa16 	bl	80067b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800638c:	bf00      	nop
 800638e:	bd80      	pop	{r7, pc}

08006390 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8006394:	4802      	ldr	r0, [pc, #8]	; (80063a0 <DMA1_Stream0_IRQHandler+0x10>)
 8006396:	f001 fe65 	bl	8008064 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800639a:	bf00      	nop
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	24000d4c 	.word	0x24000d4c

080063a4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80063a8:	4802      	ldr	r0, [pc, #8]	; (80063b4 <DMA1_Stream1_IRQHandler+0x10>)
 80063aa:	f001 fe5b 	bl	8008064 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80063ae:	bf00      	nop
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	24000eac 	.word	0x24000eac

080063b8 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80063bc:	4802      	ldr	r0, [pc, #8]	; (80063c8 <TIM1_BRK_IRQHandler+0x10>)
 80063be:	f006 f939 	bl	800c634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80063c2:	bf00      	nop
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	2400106c 	.word	0x2400106c

080063cc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80063d0:	4802      	ldr	r0, [pc, #8]	; (80063dc <TIM1_UP_IRQHandler+0x10>)
 80063d2:	f006 f92f 	bl	800c634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80063d6:	bf00      	nop
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	bf00      	nop
 80063dc:	2400106c 	.word	0x2400106c

080063e0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80063e4:	4802      	ldr	r0, [pc, #8]	; (80063f0 <TIM1_TRG_COM_IRQHandler+0x10>)
 80063e6:	f006 f925 	bl	800c634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80063ea:	bf00      	nop
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	2400106c 	.word	0x2400106c

080063f4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80063f8:	4802      	ldr	r0, [pc, #8]	; (8006404 <TIM1_CC_IRQHandler+0x10>)
 80063fa:	f006 f91b 	bl	800c634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80063fe:	bf00      	nop
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	2400106c 	.word	0x2400106c

08006408 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800640c:	4802      	ldr	r0, [pc, #8]	; (8006418 <TIM4_IRQHandler+0x10>)
 800640e:	f006 f911 	bl	800c634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8006412:	bf00      	nop
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	24000d00 	.word	0x24000d00

0800641c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006420:	4802      	ldr	r0, [pc, #8]	; (800642c <USART3_IRQHandler+0x10>)
 8006422:	f007 fb2d 	bl	800da80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006426:	bf00      	nop
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	24000dc4 	.word	0x24000dc4

08006430 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8006434:	4803      	ldr	r0, [pc, #12]	; (8006444 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 8006436:	f006 f8fd 	bl	800c634 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800643a:	4803      	ldr	r0, [pc, #12]	; (8006448 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 800643c:	f006 f8fa 	bl	800c634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8006440:	bf00      	nop
 8006442:	bd80      	pop	{r7, pc}
 8006444:	24000cb4 	.word	0x24000cb4
 8006448:	24001158 	.word	0x24001158

0800644c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8006450:	4803      	ldr	r0, [pc, #12]	; (8006460 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8006452:	f006 f8ef 	bl	800c634 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8006456:	4803      	ldr	r0, [pc, #12]	; (8006464 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8006458:	f006 f8ec 	bl	800c634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800645c:	bf00      	nop
 800645e:	bd80      	pop	{r7, pc}
 8006460:	24000cb4 	.word	0x24000cb4
 8006464:	24000fc8 	.word	0x24000fc8

08006468 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800646c:	4802      	ldr	r0, [pc, #8]	; (8006478 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800646e:	f006 f8e1 	bl	800c634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8006472:	bf00      	nop
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	24000cb4 	.word	0x24000cb4

0800647c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8006480:	4802      	ldr	r0, [pc, #8]	; (800648c <TIM8_CC_IRQHandler+0x10>)
 8006482:	f006 f8d7 	bl	800c634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8006486:	bf00      	nop
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	24000cb4 	.word	0x24000cb4

08006490 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006494:	4802      	ldr	r0, [pc, #8]	; (80064a0 <TIM6_DAC_IRQHandler+0x10>)
 8006496:	f006 f8cd 	bl	800c634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800649a:	bf00      	nop
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	24001020 	.word	0x24001020

080064a4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80064a8:	4802      	ldr	r0, [pc, #8]	; (80064b4 <TIM7_IRQHandler+0x10>)
 80064aa:	f006 f8c3 	bl	800c634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80064ae:	bf00      	nop
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	240011fc 	.word	0x240011fc

080064b8 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80064bc:	4802      	ldr	r0, [pc, #8]	; (80064c8 <TIM15_IRQHandler+0x10>)
 80064be:	f006 f8b9 	bl	800c634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80064c2:	bf00      	nop
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	24000e60 	.word	0x24000e60

080064cc <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80064d0:	4802      	ldr	r0, [pc, #8]	; (80064dc <TIM16_IRQHandler+0x10>)
 80064d2:	f006 f8af 	bl	800c634 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80064d6:	bf00      	nop
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	240011b0 	.word	0x240011b0

080064e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80064e0:	b480      	push	{r7}
 80064e2:	af00      	add	r7, sp, #0
	return 1;
 80064e4:	2301      	movs	r3, #1
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <_kill>:

int _kill(int pid, int sig)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80064fa:	f00a feaf 	bl	801125c <__errno>
 80064fe:	4603      	mov	r3, r0
 8006500:	2216      	movs	r2, #22
 8006502:	601a      	str	r2, [r3, #0]
	return -1;
 8006504:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006508:	4618      	mov	r0, r3
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <_exit>:

void _exit (int status)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006518:	f04f 31ff 	mov.w	r1, #4294967295
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7ff ffe7 	bl	80064f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006522:	e7fe      	b.n	8006522 <_exit+0x12>

08006524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b086      	sub	sp, #24
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800652c:	4a14      	ldr	r2, [pc, #80]	; (8006580 <_sbrk+0x5c>)
 800652e:	4b15      	ldr	r3, [pc, #84]	; (8006584 <_sbrk+0x60>)
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006538:	4b13      	ldr	r3, [pc, #76]	; (8006588 <_sbrk+0x64>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d102      	bne.n	8006546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006540:	4b11      	ldr	r3, [pc, #68]	; (8006588 <_sbrk+0x64>)
 8006542:	4a12      	ldr	r2, [pc, #72]	; (800658c <_sbrk+0x68>)
 8006544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006546:	4b10      	ldr	r3, [pc, #64]	; (8006588 <_sbrk+0x64>)
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4413      	add	r3, r2
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	429a      	cmp	r2, r3
 8006552:	d207      	bcs.n	8006564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006554:	f00a fe82 	bl	801125c <__errno>
 8006558:	4603      	mov	r3, r0
 800655a:	220c      	movs	r2, #12
 800655c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800655e:	f04f 33ff 	mov.w	r3, #4294967295
 8006562:	e009      	b.n	8006578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006564:	4b08      	ldr	r3, [pc, #32]	; (8006588 <_sbrk+0x64>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800656a:	4b07      	ldr	r3, [pc, #28]	; (8006588 <_sbrk+0x64>)
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4413      	add	r3, r2
 8006572:	4a05      	ldr	r2, [pc, #20]	; (8006588 <_sbrk+0x64>)
 8006574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006576:	68fb      	ldr	r3, [r7, #12]
}
 8006578:	4618      	mov	r0, r3
 800657a:	3718      	adds	r7, #24
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	24050000 	.word	0x24050000
 8006584:	00000400 	.word	0x00000400
 8006588:	24000ca0 	.word	0x24000ca0
 800658c:	24001260 	.word	0x24001260

08006590 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006590:	b480      	push	{r7}
 8006592:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006594:	4b32      	ldr	r3, [pc, #200]	; (8006660 <SystemInit+0xd0>)
 8006596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800659a:	4a31      	ldr	r2, [pc, #196]	; (8006660 <SystemInit+0xd0>)
 800659c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80065a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80065a4:	4b2f      	ldr	r3, [pc, #188]	; (8006664 <SystemInit+0xd4>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 030f 	and.w	r3, r3, #15
 80065ac:	2b06      	cmp	r3, #6
 80065ae:	d807      	bhi.n	80065c0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80065b0:	4b2c      	ldr	r3, [pc, #176]	; (8006664 <SystemInit+0xd4>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f023 030f 	bic.w	r3, r3, #15
 80065b8:	4a2a      	ldr	r2, [pc, #168]	; (8006664 <SystemInit+0xd4>)
 80065ba:	f043 0307 	orr.w	r3, r3, #7
 80065be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80065c0:	4b29      	ldr	r3, [pc, #164]	; (8006668 <SystemInit+0xd8>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a28      	ldr	r2, [pc, #160]	; (8006668 <SystemInit+0xd8>)
 80065c6:	f043 0301 	orr.w	r3, r3, #1
 80065ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80065cc:	4b26      	ldr	r3, [pc, #152]	; (8006668 <SystemInit+0xd8>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80065d2:	4b25      	ldr	r3, [pc, #148]	; (8006668 <SystemInit+0xd8>)
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	4924      	ldr	r1, [pc, #144]	; (8006668 <SystemInit+0xd8>)
 80065d8:	4b24      	ldr	r3, [pc, #144]	; (800666c <SystemInit+0xdc>)
 80065da:	4013      	ands	r3, r2
 80065dc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80065de:	4b21      	ldr	r3, [pc, #132]	; (8006664 <SystemInit+0xd4>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0308 	and.w	r3, r3, #8
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d007      	beq.n	80065fa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80065ea:	4b1e      	ldr	r3, [pc, #120]	; (8006664 <SystemInit+0xd4>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f023 030f 	bic.w	r3, r3, #15
 80065f2:	4a1c      	ldr	r2, [pc, #112]	; (8006664 <SystemInit+0xd4>)
 80065f4:	f043 0307 	orr.w	r3, r3, #7
 80065f8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80065fa:	4b1b      	ldr	r3, [pc, #108]	; (8006668 <SystemInit+0xd8>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8006600:	4b19      	ldr	r3, [pc, #100]	; (8006668 <SystemInit+0xd8>)
 8006602:	2200      	movs	r2, #0
 8006604:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8006606:	4b18      	ldr	r3, [pc, #96]	; (8006668 <SystemInit+0xd8>)
 8006608:	2200      	movs	r2, #0
 800660a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800660c:	4b16      	ldr	r3, [pc, #88]	; (8006668 <SystemInit+0xd8>)
 800660e:	4a18      	ldr	r2, [pc, #96]	; (8006670 <SystemInit+0xe0>)
 8006610:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8006612:	4b15      	ldr	r3, [pc, #84]	; (8006668 <SystemInit+0xd8>)
 8006614:	4a17      	ldr	r2, [pc, #92]	; (8006674 <SystemInit+0xe4>)
 8006616:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006618:	4b13      	ldr	r3, [pc, #76]	; (8006668 <SystemInit+0xd8>)
 800661a:	4a17      	ldr	r2, [pc, #92]	; (8006678 <SystemInit+0xe8>)
 800661c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800661e:	4b12      	ldr	r3, [pc, #72]	; (8006668 <SystemInit+0xd8>)
 8006620:	2200      	movs	r2, #0
 8006622:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006624:	4b10      	ldr	r3, [pc, #64]	; (8006668 <SystemInit+0xd8>)
 8006626:	4a14      	ldr	r2, [pc, #80]	; (8006678 <SystemInit+0xe8>)
 8006628:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800662a:	4b0f      	ldr	r3, [pc, #60]	; (8006668 <SystemInit+0xd8>)
 800662c:	2200      	movs	r2, #0
 800662e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8006630:	4b0d      	ldr	r3, [pc, #52]	; (8006668 <SystemInit+0xd8>)
 8006632:	4a11      	ldr	r2, [pc, #68]	; (8006678 <SystemInit+0xe8>)
 8006634:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006636:	4b0c      	ldr	r3, [pc, #48]	; (8006668 <SystemInit+0xd8>)
 8006638:	2200      	movs	r2, #0
 800663a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800663c:	4b0a      	ldr	r3, [pc, #40]	; (8006668 <SystemInit+0xd8>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a09      	ldr	r2, [pc, #36]	; (8006668 <SystemInit+0xd8>)
 8006642:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006646:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006648:	4b07      	ldr	r3, [pc, #28]	; (8006668 <SystemInit+0xd8>)
 800664a:	2200      	movs	r2, #0
 800664c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800664e:	4b0b      	ldr	r3, [pc, #44]	; (800667c <SystemInit+0xec>)
 8006650:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8006654:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8006656:	bf00      	nop
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr
 8006660:	e000ed00 	.word	0xe000ed00
 8006664:	52002000 	.word	0x52002000
 8006668:	58024400 	.word	0x58024400
 800666c:	eaf6ed7f 	.word	0xeaf6ed7f
 8006670:	02020200 	.word	0x02020200
 8006674:	01ff0000 	.word	0x01ff0000
 8006678:	01010280 	.word	0x01010280
 800667c:	52004000 	.word	0x52004000

08006680 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8006680:	f8df d034 	ldr.w	sp, [pc, #52]	; 80066b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006684:	f7ff ff84 	bl	8006590 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006688:	480c      	ldr	r0, [pc, #48]	; (80066bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800668a:	490d      	ldr	r1, [pc, #52]	; (80066c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800668c:	4a0d      	ldr	r2, [pc, #52]	; (80066c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800668e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006690:	e002      	b.n	8006698 <LoopCopyDataInit>

08006692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006696:	3304      	adds	r3, #4

08006698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800669a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800669c:	d3f9      	bcc.n	8006692 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800669e:	4a0a      	ldr	r2, [pc, #40]	; (80066c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80066a0:	4c0a      	ldr	r4, [pc, #40]	; (80066cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80066a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80066a4:	e001      	b.n	80066aa <LoopFillZerobss>

080066a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80066a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80066a8:	3204      	adds	r2, #4

080066aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80066aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80066ac:	d3fb      	bcc.n	80066a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80066ae:	f00a fddb 	bl	8011268 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80066b2:	f7fa f891 	bl	80007d8 <main>
  bx  lr
 80066b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80066b8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80066bc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80066c0:	2400010c 	.word	0x2400010c
  ldr r2, =_sidata
 80066c4:	080133a4 	.word	0x080133a4
  ldr r2, =_sbss
 80066c8:	24000110 	.word	0x24000110
  ldr r4, =_ebss
 80066cc:	2400125c 	.word	0x2400125c

080066d0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80066d0:	e7fe      	b.n	80066d0 <ADC3_IRQHandler>
	...

080066d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80066da:	2003      	movs	r0, #3
 80066dc:	f000 f95c 	bl	8006998 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80066e0:	f003 ff30 	bl	800a544 <HAL_RCC_GetSysClockFreq>
 80066e4:	4602      	mov	r2, r0
 80066e6:	4b15      	ldr	r3, [pc, #84]	; (800673c <HAL_Init+0x68>)
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	0a1b      	lsrs	r3, r3, #8
 80066ec:	f003 030f 	and.w	r3, r3, #15
 80066f0:	4913      	ldr	r1, [pc, #76]	; (8006740 <HAL_Init+0x6c>)
 80066f2:	5ccb      	ldrb	r3, [r1, r3]
 80066f4:	f003 031f 	and.w	r3, r3, #31
 80066f8:	fa22 f303 	lsr.w	r3, r2, r3
 80066fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80066fe:	4b0f      	ldr	r3, [pc, #60]	; (800673c <HAL_Init+0x68>)
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	f003 030f 	and.w	r3, r3, #15
 8006706:	4a0e      	ldr	r2, [pc, #56]	; (8006740 <HAL_Init+0x6c>)
 8006708:	5cd3      	ldrb	r3, [r2, r3]
 800670a:	f003 031f 	and.w	r3, r3, #31
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	fa22 f303 	lsr.w	r3, r2, r3
 8006714:	4a0b      	ldr	r2, [pc, #44]	; (8006744 <HAL_Init+0x70>)
 8006716:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006718:	4a0b      	ldr	r2, [pc, #44]	; (8006748 <HAL_Init+0x74>)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800671e:	200f      	movs	r0, #15
 8006720:	f000 f814 	bl	800674c <HAL_InitTick>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e002      	b.n	8006734 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800672e:	f7ff f9ab 	bl	8005a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006732:	2300      	movs	r3, #0
}
 8006734:	4618      	mov	r0, r3
 8006736:	3708      	adds	r7, #8
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	58024400 	.word	0x58024400
 8006740:	08011874 	.word	0x08011874
 8006744:	24000094 	.word	0x24000094
 8006748:	24000090 	.word	0x24000090

0800674c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006754:	4b15      	ldr	r3, [pc, #84]	; (80067ac <HAL_InitTick+0x60>)
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e021      	b.n	80067a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006760:	4b13      	ldr	r3, [pc, #76]	; (80067b0 <HAL_InitTick+0x64>)
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	4b11      	ldr	r3, [pc, #68]	; (80067ac <HAL_InitTick+0x60>)
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	4619      	mov	r1, r3
 800676a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800676e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006772:	fbb2 f3f3 	udiv	r3, r2, r3
 8006776:	4618      	mov	r0, r3
 8006778:	f000 f941 	bl	80069fe <HAL_SYSTICK_Config>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e00e      	b.n	80067a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2b0f      	cmp	r3, #15
 800678a:	d80a      	bhi.n	80067a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800678c:	2200      	movs	r2, #0
 800678e:	6879      	ldr	r1, [r7, #4]
 8006790:	f04f 30ff 	mov.w	r0, #4294967295
 8006794:	f000 f90b 	bl	80069ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006798:	4a06      	ldr	r2, [pc, #24]	; (80067b4 <HAL_InitTick+0x68>)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	e000      	b.n	80067a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3708      	adds	r7, #8
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	2400009c 	.word	0x2400009c
 80067b0:	24000090 	.word	0x24000090
 80067b4:	24000098 	.word	0x24000098

080067b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80067b8:	b480      	push	{r7}
 80067ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80067bc:	4b06      	ldr	r3, [pc, #24]	; (80067d8 <HAL_IncTick+0x20>)
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	461a      	mov	r2, r3
 80067c2:	4b06      	ldr	r3, [pc, #24]	; (80067dc <HAL_IncTick+0x24>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4413      	add	r3, r2
 80067c8:	4a04      	ldr	r2, [pc, #16]	; (80067dc <HAL_IncTick+0x24>)
 80067ca:	6013      	str	r3, [r2, #0]
}
 80067cc:	bf00      	nop
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	2400009c 	.word	0x2400009c
 80067dc:	24001248 	.word	0x24001248

080067e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80067e0:	b480      	push	{r7}
 80067e2:	af00      	add	r7, sp, #0
  return uwTick;
 80067e4:	4b03      	ldr	r3, [pc, #12]	; (80067f4 <HAL_GetTick+0x14>)
 80067e6:	681b      	ldr	r3, [r3, #0]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	24001248 	.word	0x24001248

080067f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f003 0307 	and.w	r3, r3, #7
 8006806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006808:	4b0b      	ldr	r3, [pc, #44]	; (8006838 <__NVIC_SetPriorityGrouping+0x40>)
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006814:	4013      	ands	r3, r2
 8006816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006820:	4b06      	ldr	r3, [pc, #24]	; (800683c <__NVIC_SetPriorityGrouping+0x44>)
 8006822:	4313      	orrs	r3, r2
 8006824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006826:	4a04      	ldr	r2, [pc, #16]	; (8006838 <__NVIC_SetPriorityGrouping+0x40>)
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	60d3      	str	r3, [r2, #12]
}
 800682c:	bf00      	nop
 800682e:	3714      	adds	r7, #20
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr
 8006838:	e000ed00 	.word	0xe000ed00
 800683c:	05fa0000 	.word	0x05fa0000

08006840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006840:	b480      	push	{r7}
 8006842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006844:	4b04      	ldr	r3, [pc, #16]	; (8006858 <__NVIC_GetPriorityGrouping+0x18>)
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	0a1b      	lsrs	r3, r3, #8
 800684a:	f003 0307 	and.w	r3, r3, #7
}
 800684e:	4618      	mov	r0, r3
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr
 8006858:	e000ed00 	.word	0xe000ed00

0800685c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	4603      	mov	r3, r0
 8006864:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800686a:	2b00      	cmp	r3, #0
 800686c:	db0b      	blt.n	8006886 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800686e:	88fb      	ldrh	r3, [r7, #6]
 8006870:	f003 021f 	and.w	r2, r3, #31
 8006874:	4907      	ldr	r1, [pc, #28]	; (8006894 <__NVIC_EnableIRQ+0x38>)
 8006876:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800687a:	095b      	lsrs	r3, r3, #5
 800687c:	2001      	movs	r0, #1
 800687e:	fa00 f202 	lsl.w	r2, r0, r2
 8006882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006886:	bf00      	nop
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	e000e100 	.word	0xe000e100

08006898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	4603      	mov	r3, r0
 80068a0:	6039      	str	r1, [r7, #0]
 80068a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80068a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	db0a      	blt.n	80068c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	b2da      	uxtb	r2, r3
 80068b0:	490c      	ldr	r1, [pc, #48]	; (80068e4 <__NVIC_SetPriority+0x4c>)
 80068b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068b6:	0112      	lsls	r2, r2, #4
 80068b8:	b2d2      	uxtb	r2, r2
 80068ba:	440b      	add	r3, r1
 80068bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80068c0:	e00a      	b.n	80068d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	b2da      	uxtb	r2, r3
 80068c6:	4908      	ldr	r1, [pc, #32]	; (80068e8 <__NVIC_SetPriority+0x50>)
 80068c8:	88fb      	ldrh	r3, [r7, #6]
 80068ca:	f003 030f 	and.w	r3, r3, #15
 80068ce:	3b04      	subs	r3, #4
 80068d0:	0112      	lsls	r2, r2, #4
 80068d2:	b2d2      	uxtb	r2, r2
 80068d4:	440b      	add	r3, r1
 80068d6:	761a      	strb	r2, [r3, #24]
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr
 80068e4:	e000e100 	.word	0xe000e100
 80068e8:	e000ed00 	.word	0xe000ed00

080068ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b089      	sub	sp, #36	; 0x24
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f003 0307 	and.w	r3, r3, #7
 80068fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	f1c3 0307 	rsb	r3, r3, #7
 8006906:	2b04      	cmp	r3, #4
 8006908:	bf28      	it	cs
 800690a:	2304      	movcs	r3, #4
 800690c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	3304      	adds	r3, #4
 8006912:	2b06      	cmp	r3, #6
 8006914:	d902      	bls.n	800691c <NVIC_EncodePriority+0x30>
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	3b03      	subs	r3, #3
 800691a:	e000      	b.n	800691e <NVIC_EncodePriority+0x32>
 800691c:	2300      	movs	r3, #0
 800691e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006920:	f04f 32ff 	mov.w	r2, #4294967295
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	fa02 f303 	lsl.w	r3, r2, r3
 800692a:	43da      	mvns	r2, r3
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	401a      	ands	r2, r3
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006934:	f04f 31ff 	mov.w	r1, #4294967295
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	fa01 f303 	lsl.w	r3, r1, r3
 800693e:	43d9      	mvns	r1, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006944:	4313      	orrs	r3, r2
         );
}
 8006946:	4618      	mov	r0, r3
 8006948:	3724      	adds	r7, #36	; 0x24
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr
	...

08006954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	3b01      	subs	r3, #1
 8006960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006964:	d301      	bcc.n	800696a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006966:	2301      	movs	r3, #1
 8006968:	e00f      	b.n	800698a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800696a:	4a0a      	ldr	r2, [pc, #40]	; (8006994 <SysTick_Config+0x40>)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	3b01      	subs	r3, #1
 8006970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006972:	210f      	movs	r1, #15
 8006974:	f04f 30ff 	mov.w	r0, #4294967295
 8006978:	f7ff ff8e 	bl	8006898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800697c:	4b05      	ldr	r3, [pc, #20]	; (8006994 <SysTick_Config+0x40>)
 800697e:	2200      	movs	r2, #0
 8006980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006982:	4b04      	ldr	r3, [pc, #16]	; (8006994 <SysTick_Config+0x40>)
 8006984:	2207      	movs	r2, #7
 8006986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3708      	adds	r7, #8
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	e000e010 	.word	0xe000e010

08006998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f7ff ff29 	bl	80067f8 <__NVIC_SetPriorityGrouping>
}
 80069a6:	bf00      	nop
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b086      	sub	sp, #24
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	4603      	mov	r3, r0
 80069b6:	60b9      	str	r1, [r7, #8]
 80069b8:	607a      	str	r2, [r7, #4]
 80069ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80069bc:	f7ff ff40 	bl	8006840 <__NVIC_GetPriorityGrouping>
 80069c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	68b9      	ldr	r1, [r7, #8]
 80069c6:	6978      	ldr	r0, [r7, #20]
 80069c8:	f7ff ff90 	bl	80068ec <NVIC_EncodePriority>
 80069cc:	4602      	mov	r2, r0
 80069ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80069d2:	4611      	mov	r1, r2
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7ff ff5f 	bl	8006898 <__NVIC_SetPriority>
}
 80069da:	bf00      	nop
 80069dc:	3718      	adds	r7, #24
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b082      	sub	sp, #8
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	4603      	mov	r3, r0
 80069ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80069ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7ff ff33 	bl	800685c <__NVIC_EnableIRQ>
}
 80069f6:	bf00      	nop
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b082      	sub	sp, #8
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7ff ffa4 	bl	8006954 <SysTick_Config>
 8006a0c:	4603      	mov	r3, r0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3708      	adds	r7, #8
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
	...

08006a18 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006a20:	f7ff fede 	bl	80067e0 <HAL_GetTick>
 8006a24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d101      	bne.n	8006a30 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e314      	b.n	800705a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a66      	ldr	r2, [pc, #408]	; (8006bd0 <HAL_DMA_Init+0x1b8>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d04a      	beq.n	8006ad0 <HAL_DMA_Init+0xb8>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a65      	ldr	r2, [pc, #404]	; (8006bd4 <HAL_DMA_Init+0x1bc>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d045      	beq.n	8006ad0 <HAL_DMA_Init+0xb8>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a63      	ldr	r2, [pc, #396]	; (8006bd8 <HAL_DMA_Init+0x1c0>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d040      	beq.n	8006ad0 <HAL_DMA_Init+0xb8>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a62      	ldr	r2, [pc, #392]	; (8006bdc <HAL_DMA_Init+0x1c4>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d03b      	beq.n	8006ad0 <HAL_DMA_Init+0xb8>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a60      	ldr	r2, [pc, #384]	; (8006be0 <HAL_DMA_Init+0x1c8>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d036      	beq.n	8006ad0 <HAL_DMA_Init+0xb8>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a5f      	ldr	r2, [pc, #380]	; (8006be4 <HAL_DMA_Init+0x1cc>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d031      	beq.n	8006ad0 <HAL_DMA_Init+0xb8>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a5d      	ldr	r2, [pc, #372]	; (8006be8 <HAL_DMA_Init+0x1d0>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d02c      	beq.n	8006ad0 <HAL_DMA_Init+0xb8>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a5c      	ldr	r2, [pc, #368]	; (8006bec <HAL_DMA_Init+0x1d4>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d027      	beq.n	8006ad0 <HAL_DMA_Init+0xb8>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a5a      	ldr	r2, [pc, #360]	; (8006bf0 <HAL_DMA_Init+0x1d8>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d022      	beq.n	8006ad0 <HAL_DMA_Init+0xb8>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a59      	ldr	r2, [pc, #356]	; (8006bf4 <HAL_DMA_Init+0x1dc>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d01d      	beq.n	8006ad0 <HAL_DMA_Init+0xb8>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a57      	ldr	r2, [pc, #348]	; (8006bf8 <HAL_DMA_Init+0x1e0>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d018      	beq.n	8006ad0 <HAL_DMA_Init+0xb8>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a56      	ldr	r2, [pc, #344]	; (8006bfc <HAL_DMA_Init+0x1e4>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d013      	beq.n	8006ad0 <HAL_DMA_Init+0xb8>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a54      	ldr	r2, [pc, #336]	; (8006c00 <HAL_DMA_Init+0x1e8>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d00e      	beq.n	8006ad0 <HAL_DMA_Init+0xb8>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a53      	ldr	r2, [pc, #332]	; (8006c04 <HAL_DMA_Init+0x1ec>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d009      	beq.n	8006ad0 <HAL_DMA_Init+0xb8>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a51      	ldr	r2, [pc, #324]	; (8006c08 <HAL_DMA_Init+0x1f0>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d004      	beq.n	8006ad0 <HAL_DMA_Init+0xb8>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a50      	ldr	r2, [pc, #320]	; (8006c0c <HAL_DMA_Init+0x1f4>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d101      	bne.n	8006ad4 <HAL_DMA_Init+0xbc>
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e000      	b.n	8006ad6 <HAL_DMA_Init+0xbe>
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f000 813c 	beq.w	8006d54 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a37      	ldr	r2, [pc, #220]	; (8006bd0 <HAL_DMA_Init+0x1b8>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d04a      	beq.n	8006b8c <HAL_DMA_Init+0x174>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a36      	ldr	r2, [pc, #216]	; (8006bd4 <HAL_DMA_Init+0x1bc>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d045      	beq.n	8006b8c <HAL_DMA_Init+0x174>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a34      	ldr	r2, [pc, #208]	; (8006bd8 <HAL_DMA_Init+0x1c0>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d040      	beq.n	8006b8c <HAL_DMA_Init+0x174>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a33      	ldr	r2, [pc, #204]	; (8006bdc <HAL_DMA_Init+0x1c4>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d03b      	beq.n	8006b8c <HAL_DMA_Init+0x174>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a31      	ldr	r2, [pc, #196]	; (8006be0 <HAL_DMA_Init+0x1c8>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d036      	beq.n	8006b8c <HAL_DMA_Init+0x174>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a30      	ldr	r2, [pc, #192]	; (8006be4 <HAL_DMA_Init+0x1cc>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d031      	beq.n	8006b8c <HAL_DMA_Init+0x174>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a2e      	ldr	r2, [pc, #184]	; (8006be8 <HAL_DMA_Init+0x1d0>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d02c      	beq.n	8006b8c <HAL_DMA_Init+0x174>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a2d      	ldr	r2, [pc, #180]	; (8006bec <HAL_DMA_Init+0x1d4>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d027      	beq.n	8006b8c <HAL_DMA_Init+0x174>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a2b      	ldr	r2, [pc, #172]	; (8006bf0 <HAL_DMA_Init+0x1d8>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d022      	beq.n	8006b8c <HAL_DMA_Init+0x174>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a2a      	ldr	r2, [pc, #168]	; (8006bf4 <HAL_DMA_Init+0x1dc>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d01d      	beq.n	8006b8c <HAL_DMA_Init+0x174>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a28      	ldr	r2, [pc, #160]	; (8006bf8 <HAL_DMA_Init+0x1e0>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d018      	beq.n	8006b8c <HAL_DMA_Init+0x174>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a27      	ldr	r2, [pc, #156]	; (8006bfc <HAL_DMA_Init+0x1e4>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d013      	beq.n	8006b8c <HAL_DMA_Init+0x174>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a25      	ldr	r2, [pc, #148]	; (8006c00 <HAL_DMA_Init+0x1e8>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d00e      	beq.n	8006b8c <HAL_DMA_Init+0x174>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a24      	ldr	r2, [pc, #144]	; (8006c04 <HAL_DMA_Init+0x1ec>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d009      	beq.n	8006b8c <HAL_DMA_Init+0x174>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a22      	ldr	r2, [pc, #136]	; (8006c08 <HAL_DMA_Init+0x1f0>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d004      	beq.n	8006b8c <HAL_DMA_Init+0x174>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a21      	ldr	r2, [pc, #132]	; (8006c0c <HAL_DMA_Init+0x1f4>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d108      	bne.n	8006b9e <HAL_DMA_Init+0x186>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f022 0201 	bic.w	r2, r2, #1
 8006b9a:	601a      	str	r2, [r3, #0]
 8006b9c:	e007      	b.n	8006bae <HAL_DMA_Init+0x196>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f022 0201 	bic.w	r2, r2, #1
 8006bac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006bae:	e02f      	b.n	8006c10 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006bb0:	f7ff fe16 	bl	80067e0 <HAL_GetTick>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	1ad3      	subs	r3, r2, r3
 8006bba:	2b05      	cmp	r3, #5
 8006bbc:	d928      	bls.n	8006c10 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2220      	movs	r2, #32
 8006bc2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2203      	movs	r2, #3
 8006bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e244      	b.n	800705a <HAL_DMA_Init+0x642>
 8006bd0:	40020010 	.word	0x40020010
 8006bd4:	40020028 	.word	0x40020028
 8006bd8:	40020040 	.word	0x40020040
 8006bdc:	40020058 	.word	0x40020058
 8006be0:	40020070 	.word	0x40020070
 8006be4:	40020088 	.word	0x40020088
 8006be8:	400200a0 	.word	0x400200a0
 8006bec:	400200b8 	.word	0x400200b8
 8006bf0:	40020410 	.word	0x40020410
 8006bf4:	40020428 	.word	0x40020428
 8006bf8:	40020440 	.word	0x40020440
 8006bfc:	40020458 	.word	0x40020458
 8006c00:	40020470 	.word	0x40020470
 8006c04:	40020488 	.word	0x40020488
 8006c08:	400204a0 	.word	0x400204a0
 8006c0c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0301 	and.w	r3, r3, #1
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1c8      	bne.n	8006bb0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	4b84      	ldr	r3, [pc, #528]	; (8006e3c <HAL_DMA_Init+0x424>)
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006c36:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c42:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c4e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a1b      	ldr	r3, [r3, #32]
 8006c54:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006c56:	697a      	ldr	r2, [r7, #20]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c60:	2b04      	cmp	r3, #4
 8006c62:	d107      	bne.n	8006c74 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	2b28      	cmp	r3, #40	; 0x28
 8006c7a:	d903      	bls.n	8006c84 <HAL_DMA_Init+0x26c>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	2b2e      	cmp	r3, #46	; 0x2e
 8006c82:	d91f      	bls.n	8006cc4 <HAL_DMA_Init+0x2ac>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	2b3e      	cmp	r3, #62	; 0x3e
 8006c8a:	d903      	bls.n	8006c94 <HAL_DMA_Init+0x27c>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	2b42      	cmp	r3, #66	; 0x42
 8006c92:	d917      	bls.n	8006cc4 <HAL_DMA_Init+0x2ac>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	2b46      	cmp	r3, #70	; 0x46
 8006c9a:	d903      	bls.n	8006ca4 <HAL_DMA_Init+0x28c>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	2b48      	cmp	r3, #72	; 0x48
 8006ca2:	d90f      	bls.n	8006cc4 <HAL_DMA_Init+0x2ac>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	2b4e      	cmp	r3, #78	; 0x4e
 8006caa:	d903      	bls.n	8006cb4 <HAL_DMA_Init+0x29c>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	2b52      	cmp	r3, #82	; 0x52
 8006cb2:	d907      	bls.n	8006cc4 <HAL_DMA_Init+0x2ac>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	2b73      	cmp	r3, #115	; 0x73
 8006cba:	d905      	bls.n	8006cc8 <HAL_DMA_Init+0x2b0>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	2b77      	cmp	r3, #119	; 0x77
 8006cc2:	d801      	bhi.n	8006cc8 <HAL_DMA_Init+0x2b0>
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e000      	b.n	8006cca <HAL_DMA_Init+0x2b2>
 8006cc8:	2300      	movs	r3, #0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d003      	beq.n	8006cd6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cd4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	f023 0307 	bic.w	r3, r3, #7
 8006cec:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfc:	2b04      	cmp	r3, #4
 8006cfe:	d117      	bne.n	8006d30 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00e      	beq.n	8006d30 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f002 fb2e 	bl	8009374 <DMA_CheckFifoParam>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d008      	beq.n	8006d30 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2240      	movs	r2, #64	; 0x40
 8006d22:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e194      	b.n	800705a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	697a      	ldr	r2, [r7, #20]
 8006d36:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f002 fa69 	bl	8009210 <DMA_CalcBaseAndBitshift>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d46:	f003 031f 	and.w	r3, r3, #31
 8006d4a:	223f      	movs	r2, #63	; 0x3f
 8006d4c:	409a      	lsls	r2, r3
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	609a      	str	r2, [r3, #8]
 8006d52:	e0ca      	b.n	8006eea <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a39      	ldr	r2, [pc, #228]	; (8006e40 <HAL_DMA_Init+0x428>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d022      	beq.n	8006da4 <HAL_DMA_Init+0x38c>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a38      	ldr	r2, [pc, #224]	; (8006e44 <HAL_DMA_Init+0x42c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d01d      	beq.n	8006da4 <HAL_DMA_Init+0x38c>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a36      	ldr	r2, [pc, #216]	; (8006e48 <HAL_DMA_Init+0x430>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d018      	beq.n	8006da4 <HAL_DMA_Init+0x38c>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a35      	ldr	r2, [pc, #212]	; (8006e4c <HAL_DMA_Init+0x434>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d013      	beq.n	8006da4 <HAL_DMA_Init+0x38c>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a33      	ldr	r2, [pc, #204]	; (8006e50 <HAL_DMA_Init+0x438>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d00e      	beq.n	8006da4 <HAL_DMA_Init+0x38c>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a32      	ldr	r2, [pc, #200]	; (8006e54 <HAL_DMA_Init+0x43c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d009      	beq.n	8006da4 <HAL_DMA_Init+0x38c>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a30      	ldr	r2, [pc, #192]	; (8006e58 <HAL_DMA_Init+0x440>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d004      	beq.n	8006da4 <HAL_DMA_Init+0x38c>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a2f      	ldr	r2, [pc, #188]	; (8006e5c <HAL_DMA_Init+0x444>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d101      	bne.n	8006da8 <HAL_DMA_Init+0x390>
 8006da4:	2301      	movs	r3, #1
 8006da6:	e000      	b.n	8006daa <HAL_DMA_Init+0x392>
 8006da8:	2300      	movs	r3, #0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f000 8094 	beq.w	8006ed8 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a22      	ldr	r2, [pc, #136]	; (8006e40 <HAL_DMA_Init+0x428>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d021      	beq.n	8006dfe <HAL_DMA_Init+0x3e6>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a21      	ldr	r2, [pc, #132]	; (8006e44 <HAL_DMA_Init+0x42c>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d01c      	beq.n	8006dfe <HAL_DMA_Init+0x3e6>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a1f      	ldr	r2, [pc, #124]	; (8006e48 <HAL_DMA_Init+0x430>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d017      	beq.n	8006dfe <HAL_DMA_Init+0x3e6>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a1e      	ldr	r2, [pc, #120]	; (8006e4c <HAL_DMA_Init+0x434>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d012      	beq.n	8006dfe <HAL_DMA_Init+0x3e6>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a1c      	ldr	r2, [pc, #112]	; (8006e50 <HAL_DMA_Init+0x438>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d00d      	beq.n	8006dfe <HAL_DMA_Init+0x3e6>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a1b      	ldr	r2, [pc, #108]	; (8006e54 <HAL_DMA_Init+0x43c>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d008      	beq.n	8006dfe <HAL_DMA_Init+0x3e6>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a19      	ldr	r2, [pc, #100]	; (8006e58 <HAL_DMA_Init+0x440>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d003      	beq.n	8006dfe <HAL_DMA_Init+0x3e6>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a18      	ldr	r2, [pc, #96]	; (8006e5c <HAL_DMA_Init+0x444>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2202      	movs	r2, #2
 8006e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006e18:	697a      	ldr	r2, [r7, #20]
 8006e1a:	4b11      	ldr	r3, [pc, #68]	; (8006e60 <HAL_DMA_Init+0x448>)
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	2b40      	cmp	r3, #64	; 0x40
 8006e26:	d01d      	beq.n	8006e64 <HAL_DMA_Init+0x44c>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	2b80      	cmp	r3, #128	; 0x80
 8006e2e:	d102      	bne.n	8006e36 <HAL_DMA_Init+0x41e>
 8006e30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e34:	e017      	b.n	8006e66 <HAL_DMA_Init+0x44e>
 8006e36:	2300      	movs	r3, #0
 8006e38:	e015      	b.n	8006e66 <HAL_DMA_Init+0x44e>
 8006e3a:	bf00      	nop
 8006e3c:	fe10803f 	.word	0xfe10803f
 8006e40:	58025408 	.word	0x58025408
 8006e44:	5802541c 	.word	0x5802541c
 8006e48:	58025430 	.word	0x58025430
 8006e4c:	58025444 	.word	0x58025444
 8006e50:	58025458 	.word	0x58025458
 8006e54:	5802546c 	.word	0x5802546c
 8006e58:	58025480 	.word	0x58025480
 8006e5c:	58025494 	.word	0x58025494
 8006e60:	fffe000f 	.word	0xfffe000f
 8006e64:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	68d2      	ldr	r2, [r2, #12]
 8006e6a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006e6c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006e74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006e7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006e84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	69db      	ldr	r3, [r3, #28]
 8006e8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006e8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006e94:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	697a      	ldr	r2, [r7, #20]
 8006ea2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	4b6e      	ldr	r3, [pc, #440]	; (8007064 <HAL_DMA_Init+0x64c>)
 8006eac:	4413      	add	r3, r2
 8006eae:	4a6e      	ldr	r2, [pc, #440]	; (8007068 <HAL_DMA_Init+0x650>)
 8006eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb4:	091b      	lsrs	r3, r3, #4
 8006eb6:	009a      	lsls	r2, r3, #2
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f002 f9a7 	bl	8009210 <DMA_CalcBaseAndBitshift>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eca:	f003 031f 	and.w	r3, r3, #31
 8006ece:	2201      	movs	r2, #1
 8006ed0:	409a      	lsls	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	605a      	str	r2, [r3, #4]
 8006ed6:	e008      	b.n	8006eea <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2240      	movs	r2, #64	; 0x40
 8006edc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2203      	movs	r2, #3
 8006ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e0b7      	b.n	800705a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a5f      	ldr	r2, [pc, #380]	; (800706c <HAL_DMA_Init+0x654>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d072      	beq.n	8006fda <HAL_DMA_Init+0x5c2>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a5d      	ldr	r2, [pc, #372]	; (8007070 <HAL_DMA_Init+0x658>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d06d      	beq.n	8006fda <HAL_DMA_Init+0x5c2>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a5c      	ldr	r2, [pc, #368]	; (8007074 <HAL_DMA_Init+0x65c>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d068      	beq.n	8006fda <HAL_DMA_Init+0x5c2>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a5a      	ldr	r2, [pc, #360]	; (8007078 <HAL_DMA_Init+0x660>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d063      	beq.n	8006fda <HAL_DMA_Init+0x5c2>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a59      	ldr	r2, [pc, #356]	; (800707c <HAL_DMA_Init+0x664>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d05e      	beq.n	8006fda <HAL_DMA_Init+0x5c2>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a57      	ldr	r2, [pc, #348]	; (8007080 <HAL_DMA_Init+0x668>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d059      	beq.n	8006fda <HAL_DMA_Init+0x5c2>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a56      	ldr	r2, [pc, #344]	; (8007084 <HAL_DMA_Init+0x66c>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d054      	beq.n	8006fda <HAL_DMA_Init+0x5c2>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a54      	ldr	r2, [pc, #336]	; (8007088 <HAL_DMA_Init+0x670>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d04f      	beq.n	8006fda <HAL_DMA_Init+0x5c2>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a53      	ldr	r2, [pc, #332]	; (800708c <HAL_DMA_Init+0x674>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d04a      	beq.n	8006fda <HAL_DMA_Init+0x5c2>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a51      	ldr	r2, [pc, #324]	; (8007090 <HAL_DMA_Init+0x678>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d045      	beq.n	8006fda <HAL_DMA_Init+0x5c2>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a50      	ldr	r2, [pc, #320]	; (8007094 <HAL_DMA_Init+0x67c>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d040      	beq.n	8006fda <HAL_DMA_Init+0x5c2>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a4e      	ldr	r2, [pc, #312]	; (8007098 <HAL_DMA_Init+0x680>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d03b      	beq.n	8006fda <HAL_DMA_Init+0x5c2>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a4d      	ldr	r2, [pc, #308]	; (800709c <HAL_DMA_Init+0x684>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d036      	beq.n	8006fda <HAL_DMA_Init+0x5c2>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a4b      	ldr	r2, [pc, #300]	; (80070a0 <HAL_DMA_Init+0x688>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d031      	beq.n	8006fda <HAL_DMA_Init+0x5c2>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a4a      	ldr	r2, [pc, #296]	; (80070a4 <HAL_DMA_Init+0x68c>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d02c      	beq.n	8006fda <HAL_DMA_Init+0x5c2>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a48      	ldr	r2, [pc, #288]	; (80070a8 <HAL_DMA_Init+0x690>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d027      	beq.n	8006fda <HAL_DMA_Init+0x5c2>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a47      	ldr	r2, [pc, #284]	; (80070ac <HAL_DMA_Init+0x694>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d022      	beq.n	8006fda <HAL_DMA_Init+0x5c2>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a45      	ldr	r2, [pc, #276]	; (80070b0 <HAL_DMA_Init+0x698>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d01d      	beq.n	8006fda <HAL_DMA_Init+0x5c2>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a44      	ldr	r2, [pc, #272]	; (80070b4 <HAL_DMA_Init+0x69c>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d018      	beq.n	8006fda <HAL_DMA_Init+0x5c2>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a42      	ldr	r2, [pc, #264]	; (80070b8 <HAL_DMA_Init+0x6a0>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d013      	beq.n	8006fda <HAL_DMA_Init+0x5c2>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a41      	ldr	r2, [pc, #260]	; (80070bc <HAL_DMA_Init+0x6a4>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d00e      	beq.n	8006fda <HAL_DMA_Init+0x5c2>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a3f      	ldr	r2, [pc, #252]	; (80070c0 <HAL_DMA_Init+0x6a8>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d009      	beq.n	8006fda <HAL_DMA_Init+0x5c2>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a3e      	ldr	r2, [pc, #248]	; (80070c4 <HAL_DMA_Init+0x6ac>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d004      	beq.n	8006fda <HAL_DMA_Init+0x5c2>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a3c      	ldr	r2, [pc, #240]	; (80070c8 <HAL_DMA_Init+0x6b0>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d101      	bne.n	8006fde <HAL_DMA_Init+0x5c6>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e000      	b.n	8006fe0 <HAL_DMA_Init+0x5c8>
 8006fde:	2300      	movs	r3, #0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d032      	beq.n	800704a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f002 fa41 	bl	800946c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	2b80      	cmp	r3, #128	; 0x80
 8006ff0:	d102      	bne.n	8006ff8 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007000:	b2d2      	uxtb	r2, r2
 8007002:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800700c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d010      	beq.n	8007038 <HAL_DMA_Init+0x620>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	2b08      	cmp	r3, #8
 800701c:	d80c      	bhi.n	8007038 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f002 fabe 	bl	80095a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007028:	2200      	movs	r2, #0
 800702a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007034:	605a      	str	r2, [r3, #4]
 8007036:	e008      	b.n	800704a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3718      	adds	r7, #24
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	a7fdabf8 	.word	0xa7fdabf8
 8007068:	cccccccd 	.word	0xcccccccd
 800706c:	40020010 	.word	0x40020010
 8007070:	40020028 	.word	0x40020028
 8007074:	40020040 	.word	0x40020040
 8007078:	40020058 	.word	0x40020058
 800707c:	40020070 	.word	0x40020070
 8007080:	40020088 	.word	0x40020088
 8007084:	400200a0 	.word	0x400200a0
 8007088:	400200b8 	.word	0x400200b8
 800708c:	40020410 	.word	0x40020410
 8007090:	40020428 	.word	0x40020428
 8007094:	40020440 	.word	0x40020440
 8007098:	40020458 	.word	0x40020458
 800709c:	40020470 	.word	0x40020470
 80070a0:	40020488 	.word	0x40020488
 80070a4:	400204a0 	.word	0x400204a0
 80070a8:	400204b8 	.word	0x400204b8
 80070ac:	58025408 	.word	0x58025408
 80070b0:	5802541c 	.word	0x5802541c
 80070b4:	58025430 	.word	0x58025430
 80070b8:	58025444 	.word	0x58025444
 80070bc:	58025458 	.word	0x58025458
 80070c0:	5802546c 	.word	0x5802546c
 80070c4:	58025480 	.word	0x58025480
 80070c8:	58025494 	.word	0x58025494

080070cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
 80070d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070da:	2300      	movs	r3, #0
 80070dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d101      	bne.n	80070e8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e226      	b.n	8007536 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	d101      	bne.n	80070f6 <HAL_DMA_Start_IT+0x2a>
 80070f2:	2302      	movs	r3, #2
 80070f4:	e21f      	b.n	8007536 <HAL_DMA_Start_IT+0x46a>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b01      	cmp	r3, #1
 8007108:	f040 820a 	bne.w	8007520 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2202      	movs	r2, #2
 8007110:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a68      	ldr	r2, [pc, #416]	; (80072c0 <HAL_DMA_Start_IT+0x1f4>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d04a      	beq.n	80071ba <HAL_DMA_Start_IT+0xee>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a66      	ldr	r2, [pc, #408]	; (80072c4 <HAL_DMA_Start_IT+0x1f8>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d045      	beq.n	80071ba <HAL_DMA_Start_IT+0xee>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a65      	ldr	r2, [pc, #404]	; (80072c8 <HAL_DMA_Start_IT+0x1fc>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d040      	beq.n	80071ba <HAL_DMA_Start_IT+0xee>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a63      	ldr	r2, [pc, #396]	; (80072cc <HAL_DMA_Start_IT+0x200>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d03b      	beq.n	80071ba <HAL_DMA_Start_IT+0xee>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a62      	ldr	r2, [pc, #392]	; (80072d0 <HAL_DMA_Start_IT+0x204>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d036      	beq.n	80071ba <HAL_DMA_Start_IT+0xee>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a60      	ldr	r2, [pc, #384]	; (80072d4 <HAL_DMA_Start_IT+0x208>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d031      	beq.n	80071ba <HAL_DMA_Start_IT+0xee>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a5f      	ldr	r2, [pc, #380]	; (80072d8 <HAL_DMA_Start_IT+0x20c>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d02c      	beq.n	80071ba <HAL_DMA_Start_IT+0xee>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a5d      	ldr	r2, [pc, #372]	; (80072dc <HAL_DMA_Start_IT+0x210>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d027      	beq.n	80071ba <HAL_DMA_Start_IT+0xee>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a5c      	ldr	r2, [pc, #368]	; (80072e0 <HAL_DMA_Start_IT+0x214>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d022      	beq.n	80071ba <HAL_DMA_Start_IT+0xee>
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a5a      	ldr	r2, [pc, #360]	; (80072e4 <HAL_DMA_Start_IT+0x218>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d01d      	beq.n	80071ba <HAL_DMA_Start_IT+0xee>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a59      	ldr	r2, [pc, #356]	; (80072e8 <HAL_DMA_Start_IT+0x21c>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d018      	beq.n	80071ba <HAL_DMA_Start_IT+0xee>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a57      	ldr	r2, [pc, #348]	; (80072ec <HAL_DMA_Start_IT+0x220>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d013      	beq.n	80071ba <HAL_DMA_Start_IT+0xee>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a56      	ldr	r2, [pc, #344]	; (80072f0 <HAL_DMA_Start_IT+0x224>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d00e      	beq.n	80071ba <HAL_DMA_Start_IT+0xee>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a54      	ldr	r2, [pc, #336]	; (80072f4 <HAL_DMA_Start_IT+0x228>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d009      	beq.n	80071ba <HAL_DMA_Start_IT+0xee>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a53      	ldr	r2, [pc, #332]	; (80072f8 <HAL_DMA_Start_IT+0x22c>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d004      	beq.n	80071ba <HAL_DMA_Start_IT+0xee>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a51      	ldr	r2, [pc, #324]	; (80072fc <HAL_DMA_Start_IT+0x230>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d108      	bne.n	80071cc <HAL_DMA_Start_IT+0x100>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f022 0201 	bic.w	r2, r2, #1
 80071c8:	601a      	str	r2, [r3, #0]
 80071ca:	e007      	b.n	80071dc <HAL_DMA_Start_IT+0x110>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f022 0201 	bic.w	r2, r2, #1
 80071da:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	68b9      	ldr	r1, [r7, #8]
 80071e2:	68f8      	ldr	r0, [r7, #12]
 80071e4:	f001 fe68 	bl	8008eb8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a34      	ldr	r2, [pc, #208]	; (80072c0 <HAL_DMA_Start_IT+0x1f4>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d04a      	beq.n	8007288 <HAL_DMA_Start_IT+0x1bc>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4a33      	ldr	r2, [pc, #204]	; (80072c4 <HAL_DMA_Start_IT+0x1f8>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d045      	beq.n	8007288 <HAL_DMA_Start_IT+0x1bc>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a31      	ldr	r2, [pc, #196]	; (80072c8 <HAL_DMA_Start_IT+0x1fc>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d040      	beq.n	8007288 <HAL_DMA_Start_IT+0x1bc>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a30      	ldr	r2, [pc, #192]	; (80072cc <HAL_DMA_Start_IT+0x200>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d03b      	beq.n	8007288 <HAL_DMA_Start_IT+0x1bc>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a2e      	ldr	r2, [pc, #184]	; (80072d0 <HAL_DMA_Start_IT+0x204>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d036      	beq.n	8007288 <HAL_DMA_Start_IT+0x1bc>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a2d      	ldr	r2, [pc, #180]	; (80072d4 <HAL_DMA_Start_IT+0x208>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d031      	beq.n	8007288 <HAL_DMA_Start_IT+0x1bc>
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a2b      	ldr	r2, [pc, #172]	; (80072d8 <HAL_DMA_Start_IT+0x20c>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d02c      	beq.n	8007288 <HAL_DMA_Start_IT+0x1bc>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a2a      	ldr	r2, [pc, #168]	; (80072dc <HAL_DMA_Start_IT+0x210>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d027      	beq.n	8007288 <HAL_DMA_Start_IT+0x1bc>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a28      	ldr	r2, [pc, #160]	; (80072e0 <HAL_DMA_Start_IT+0x214>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d022      	beq.n	8007288 <HAL_DMA_Start_IT+0x1bc>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a27      	ldr	r2, [pc, #156]	; (80072e4 <HAL_DMA_Start_IT+0x218>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d01d      	beq.n	8007288 <HAL_DMA_Start_IT+0x1bc>
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a25      	ldr	r2, [pc, #148]	; (80072e8 <HAL_DMA_Start_IT+0x21c>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d018      	beq.n	8007288 <HAL_DMA_Start_IT+0x1bc>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a24      	ldr	r2, [pc, #144]	; (80072ec <HAL_DMA_Start_IT+0x220>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d013      	beq.n	8007288 <HAL_DMA_Start_IT+0x1bc>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a22      	ldr	r2, [pc, #136]	; (80072f0 <HAL_DMA_Start_IT+0x224>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d00e      	beq.n	8007288 <HAL_DMA_Start_IT+0x1bc>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a21      	ldr	r2, [pc, #132]	; (80072f4 <HAL_DMA_Start_IT+0x228>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d009      	beq.n	8007288 <HAL_DMA_Start_IT+0x1bc>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a1f      	ldr	r2, [pc, #124]	; (80072f8 <HAL_DMA_Start_IT+0x22c>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d004      	beq.n	8007288 <HAL_DMA_Start_IT+0x1bc>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a1e      	ldr	r2, [pc, #120]	; (80072fc <HAL_DMA_Start_IT+0x230>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d101      	bne.n	800728c <HAL_DMA_Start_IT+0x1c0>
 8007288:	2301      	movs	r3, #1
 800728a:	e000      	b.n	800728e <HAL_DMA_Start_IT+0x1c2>
 800728c:	2300      	movs	r3, #0
 800728e:	2b00      	cmp	r3, #0
 8007290:	d036      	beq.n	8007300 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f023 021e 	bic.w	r2, r3, #30
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f042 0216 	orr.w	r2, r2, #22
 80072a4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d03e      	beq.n	800732c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f042 0208 	orr.w	r2, r2, #8
 80072bc:	601a      	str	r2, [r3, #0]
 80072be:	e035      	b.n	800732c <HAL_DMA_Start_IT+0x260>
 80072c0:	40020010 	.word	0x40020010
 80072c4:	40020028 	.word	0x40020028
 80072c8:	40020040 	.word	0x40020040
 80072cc:	40020058 	.word	0x40020058
 80072d0:	40020070 	.word	0x40020070
 80072d4:	40020088 	.word	0x40020088
 80072d8:	400200a0 	.word	0x400200a0
 80072dc:	400200b8 	.word	0x400200b8
 80072e0:	40020410 	.word	0x40020410
 80072e4:	40020428 	.word	0x40020428
 80072e8:	40020440 	.word	0x40020440
 80072ec:	40020458 	.word	0x40020458
 80072f0:	40020470 	.word	0x40020470
 80072f4:	40020488 	.word	0x40020488
 80072f8:	400204a0 	.word	0x400204a0
 80072fc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f023 020e 	bic.w	r2, r3, #14
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f042 020a 	orr.w	r2, r2, #10
 8007312:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007318:	2b00      	cmp	r3, #0
 800731a:	d007      	beq.n	800732c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f042 0204 	orr.w	r2, r2, #4
 800732a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a83      	ldr	r2, [pc, #524]	; (8007540 <HAL_DMA_Start_IT+0x474>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d072      	beq.n	800741c <HAL_DMA_Start_IT+0x350>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a82      	ldr	r2, [pc, #520]	; (8007544 <HAL_DMA_Start_IT+0x478>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d06d      	beq.n	800741c <HAL_DMA_Start_IT+0x350>
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a80      	ldr	r2, [pc, #512]	; (8007548 <HAL_DMA_Start_IT+0x47c>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d068      	beq.n	800741c <HAL_DMA_Start_IT+0x350>
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a7f      	ldr	r2, [pc, #508]	; (800754c <HAL_DMA_Start_IT+0x480>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d063      	beq.n	800741c <HAL_DMA_Start_IT+0x350>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a7d      	ldr	r2, [pc, #500]	; (8007550 <HAL_DMA_Start_IT+0x484>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d05e      	beq.n	800741c <HAL_DMA_Start_IT+0x350>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a7c      	ldr	r2, [pc, #496]	; (8007554 <HAL_DMA_Start_IT+0x488>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d059      	beq.n	800741c <HAL_DMA_Start_IT+0x350>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a7a      	ldr	r2, [pc, #488]	; (8007558 <HAL_DMA_Start_IT+0x48c>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d054      	beq.n	800741c <HAL_DMA_Start_IT+0x350>
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a79      	ldr	r2, [pc, #484]	; (800755c <HAL_DMA_Start_IT+0x490>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d04f      	beq.n	800741c <HAL_DMA_Start_IT+0x350>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a77      	ldr	r2, [pc, #476]	; (8007560 <HAL_DMA_Start_IT+0x494>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d04a      	beq.n	800741c <HAL_DMA_Start_IT+0x350>
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a76      	ldr	r2, [pc, #472]	; (8007564 <HAL_DMA_Start_IT+0x498>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d045      	beq.n	800741c <HAL_DMA_Start_IT+0x350>
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a74      	ldr	r2, [pc, #464]	; (8007568 <HAL_DMA_Start_IT+0x49c>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d040      	beq.n	800741c <HAL_DMA_Start_IT+0x350>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a73      	ldr	r2, [pc, #460]	; (800756c <HAL_DMA_Start_IT+0x4a0>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d03b      	beq.n	800741c <HAL_DMA_Start_IT+0x350>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a71      	ldr	r2, [pc, #452]	; (8007570 <HAL_DMA_Start_IT+0x4a4>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d036      	beq.n	800741c <HAL_DMA_Start_IT+0x350>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a70      	ldr	r2, [pc, #448]	; (8007574 <HAL_DMA_Start_IT+0x4a8>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d031      	beq.n	800741c <HAL_DMA_Start_IT+0x350>
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a6e      	ldr	r2, [pc, #440]	; (8007578 <HAL_DMA_Start_IT+0x4ac>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d02c      	beq.n	800741c <HAL_DMA_Start_IT+0x350>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a6d      	ldr	r2, [pc, #436]	; (800757c <HAL_DMA_Start_IT+0x4b0>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d027      	beq.n	800741c <HAL_DMA_Start_IT+0x350>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a6b      	ldr	r2, [pc, #428]	; (8007580 <HAL_DMA_Start_IT+0x4b4>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d022      	beq.n	800741c <HAL_DMA_Start_IT+0x350>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a6a      	ldr	r2, [pc, #424]	; (8007584 <HAL_DMA_Start_IT+0x4b8>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d01d      	beq.n	800741c <HAL_DMA_Start_IT+0x350>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a68      	ldr	r2, [pc, #416]	; (8007588 <HAL_DMA_Start_IT+0x4bc>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d018      	beq.n	800741c <HAL_DMA_Start_IT+0x350>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a67      	ldr	r2, [pc, #412]	; (800758c <HAL_DMA_Start_IT+0x4c0>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d013      	beq.n	800741c <HAL_DMA_Start_IT+0x350>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a65      	ldr	r2, [pc, #404]	; (8007590 <HAL_DMA_Start_IT+0x4c4>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d00e      	beq.n	800741c <HAL_DMA_Start_IT+0x350>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a64      	ldr	r2, [pc, #400]	; (8007594 <HAL_DMA_Start_IT+0x4c8>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d009      	beq.n	800741c <HAL_DMA_Start_IT+0x350>
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a62      	ldr	r2, [pc, #392]	; (8007598 <HAL_DMA_Start_IT+0x4cc>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d004      	beq.n	800741c <HAL_DMA_Start_IT+0x350>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a61      	ldr	r2, [pc, #388]	; (800759c <HAL_DMA_Start_IT+0x4d0>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d101      	bne.n	8007420 <HAL_DMA_Start_IT+0x354>
 800741c:	2301      	movs	r3, #1
 800741e:	e000      	b.n	8007422 <HAL_DMA_Start_IT+0x356>
 8007420:	2300      	movs	r3, #0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d01a      	beq.n	800745c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d007      	beq.n	8007444 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800743e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007442:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007448:	2b00      	cmp	r3, #0
 800744a:	d007      	beq.n	800745c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007456:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800745a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a37      	ldr	r2, [pc, #220]	; (8007540 <HAL_DMA_Start_IT+0x474>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d04a      	beq.n	80074fc <HAL_DMA_Start_IT+0x430>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a36      	ldr	r2, [pc, #216]	; (8007544 <HAL_DMA_Start_IT+0x478>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d045      	beq.n	80074fc <HAL_DMA_Start_IT+0x430>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a34      	ldr	r2, [pc, #208]	; (8007548 <HAL_DMA_Start_IT+0x47c>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d040      	beq.n	80074fc <HAL_DMA_Start_IT+0x430>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a33      	ldr	r2, [pc, #204]	; (800754c <HAL_DMA_Start_IT+0x480>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d03b      	beq.n	80074fc <HAL_DMA_Start_IT+0x430>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a31      	ldr	r2, [pc, #196]	; (8007550 <HAL_DMA_Start_IT+0x484>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d036      	beq.n	80074fc <HAL_DMA_Start_IT+0x430>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a30      	ldr	r2, [pc, #192]	; (8007554 <HAL_DMA_Start_IT+0x488>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d031      	beq.n	80074fc <HAL_DMA_Start_IT+0x430>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a2e      	ldr	r2, [pc, #184]	; (8007558 <HAL_DMA_Start_IT+0x48c>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d02c      	beq.n	80074fc <HAL_DMA_Start_IT+0x430>
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a2d      	ldr	r2, [pc, #180]	; (800755c <HAL_DMA_Start_IT+0x490>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d027      	beq.n	80074fc <HAL_DMA_Start_IT+0x430>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a2b      	ldr	r2, [pc, #172]	; (8007560 <HAL_DMA_Start_IT+0x494>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d022      	beq.n	80074fc <HAL_DMA_Start_IT+0x430>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a2a      	ldr	r2, [pc, #168]	; (8007564 <HAL_DMA_Start_IT+0x498>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d01d      	beq.n	80074fc <HAL_DMA_Start_IT+0x430>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a28      	ldr	r2, [pc, #160]	; (8007568 <HAL_DMA_Start_IT+0x49c>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d018      	beq.n	80074fc <HAL_DMA_Start_IT+0x430>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a27      	ldr	r2, [pc, #156]	; (800756c <HAL_DMA_Start_IT+0x4a0>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d013      	beq.n	80074fc <HAL_DMA_Start_IT+0x430>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a25      	ldr	r2, [pc, #148]	; (8007570 <HAL_DMA_Start_IT+0x4a4>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d00e      	beq.n	80074fc <HAL_DMA_Start_IT+0x430>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a24      	ldr	r2, [pc, #144]	; (8007574 <HAL_DMA_Start_IT+0x4a8>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d009      	beq.n	80074fc <HAL_DMA_Start_IT+0x430>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a22      	ldr	r2, [pc, #136]	; (8007578 <HAL_DMA_Start_IT+0x4ac>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d004      	beq.n	80074fc <HAL_DMA_Start_IT+0x430>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a21      	ldr	r2, [pc, #132]	; (800757c <HAL_DMA_Start_IT+0x4b0>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d108      	bne.n	800750e <HAL_DMA_Start_IT+0x442>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f042 0201 	orr.w	r2, r2, #1
 800750a:	601a      	str	r2, [r3, #0]
 800750c:	e012      	b.n	8007534 <HAL_DMA_Start_IT+0x468>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f042 0201 	orr.w	r2, r2, #1
 800751c:	601a      	str	r2, [r3, #0]
 800751e:	e009      	b.n	8007534 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007526:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007534:	7dfb      	ldrb	r3, [r7, #23]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3718      	adds	r7, #24
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	40020010 	.word	0x40020010
 8007544:	40020028 	.word	0x40020028
 8007548:	40020040 	.word	0x40020040
 800754c:	40020058 	.word	0x40020058
 8007550:	40020070 	.word	0x40020070
 8007554:	40020088 	.word	0x40020088
 8007558:	400200a0 	.word	0x400200a0
 800755c:	400200b8 	.word	0x400200b8
 8007560:	40020410 	.word	0x40020410
 8007564:	40020428 	.word	0x40020428
 8007568:	40020440 	.word	0x40020440
 800756c:	40020458 	.word	0x40020458
 8007570:	40020470 	.word	0x40020470
 8007574:	40020488 	.word	0x40020488
 8007578:	400204a0 	.word	0x400204a0
 800757c:	400204b8 	.word	0x400204b8
 8007580:	58025408 	.word	0x58025408
 8007584:	5802541c 	.word	0x5802541c
 8007588:	58025430 	.word	0x58025430
 800758c:	58025444 	.word	0x58025444
 8007590:	58025458 	.word	0x58025458
 8007594:	5802546c 	.word	0x5802546c
 8007598:	58025480 	.word	0x58025480
 800759c:	58025494 	.word	0x58025494

080075a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80075a8:	f7ff f91a 	bl	80067e0 <HAL_GetTick>
 80075ac:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d101      	bne.n	80075b8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e2dc      	b.n	8007b72 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	d008      	beq.n	80075d6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2280      	movs	r2, #128	; 0x80
 80075c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e2cd      	b.n	8007b72 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a76      	ldr	r2, [pc, #472]	; (80077b4 <HAL_DMA_Abort+0x214>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d04a      	beq.n	8007676 <HAL_DMA_Abort+0xd6>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a74      	ldr	r2, [pc, #464]	; (80077b8 <HAL_DMA_Abort+0x218>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d045      	beq.n	8007676 <HAL_DMA_Abort+0xd6>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a73      	ldr	r2, [pc, #460]	; (80077bc <HAL_DMA_Abort+0x21c>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d040      	beq.n	8007676 <HAL_DMA_Abort+0xd6>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a71      	ldr	r2, [pc, #452]	; (80077c0 <HAL_DMA_Abort+0x220>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d03b      	beq.n	8007676 <HAL_DMA_Abort+0xd6>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a70      	ldr	r2, [pc, #448]	; (80077c4 <HAL_DMA_Abort+0x224>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d036      	beq.n	8007676 <HAL_DMA_Abort+0xd6>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a6e      	ldr	r2, [pc, #440]	; (80077c8 <HAL_DMA_Abort+0x228>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d031      	beq.n	8007676 <HAL_DMA_Abort+0xd6>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a6d      	ldr	r2, [pc, #436]	; (80077cc <HAL_DMA_Abort+0x22c>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d02c      	beq.n	8007676 <HAL_DMA_Abort+0xd6>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a6b      	ldr	r2, [pc, #428]	; (80077d0 <HAL_DMA_Abort+0x230>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d027      	beq.n	8007676 <HAL_DMA_Abort+0xd6>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a6a      	ldr	r2, [pc, #424]	; (80077d4 <HAL_DMA_Abort+0x234>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d022      	beq.n	8007676 <HAL_DMA_Abort+0xd6>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a68      	ldr	r2, [pc, #416]	; (80077d8 <HAL_DMA_Abort+0x238>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d01d      	beq.n	8007676 <HAL_DMA_Abort+0xd6>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a67      	ldr	r2, [pc, #412]	; (80077dc <HAL_DMA_Abort+0x23c>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d018      	beq.n	8007676 <HAL_DMA_Abort+0xd6>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a65      	ldr	r2, [pc, #404]	; (80077e0 <HAL_DMA_Abort+0x240>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d013      	beq.n	8007676 <HAL_DMA_Abort+0xd6>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a64      	ldr	r2, [pc, #400]	; (80077e4 <HAL_DMA_Abort+0x244>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d00e      	beq.n	8007676 <HAL_DMA_Abort+0xd6>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a62      	ldr	r2, [pc, #392]	; (80077e8 <HAL_DMA_Abort+0x248>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d009      	beq.n	8007676 <HAL_DMA_Abort+0xd6>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a61      	ldr	r2, [pc, #388]	; (80077ec <HAL_DMA_Abort+0x24c>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d004      	beq.n	8007676 <HAL_DMA_Abort+0xd6>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a5f      	ldr	r2, [pc, #380]	; (80077f0 <HAL_DMA_Abort+0x250>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d101      	bne.n	800767a <HAL_DMA_Abort+0xda>
 8007676:	2301      	movs	r3, #1
 8007678:	e000      	b.n	800767c <HAL_DMA_Abort+0xdc>
 800767a:	2300      	movs	r3, #0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d013      	beq.n	80076a8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f022 021e 	bic.w	r2, r2, #30
 800768e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	695a      	ldr	r2, [r3, #20]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800769e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	617b      	str	r3, [r7, #20]
 80076a6:	e00a      	b.n	80076be <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f022 020e 	bic.w	r2, r2, #14
 80076b6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a3c      	ldr	r2, [pc, #240]	; (80077b4 <HAL_DMA_Abort+0x214>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d072      	beq.n	80077ae <HAL_DMA_Abort+0x20e>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a3a      	ldr	r2, [pc, #232]	; (80077b8 <HAL_DMA_Abort+0x218>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d06d      	beq.n	80077ae <HAL_DMA_Abort+0x20e>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a39      	ldr	r2, [pc, #228]	; (80077bc <HAL_DMA_Abort+0x21c>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d068      	beq.n	80077ae <HAL_DMA_Abort+0x20e>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a37      	ldr	r2, [pc, #220]	; (80077c0 <HAL_DMA_Abort+0x220>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d063      	beq.n	80077ae <HAL_DMA_Abort+0x20e>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a36      	ldr	r2, [pc, #216]	; (80077c4 <HAL_DMA_Abort+0x224>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d05e      	beq.n	80077ae <HAL_DMA_Abort+0x20e>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a34      	ldr	r2, [pc, #208]	; (80077c8 <HAL_DMA_Abort+0x228>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d059      	beq.n	80077ae <HAL_DMA_Abort+0x20e>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a33      	ldr	r2, [pc, #204]	; (80077cc <HAL_DMA_Abort+0x22c>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d054      	beq.n	80077ae <HAL_DMA_Abort+0x20e>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a31      	ldr	r2, [pc, #196]	; (80077d0 <HAL_DMA_Abort+0x230>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d04f      	beq.n	80077ae <HAL_DMA_Abort+0x20e>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a30      	ldr	r2, [pc, #192]	; (80077d4 <HAL_DMA_Abort+0x234>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d04a      	beq.n	80077ae <HAL_DMA_Abort+0x20e>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a2e      	ldr	r2, [pc, #184]	; (80077d8 <HAL_DMA_Abort+0x238>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d045      	beq.n	80077ae <HAL_DMA_Abort+0x20e>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a2d      	ldr	r2, [pc, #180]	; (80077dc <HAL_DMA_Abort+0x23c>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d040      	beq.n	80077ae <HAL_DMA_Abort+0x20e>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a2b      	ldr	r2, [pc, #172]	; (80077e0 <HAL_DMA_Abort+0x240>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d03b      	beq.n	80077ae <HAL_DMA_Abort+0x20e>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a2a      	ldr	r2, [pc, #168]	; (80077e4 <HAL_DMA_Abort+0x244>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d036      	beq.n	80077ae <HAL_DMA_Abort+0x20e>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a28      	ldr	r2, [pc, #160]	; (80077e8 <HAL_DMA_Abort+0x248>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d031      	beq.n	80077ae <HAL_DMA_Abort+0x20e>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a27      	ldr	r2, [pc, #156]	; (80077ec <HAL_DMA_Abort+0x24c>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d02c      	beq.n	80077ae <HAL_DMA_Abort+0x20e>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a25      	ldr	r2, [pc, #148]	; (80077f0 <HAL_DMA_Abort+0x250>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d027      	beq.n	80077ae <HAL_DMA_Abort+0x20e>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a24      	ldr	r2, [pc, #144]	; (80077f4 <HAL_DMA_Abort+0x254>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d022      	beq.n	80077ae <HAL_DMA_Abort+0x20e>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a22      	ldr	r2, [pc, #136]	; (80077f8 <HAL_DMA_Abort+0x258>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d01d      	beq.n	80077ae <HAL_DMA_Abort+0x20e>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a21      	ldr	r2, [pc, #132]	; (80077fc <HAL_DMA_Abort+0x25c>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d018      	beq.n	80077ae <HAL_DMA_Abort+0x20e>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a1f      	ldr	r2, [pc, #124]	; (8007800 <HAL_DMA_Abort+0x260>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d013      	beq.n	80077ae <HAL_DMA_Abort+0x20e>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a1e      	ldr	r2, [pc, #120]	; (8007804 <HAL_DMA_Abort+0x264>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d00e      	beq.n	80077ae <HAL_DMA_Abort+0x20e>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a1c      	ldr	r2, [pc, #112]	; (8007808 <HAL_DMA_Abort+0x268>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d009      	beq.n	80077ae <HAL_DMA_Abort+0x20e>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a1b      	ldr	r2, [pc, #108]	; (800780c <HAL_DMA_Abort+0x26c>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d004      	beq.n	80077ae <HAL_DMA_Abort+0x20e>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a19      	ldr	r2, [pc, #100]	; (8007810 <HAL_DMA_Abort+0x270>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d132      	bne.n	8007814 <HAL_DMA_Abort+0x274>
 80077ae:	2301      	movs	r3, #1
 80077b0:	e031      	b.n	8007816 <HAL_DMA_Abort+0x276>
 80077b2:	bf00      	nop
 80077b4:	40020010 	.word	0x40020010
 80077b8:	40020028 	.word	0x40020028
 80077bc:	40020040 	.word	0x40020040
 80077c0:	40020058 	.word	0x40020058
 80077c4:	40020070 	.word	0x40020070
 80077c8:	40020088 	.word	0x40020088
 80077cc:	400200a0 	.word	0x400200a0
 80077d0:	400200b8 	.word	0x400200b8
 80077d4:	40020410 	.word	0x40020410
 80077d8:	40020428 	.word	0x40020428
 80077dc:	40020440 	.word	0x40020440
 80077e0:	40020458 	.word	0x40020458
 80077e4:	40020470 	.word	0x40020470
 80077e8:	40020488 	.word	0x40020488
 80077ec:	400204a0 	.word	0x400204a0
 80077f0:	400204b8 	.word	0x400204b8
 80077f4:	58025408 	.word	0x58025408
 80077f8:	5802541c 	.word	0x5802541c
 80077fc:	58025430 	.word	0x58025430
 8007800:	58025444 	.word	0x58025444
 8007804:	58025458 	.word	0x58025458
 8007808:	5802546c 	.word	0x5802546c
 800780c:	58025480 	.word	0x58025480
 8007810:	58025494 	.word	0x58025494
 8007814:	2300      	movs	r3, #0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d007      	beq.n	800782a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007824:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007828:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a6d      	ldr	r2, [pc, #436]	; (80079e4 <HAL_DMA_Abort+0x444>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d04a      	beq.n	80078ca <HAL_DMA_Abort+0x32a>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a6b      	ldr	r2, [pc, #428]	; (80079e8 <HAL_DMA_Abort+0x448>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d045      	beq.n	80078ca <HAL_DMA_Abort+0x32a>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a6a      	ldr	r2, [pc, #424]	; (80079ec <HAL_DMA_Abort+0x44c>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d040      	beq.n	80078ca <HAL_DMA_Abort+0x32a>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a68      	ldr	r2, [pc, #416]	; (80079f0 <HAL_DMA_Abort+0x450>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d03b      	beq.n	80078ca <HAL_DMA_Abort+0x32a>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a67      	ldr	r2, [pc, #412]	; (80079f4 <HAL_DMA_Abort+0x454>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d036      	beq.n	80078ca <HAL_DMA_Abort+0x32a>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a65      	ldr	r2, [pc, #404]	; (80079f8 <HAL_DMA_Abort+0x458>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d031      	beq.n	80078ca <HAL_DMA_Abort+0x32a>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a64      	ldr	r2, [pc, #400]	; (80079fc <HAL_DMA_Abort+0x45c>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d02c      	beq.n	80078ca <HAL_DMA_Abort+0x32a>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a62      	ldr	r2, [pc, #392]	; (8007a00 <HAL_DMA_Abort+0x460>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d027      	beq.n	80078ca <HAL_DMA_Abort+0x32a>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a61      	ldr	r2, [pc, #388]	; (8007a04 <HAL_DMA_Abort+0x464>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d022      	beq.n	80078ca <HAL_DMA_Abort+0x32a>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a5f      	ldr	r2, [pc, #380]	; (8007a08 <HAL_DMA_Abort+0x468>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d01d      	beq.n	80078ca <HAL_DMA_Abort+0x32a>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a5e      	ldr	r2, [pc, #376]	; (8007a0c <HAL_DMA_Abort+0x46c>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d018      	beq.n	80078ca <HAL_DMA_Abort+0x32a>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a5c      	ldr	r2, [pc, #368]	; (8007a10 <HAL_DMA_Abort+0x470>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d013      	beq.n	80078ca <HAL_DMA_Abort+0x32a>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a5b      	ldr	r2, [pc, #364]	; (8007a14 <HAL_DMA_Abort+0x474>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d00e      	beq.n	80078ca <HAL_DMA_Abort+0x32a>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a59      	ldr	r2, [pc, #356]	; (8007a18 <HAL_DMA_Abort+0x478>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d009      	beq.n	80078ca <HAL_DMA_Abort+0x32a>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a58      	ldr	r2, [pc, #352]	; (8007a1c <HAL_DMA_Abort+0x47c>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d004      	beq.n	80078ca <HAL_DMA_Abort+0x32a>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a56      	ldr	r2, [pc, #344]	; (8007a20 <HAL_DMA_Abort+0x480>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d108      	bne.n	80078dc <HAL_DMA_Abort+0x33c>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f022 0201 	bic.w	r2, r2, #1
 80078d8:	601a      	str	r2, [r3, #0]
 80078da:	e007      	b.n	80078ec <HAL_DMA_Abort+0x34c>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f022 0201 	bic.w	r2, r2, #1
 80078ea:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80078ec:	e013      	b.n	8007916 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80078ee:	f7fe ff77 	bl	80067e0 <HAL_GetTick>
 80078f2:	4602      	mov	r2, r0
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	2b05      	cmp	r3, #5
 80078fa:	d90c      	bls.n	8007916 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2220      	movs	r2, #32
 8007900:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2203      	movs	r2, #3
 8007906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e12d      	b.n	8007b72 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f003 0301 	and.w	r3, r3, #1
 800791e:	2b00      	cmp	r3, #0
 8007920:	d1e5      	bne.n	80078ee <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a2f      	ldr	r2, [pc, #188]	; (80079e4 <HAL_DMA_Abort+0x444>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d04a      	beq.n	80079c2 <HAL_DMA_Abort+0x422>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a2d      	ldr	r2, [pc, #180]	; (80079e8 <HAL_DMA_Abort+0x448>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d045      	beq.n	80079c2 <HAL_DMA_Abort+0x422>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a2c      	ldr	r2, [pc, #176]	; (80079ec <HAL_DMA_Abort+0x44c>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d040      	beq.n	80079c2 <HAL_DMA_Abort+0x422>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a2a      	ldr	r2, [pc, #168]	; (80079f0 <HAL_DMA_Abort+0x450>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d03b      	beq.n	80079c2 <HAL_DMA_Abort+0x422>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a29      	ldr	r2, [pc, #164]	; (80079f4 <HAL_DMA_Abort+0x454>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d036      	beq.n	80079c2 <HAL_DMA_Abort+0x422>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a27      	ldr	r2, [pc, #156]	; (80079f8 <HAL_DMA_Abort+0x458>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d031      	beq.n	80079c2 <HAL_DMA_Abort+0x422>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a26      	ldr	r2, [pc, #152]	; (80079fc <HAL_DMA_Abort+0x45c>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d02c      	beq.n	80079c2 <HAL_DMA_Abort+0x422>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a24      	ldr	r2, [pc, #144]	; (8007a00 <HAL_DMA_Abort+0x460>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d027      	beq.n	80079c2 <HAL_DMA_Abort+0x422>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a23      	ldr	r2, [pc, #140]	; (8007a04 <HAL_DMA_Abort+0x464>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d022      	beq.n	80079c2 <HAL_DMA_Abort+0x422>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a21      	ldr	r2, [pc, #132]	; (8007a08 <HAL_DMA_Abort+0x468>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d01d      	beq.n	80079c2 <HAL_DMA_Abort+0x422>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a20      	ldr	r2, [pc, #128]	; (8007a0c <HAL_DMA_Abort+0x46c>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d018      	beq.n	80079c2 <HAL_DMA_Abort+0x422>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a1e      	ldr	r2, [pc, #120]	; (8007a10 <HAL_DMA_Abort+0x470>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d013      	beq.n	80079c2 <HAL_DMA_Abort+0x422>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a1d      	ldr	r2, [pc, #116]	; (8007a14 <HAL_DMA_Abort+0x474>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d00e      	beq.n	80079c2 <HAL_DMA_Abort+0x422>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a1b      	ldr	r2, [pc, #108]	; (8007a18 <HAL_DMA_Abort+0x478>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d009      	beq.n	80079c2 <HAL_DMA_Abort+0x422>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a1a      	ldr	r2, [pc, #104]	; (8007a1c <HAL_DMA_Abort+0x47c>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d004      	beq.n	80079c2 <HAL_DMA_Abort+0x422>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a18      	ldr	r2, [pc, #96]	; (8007a20 <HAL_DMA_Abort+0x480>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d101      	bne.n	80079c6 <HAL_DMA_Abort+0x426>
 80079c2:	2301      	movs	r3, #1
 80079c4:	e000      	b.n	80079c8 <HAL_DMA_Abort+0x428>
 80079c6:	2300      	movs	r3, #0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d02b      	beq.n	8007a24 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079d0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079d6:	f003 031f 	and.w	r3, r3, #31
 80079da:	223f      	movs	r2, #63	; 0x3f
 80079dc:	409a      	lsls	r2, r3
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	609a      	str	r2, [r3, #8]
 80079e2:	e02a      	b.n	8007a3a <HAL_DMA_Abort+0x49a>
 80079e4:	40020010 	.word	0x40020010
 80079e8:	40020028 	.word	0x40020028
 80079ec:	40020040 	.word	0x40020040
 80079f0:	40020058 	.word	0x40020058
 80079f4:	40020070 	.word	0x40020070
 80079f8:	40020088 	.word	0x40020088
 80079fc:	400200a0 	.word	0x400200a0
 8007a00:	400200b8 	.word	0x400200b8
 8007a04:	40020410 	.word	0x40020410
 8007a08:	40020428 	.word	0x40020428
 8007a0c:	40020440 	.word	0x40020440
 8007a10:	40020458 	.word	0x40020458
 8007a14:	40020470 	.word	0x40020470
 8007a18:	40020488 	.word	0x40020488
 8007a1c:	400204a0 	.word	0x400204a0
 8007a20:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a28:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a2e:	f003 031f 	and.w	r3, r3, #31
 8007a32:	2201      	movs	r2, #1
 8007a34:	409a      	lsls	r2, r3
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a4f      	ldr	r2, [pc, #316]	; (8007b7c <HAL_DMA_Abort+0x5dc>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d072      	beq.n	8007b2a <HAL_DMA_Abort+0x58a>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a4d      	ldr	r2, [pc, #308]	; (8007b80 <HAL_DMA_Abort+0x5e0>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d06d      	beq.n	8007b2a <HAL_DMA_Abort+0x58a>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a4c      	ldr	r2, [pc, #304]	; (8007b84 <HAL_DMA_Abort+0x5e4>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d068      	beq.n	8007b2a <HAL_DMA_Abort+0x58a>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a4a      	ldr	r2, [pc, #296]	; (8007b88 <HAL_DMA_Abort+0x5e8>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d063      	beq.n	8007b2a <HAL_DMA_Abort+0x58a>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a49      	ldr	r2, [pc, #292]	; (8007b8c <HAL_DMA_Abort+0x5ec>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d05e      	beq.n	8007b2a <HAL_DMA_Abort+0x58a>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a47      	ldr	r2, [pc, #284]	; (8007b90 <HAL_DMA_Abort+0x5f0>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d059      	beq.n	8007b2a <HAL_DMA_Abort+0x58a>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a46      	ldr	r2, [pc, #280]	; (8007b94 <HAL_DMA_Abort+0x5f4>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d054      	beq.n	8007b2a <HAL_DMA_Abort+0x58a>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a44      	ldr	r2, [pc, #272]	; (8007b98 <HAL_DMA_Abort+0x5f8>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d04f      	beq.n	8007b2a <HAL_DMA_Abort+0x58a>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a43      	ldr	r2, [pc, #268]	; (8007b9c <HAL_DMA_Abort+0x5fc>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d04a      	beq.n	8007b2a <HAL_DMA_Abort+0x58a>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a41      	ldr	r2, [pc, #260]	; (8007ba0 <HAL_DMA_Abort+0x600>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d045      	beq.n	8007b2a <HAL_DMA_Abort+0x58a>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a40      	ldr	r2, [pc, #256]	; (8007ba4 <HAL_DMA_Abort+0x604>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d040      	beq.n	8007b2a <HAL_DMA_Abort+0x58a>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a3e      	ldr	r2, [pc, #248]	; (8007ba8 <HAL_DMA_Abort+0x608>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d03b      	beq.n	8007b2a <HAL_DMA_Abort+0x58a>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a3d      	ldr	r2, [pc, #244]	; (8007bac <HAL_DMA_Abort+0x60c>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d036      	beq.n	8007b2a <HAL_DMA_Abort+0x58a>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a3b      	ldr	r2, [pc, #236]	; (8007bb0 <HAL_DMA_Abort+0x610>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d031      	beq.n	8007b2a <HAL_DMA_Abort+0x58a>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a3a      	ldr	r2, [pc, #232]	; (8007bb4 <HAL_DMA_Abort+0x614>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d02c      	beq.n	8007b2a <HAL_DMA_Abort+0x58a>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a38      	ldr	r2, [pc, #224]	; (8007bb8 <HAL_DMA_Abort+0x618>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d027      	beq.n	8007b2a <HAL_DMA_Abort+0x58a>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a37      	ldr	r2, [pc, #220]	; (8007bbc <HAL_DMA_Abort+0x61c>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d022      	beq.n	8007b2a <HAL_DMA_Abort+0x58a>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a35      	ldr	r2, [pc, #212]	; (8007bc0 <HAL_DMA_Abort+0x620>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d01d      	beq.n	8007b2a <HAL_DMA_Abort+0x58a>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a34      	ldr	r2, [pc, #208]	; (8007bc4 <HAL_DMA_Abort+0x624>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d018      	beq.n	8007b2a <HAL_DMA_Abort+0x58a>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a32      	ldr	r2, [pc, #200]	; (8007bc8 <HAL_DMA_Abort+0x628>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d013      	beq.n	8007b2a <HAL_DMA_Abort+0x58a>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a31      	ldr	r2, [pc, #196]	; (8007bcc <HAL_DMA_Abort+0x62c>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d00e      	beq.n	8007b2a <HAL_DMA_Abort+0x58a>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a2f      	ldr	r2, [pc, #188]	; (8007bd0 <HAL_DMA_Abort+0x630>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d009      	beq.n	8007b2a <HAL_DMA_Abort+0x58a>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a2e      	ldr	r2, [pc, #184]	; (8007bd4 <HAL_DMA_Abort+0x634>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d004      	beq.n	8007b2a <HAL_DMA_Abort+0x58a>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a2c      	ldr	r2, [pc, #176]	; (8007bd8 <HAL_DMA_Abort+0x638>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d101      	bne.n	8007b2e <HAL_DMA_Abort+0x58e>
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e000      	b.n	8007b30 <HAL_DMA_Abort+0x590>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d015      	beq.n	8007b60 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007b3c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00c      	beq.n	8007b60 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b54:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007b5e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3718      	adds	r7, #24
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	40020010 	.word	0x40020010
 8007b80:	40020028 	.word	0x40020028
 8007b84:	40020040 	.word	0x40020040
 8007b88:	40020058 	.word	0x40020058
 8007b8c:	40020070 	.word	0x40020070
 8007b90:	40020088 	.word	0x40020088
 8007b94:	400200a0 	.word	0x400200a0
 8007b98:	400200b8 	.word	0x400200b8
 8007b9c:	40020410 	.word	0x40020410
 8007ba0:	40020428 	.word	0x40020428
 8007ba4:	40020440 	.word	0x40020440
 8007ba8:	40020458 	.word	0x40020458
 8007bac:	40020470 	.word	0x40020470
 8007bb0:	40020488 	.word	0x40020488
 8007bb4:	400204a0 	.word	0x400204a0
 8007bb8:	400204b8 	.word	0x400204b8
 8007bbc:	58025408 	.word	0x58025408
 8007bc0:	5802541c 	.word	0x5802541c
 8007bc4:	58025430 	.word	0x58025430
 8007bc8:	58025444 	.word	0x58025444
 8007bcc:	58025458 	.word	0x58025458
 8007bd0:	5802546c 	.word	0x5802546c
 8007bd4:	58025480 	.word	0x58025480
 8007bd8:	58025494 	.word	0x58025494

08007bdc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d101      	bne.n	8007bee <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e205      	b.n	8007ffa <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d004      	beq.n	8007c04 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2280      	movs	r2, #128	; 0x80
 8007bfe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	e1fa      	b.n	8007ffa <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a8c      	ldr	r2, [pc, #560]	; (8007e3c <HAL_DMA_Abort_IT+0x260>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d04a      	beq.n	8007ca4 <HAL_DMA_Abort_IT+0xc8>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a8b      	ldr	r2, [pc, #556]	; (8007e40 <HAL_DMA_Abort_IT+0x264>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d045      	beq.n	8007ca4 <HAL_DMA_Abort_IT+0xc8>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a89      	ldr	r2, [pc, #548]	; (8007e44 <HAL_DMA_Abort_IT+0x268>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d040      	beq.n	8007ca4 <HAL_DMA_Abort_IT+0xc8>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a88      	ldr	r2, [pc, #544]	; (8007e48 <HAL_DMA_Abort_IT+0x26c>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d03b      	beq.n	8007ca4 <HAL_DMA_Abort_IT+0xc8>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a86      	ldr	r2, [pc, #536]	; (8007e4c <HAL_DMA_Abort_IT+0x270>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d036      	beq.n	8007ca4 <HAL_DMA_Abort_IT+0xc8>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a85      	ldr	r2, [pc, #532]	; (8007e50 <HAL_DMA_Abort_IT+0x274>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d031      	beq.n	8007ca4 <HAL_DMA_Abort_IT+0xc8>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a83      	ldr	r2, [pc, #524]	; (8007e54 <HAL_DMA_Abort_IT+0x278>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d02c      	beq.n	8007ca4 <HAL_DMA_Abort_IT+0xc8>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a82      	ldr	r2, [pc, #520]	; (8007e58 <HAL_DMA_Abort_IT+0x27c>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d027      	beq.n	8007ca4 <HAL_DMA_Abort_IT+0xc8>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a80      	ldr	r2, [pc, #512]	; (8007e5c <HAL_DMA_Abort_IT+0x280>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d022      	beq.n	8007ca4 <HAL_DMA_Abort_IT+0xc8>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a7f      	ldr	r2, [pc, #508]	; (8007e60 <HAL_DMA_Abort_IT+0x284>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d01d      	beq.n	8007ca4 <HAL_DMA_Abort_IT+0xc8>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a7d      	ldr	r2, [pc, #500]	; (8007e64 <HAL_DMA_Abort_IT+0x288>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d018      	beq.n	8007ca4 <HAL_DMA_Abort_IT+0xc8>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a7c      	ldr	r2, [pc, #496]	; (8007e68 <HAL_DMA_Abort_IT+0x28c>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d013      	beq.n	8007ca4 <HAL_DMA_Abort_IT+0xc8>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a7a      	ldr	r2, [pc, #488]	; (8007e6c <HAL_DMA_Abort_IT+0x290>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d00e      	beq.n	8007ca4 <HAL_DMA_Abort_IT+0xc8>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a79      	ldr	r2, [pc, #484]	; (8007e70 <HAL_DMA_Abort_IT+0x294>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d009      	beq.n	8007ca4 <HAL_DMA_Abort_IT+0xc8>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a77      	ldr	r2, [pc, #476]	; (8007e74 <HAL_DMA_Abort_IT+0x298>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d004      	beq.n	8007ca4 <HAL_DMA_Abort_IT+0xc8>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a76      	ldr	r2, [pc, #472]	; (8007e78 <HAL_DMA_Abort_IT+0x29c>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d101      	bne.n	8007ca8 <HAL_DMA_Abort_IT+0xcc>
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e000      	b.n	8007caa <HAL_DMA_Abort_IT+0xce>
 8007ca8:	2300      	movs	r3, #0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d065      	beq.n	8007d7a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2204      	movs	r2, #4
 8007cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a60      	ldr	r2, [pc, #384]	; (8007e3c <HAL_DMA_Abort_IT+0x260>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d04a      	beq.n	8007d56 <HAL_DMA_Abort_IT+0x17a>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a5e      	ldr	r2, [pc, #376]	; (8007e40 <HAL_DMA_Abort_IT+0x264>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d045      	beq.n	8007d56 <HAL_DMA_Abort_IT+0x17a>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a5d      	ldr	r2, [pc, #372]	; (8007e44 <HAL_DMA_Abort_IT+0x268>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d040      	beq.n	8007d56 <HAL_DMA_Abort_IT+0x17a>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a5b      	ldr	r2, [pc, #364]	; (8007e48 <HAL_DMA_Abort_IT+0x26c>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d03b      	beq.n	8007d56 <HAL_DMA_Abort_IT+0x17a>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a5a      	ldr	r2, [pc, #360]	; (8007e4c <HAL_DMA_Abort_IT+0x270>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d036      	beq.n	8007d56 <HAL_DMA_Abort_IT+0x17a>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a58      	ldr	r2, [pc, #352]	; (8007e50 <HAL_DMA_Abort_IT+0x274>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d031      	beq.n	8007d56 <HAL_DMA_Abort_IT+0x17a>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a57      	ldr	r2, [pc, #348]	; (8007e54 <HAL_DMA_Abort_IT+0x278>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d02c      	beq.n	8007d56 <HAL_DMA_Abort_IT+0x17a>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a55      	ldr	r2, [pc, #340]	; (8007e58 <HAL_DMA_Abort_IT+0x27c>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d027      	beq.n	8007d56 <HAL_DMA_Abort_IT+0x17a>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a54      	ldr	r2, [pc, #336]	; (8007e5c <HAL_DMA_Abort_IT+0x280>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d022      	beq.n	8007d56 <HAL_DMA_Abort_IT+0x17a>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a52      	ldr	r2, [pc, #328]	; (8007e60 <HAL_DMA_Abort_IT+0x284>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d01d      	beq.n	8007d56 <HAL_DMA_Abort_IT+0x17a>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a51      	ldr	r2, [pc, #324]	; (8007e64 <HAL_DMA_Abort_IT+0x288>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d018      	beq.n	8007d56 <HAL_DMA_Abort_IT+0x17a>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a4f      	ldr	r2, [pc, #316]	; (8007e68 <HAL_DMA_Abort_IT+0x28c>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d013      	beq.n	8007d56 <HAL_DMA_Abort_IT+0x17a>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a4e      	ldr	r2, [pc, #312]	; (8007e6c <HAL_DMA_Abort_IT+0x290>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d00e      	beq.n	8007d56 <HAL_DMA_Abort_IT+0x17a>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a4c      	ldr	r2, [pc, #304]	; (8007e70 <HAL_DMA_Abort_IT+0x294>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d009      	beq.n	8007d56 <HAL_DMA_Abort_IT+0x17a>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a4b      	ldr	r2, [pc, #300]	; (8007e74 <HAL_DMA_Abort_IT+0x298>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d004      	beq.n	8007d56 <HAL_DMA_Abort_IT+0x17a>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a49      	ldr	r2, [pc, #292]	; (8007e78 <HAL_DMA_Abort_IT+0x29c>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d108      	bne.n	8007d68 <HAL_DMA_Abort_IT+0x18c>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f022 0201 	bic.w	r2, r2, #1
 8007d64:	601a      	str	r2, [r3, #0]
 8007d66:	e147      	b.n	8007ff8 <HAL_DMA_Abort_IT+0x41c>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f022 0201 	bic.w	r2, r2, #1
 8007d76:	601a      	str	r2, [r3, #0]
 8007d78:	e13e      	b.n	8007ff8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f022 020e 	bic.w	r2, r2, #14
 8007d88:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a2b      	ldr	r2, [pc, #172]	; (8007e3c <HAL_DMA_Abort_IT+0x260>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d04a      	beq.n	8007e2a <HAL_DMA_Abort_IT+0x24e>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a29      	ldr	r2, [pc, #164]	; (8007e40 <HAL_DMA_Abort_IT+0x264>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d045      	beq.n	8007e2a <HAL_DMA_Abort_IT+0x24e>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a28      	ldr	r2, [pc, #160]	; (8007e44 <HAL_DMA_Abort_IT+0x268>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d040      	beq.n	8007e2a <HAL_DMA_Abort_IT+0x24e>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a26      	ldr	r2, [pc, #152]	; (8007e48 <HAL_DMA_Abort_IT+0x26c>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d03b      	beq.n	8007e2a <HAL_DMA_Abort_IT+0x24e>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a25      	ldr	r2, [pc, #148]	; (8007e4c <HAL_DMA_Abort_IT+0x270>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d036      	beq.n	8007e2a <HAL_DMA_Abort_IT+0x24e>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a23      	ldr	r2, [pc, #140]	; (8007e50 <HAL_DMA_Abort_IT+0x274>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d031      	beq.n	8007e2a <HAL_DMA_Abort_IT+0x24e>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a22      	ldr	r2, [pc, #136]	; (8007e54 <HAL_DMA_Abort_IT+0x278>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d02c      	beq.n	8007e2a <HAL_DMA_Abort_IT+0x24e>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a20      	ldr	r2, [pc, #128]	; (8007e58 <HAL_DMA_Abort_IT+0x27c>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d027      	beq.n	8007e2a <HAL_DMA_Abort_IT+0x24e>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a1f      	ldr	r2, [pc, #124]	; (8007e5c <HAL_DMA_Abort_IT+0x280>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d022      	beq.n	8007e2a <HAL_DMA_Abort_IT+0x24e>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a1d      	ldr	r2, [pc, #116]	; (8007e60 <HAL_DMA_Abort_IT+0x284>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d01d      	beq.n	8007e2a <HAL_DMA_Abort_IT+0x24e>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a1c      	ldr	r2, [pc, #112]	; (8007e64 <HAL_DMA_Abort_IT+0x288>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d018      	beq.n	8007e2a <HAL_DMA_Abort_IT+0x24e>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a1a      	ldr	r2, [pc, #104]	; (8007e68 <HAL_DMA_Abort_IT+0x28c>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d013      	beq.n	8007e2a <HAL_DMA_Abort_IT+0x24e>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a19      	ldr	r2, [pc, #100]	; (8007e6c <HAL_DMA_Abort_IT+0x290>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d00e      	beq.n	8007e2a <HAL_DMA_Abort_IT+0x24e>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a17      	ldr	r2, [pc, #92]	; (8007e70 <HAL_DMA_Abort_IT+0x294>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d009      	beq.n	8007e2a <HAL_DMA_Abort_IT+0x24e>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a16      	ldr	r2, [pc, #88]	; (8007e74 <HAL_DMA_Abort_IT+0x298>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d004      	beq.n	8007e2a <HAL_DMA_Abort_IT+0x24e>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a14      	ldr	r2, [pc, #80]	; (8007e78 <HAL_DMA_Abort_IT+0x29c>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d128      	bne.n	8007e7c <HAL_DMA_Abort_IT+0x2a0>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f022 0201 	bic.w	r2, r2, #1
 8007e38:	601a      	str	r2, [r3, #0]
 8007e3a:	e027      	b.n	8007e8c <HAL_DMA_Abort_IT+0x2b0>
 8007e3c:	40020010 	.word	0x40020010
 8007e40:	40020028 	.word	0x40020028
 8007e44:	40020040 	.word	0x40020040
 8007e48:	40020058 	.word	0x40020058
 8007e4c:	40020070 	.word	0x40020070
 8007e50:	40020088 	.word	0x40020088
 8007e54:	400200a0 	.word	0x400200a0
 8007e58:	400200b8 	.word	0x400200b8
 8007e5c:	40020410 	.word	0x40020410
 8007e60:	40020428 	.word	0x40020428
 8007e64:	40020440 	.word	0x40020440
 8007e68:	40020458 	.word	0x40020458
 8007e6c:	40020470 	.word	0x40020470
 8007e70:	40020488 	.word	0x40020488
 8007e74:	400204a0 	.word	0x400204a0
 8007e78:	400204b8 	.word	0x400204b8
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f022 0201 	bic.w	r2, r2, #1
 8007e8a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a5c      	ldr	r2, [pc, #368]	; (8008004 <HAL_DMA_Abort_IT+0x428>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d072      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x3a0>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a5b      	ldr	r2, [pc, #364]	; (8008008 <HAL_DMA_Abort_IT+0x42c>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d06d      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x3a0>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a59      	ldr	r2, [pc, #356]	; (800800c <HAL_DMA_Abort_IT+0x430>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d068      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x3a0>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a58      	ldr	r2, [pc, #352]	; (8008010 <HAL_DMA_Abort_IT+0x434>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d063      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x3a0>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a56      	ldr	r2, [pc, #344]	; (8008014 <HAL_DMA_Abort_IT+0x438>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d05e      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x3a0>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a55      	ldr	r2, [pc, #340]	; (8008018 <HAL_DMA_Abort_IT+0x43c>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d059      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x3a0>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a53      	ldr	r2, [pc, #332]	; (800801c <HAL_DMA_Abort_IT+0x440>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d054      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x3a0>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a52      	ldr	r2, [pc, #328]	; (8008020 <HAL_DMA_Abort_IT+0x444>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d04f      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x3a0>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a50      	ldr	r2, [pc, #320]	; (8008024 <HAL_DMA_Abort_IT+0x448>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d04a      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x3a0>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a4f      	ldr	r2, [pc, #316]	; (8008028 <HAL_DMA_Abort_IT+0x44c>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d045      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x3a0>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a4d      	ldr	r2, [pc, #308]	; (800802c <HAL_DMA_Abort_IT+0x450>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d040      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x3a0>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a4c      	ldr	r2, [pc, #304]	; (8008030 <HAL_DMA_Abort_IT+0x454>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d03b      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x3a0>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a4a      	ldr	r2, [pc, #296]	; (8008034 <HAL_DMA_Abort_IT+0x458>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d036      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x3a0>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a49      	ldr	r2, [pc, #292]	; (8008038 <HAL_DMA_Abort_IT+0x45c>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d031      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x3a0>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a47      	ldr	r2, [pc, #284]	; (800803c <HAL_DMA_Abort_IT+0x460>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d02c      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x3a0>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a46      	ldr	r2, [pc, #280]	; (8008040 <HAL_DMA_Abort_IT+0x464>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d027      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x3a0>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a44      	ldr	r2, [pc, #272]	; (8008044 <HAL_DMA_Abort_IT+0x468>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d022      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x3a0>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a43      	ldr	r2, [pc, #268]	; (8008048 <HAL_DMA_Abort_IT+0x46c>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d01d      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x3a0>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a41      	ldr	r2, [pc, #260]	; (800804c <HAL_DMA_Abort_IT+0x470>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d018      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x3a0>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a40      	ldr	r2, [pc, #256]	; (8008050 <HAL_DMA_Abort_IT+0x474>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d013      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x3a0>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a3e      	ldr	r2, [pc, #248]	; (8008054 <HAL_DMA_Abort_IT+0x478>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d00e      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x3a0>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a3d      	ldr	r2, [pc, #244]	; (8008058 <HAL_DMA_Abort_IT+0x47c>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d009      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x3a0>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a3b      	ldr	r2, [pc, #236]	; (800805c <HAL_DMA_Abort_IT+0x480>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d004      	beq.n	8007f7c <HAL_DMA_Abort_IT+0x3a0>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a3a      	ldr	r2, [pc, #232]	; (8008060 <HAL_DMA_Abort_IT+0x484>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d101      	bne.n	8007f80 <HAL_DMA_Abort_IT+0x3a4>
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e000      	b.n	8007f82 <HAL_DMA_Abort_IT+0x3a6>
 8007f80:	2300      	movs	r3, #0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d028      	beq.n	8007fd8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f94:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f9a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fa0:	f003 031f 	and.w	r3, r3, #31
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	409a      	lsls	r2, r3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007fb4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00c      	beq.n	8007fd8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007fcc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007fd6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d003      	beq.n	8007ff8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	40020010 	.word	0x40020010
 8008008:	40020028 	.word	0x40020028
 800800c:	40020040 	.word	0x40020040
 8008010:	40020058 	.word	0x40020058
 8008014:	40020070 	.word	0x40020070
 8008018:	40020088 	.word	0x40020088
 800801c:	400200a0 	.word	0x400200a0
 8008020:	400200b8 	.word	0x400200b8
 8008024:	40020410 	.word	0x40020410
 8008028:	40020428 	.word	0x40020428
 800802c:	40020440 	.word	0x40020440
 8008030:	40020458 	.word	0x40020458
 8008034:	40020470 	.word	0x40020470
 8008038:	40020488 	.word	0x40020488
 800803c:	400204a0 	.word	0x400204a0
 8008040:	400204b8 	.word	0x400204b8
 8008044:	58025408 	.word	0x58025408
 8008048:	5802541c 	.word	0x5802541c
 800804c:	58025430 	.word	0x58025430
 8008050:	58025444 	.word	0x58025444
 8008054:	58025458 	.word	0x58025458
 8008058:	5802546c 	.word	0x5802546c
 800805c:	58025480 	.word	0x58025480
 8008060:	58025494 	.word	0x58025494

08008064 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b08a      	sub	sp, #40	; 0x28
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800806c:	2300      	movs	r3, #0
 800806e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008070:	4b67      	ldr	r3, [pc, #412]	; (8008210 <HAL_DMA_IRQHandler+0x1ac>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a67      	ldr	r2, [pc, #412]	; (8008214 <HAL_DMA_IRQHandler+0x1b0>)
 8008076:	fba2 2303 	umull	r2, r3, r2, r3
 800807a:	0a9b      	lsrs	r3, r3, #10
 800807c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008082:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008088:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800808a:	6a3b      	ldr	r3, [r7, #32]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a5f      	ldr	r2, [pc, #380]	; (8008218 <HAL_DMA_IRQHandler+0x1b4>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d04a      	beq.n	8008136 <HAL_DMA_IRQHandler+0xd2>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a5d      	ldr	r2, [pc, #372]	; (800821c <HAL_DMA_IRQHandler+0x1b8>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d045      	beq.n	8008136 <HAL_DMA_IRQHandler+0xd2>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a5c      	ldr	r2, [pc, #368]	; (8008220 <HAL_DMA_IRQHandler+0x1bc>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d040      	beq.n	8008136 <HAL_DMA_IRQHandler+0xd2>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a5a      	ldr	r2, [pc, #360]	; (8008224 <HAL_DMA_IRQHandler+0x1c0>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d03b      	beq.n	8008136 <HAL_DMA_IRQHandler+0xd2>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a59      	ldr	r2, [pc, #356]	; (8008228 <HAL_DMA_IRQHandler+0x1c4>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d036      	beq.n	8008136 <HAL_DMA_IRQHandler+0xd2>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a57      	ldr	r2, [pc, #348]	; (800822c <HAL_DMA_IRQHandler+0x1c8>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d031      	beq.n	8008136 <HAL_DMA_IRQHandler+0xd2>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a56      	ldr	r2, [pc, #344]	; (8008230 <HAL_DMA_IRQHandler+0x1cc>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d02c      	beq.n	8008136 <HAL_DMA_IRQHandler+0xd2>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a54      	ldr	r2, [pc, #336]	; (8008234 <HAL_DMA_IRQHandler+0x1d0>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d027      	beq.n	8008136 <HAL_DMA_IRQHandler+0xd2>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a53      	ldr	r2, [pc, #332]	; (8008238 <HAL_DMA_IRQHandler+0x1d4>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d022      	beq.n	8008136 <HAL_DMA_IRQHandler+0xd2>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a51      	ldr	r2, [pc, #324]	; (800823c <HAL_DMA_IRQHandler+0x1d8>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d01d      	beq.n	8008136 <HAL_DMA_IRQHandler+0xd2>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a50      	ldr	r2, [pc, #320]	; (8008240 <HAL_DMA_IRQHandler+0x1dc>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d018      	beq.n	8008136 <HAL_DMA_IRQHandler+0xd2>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a4e      	ldr	r2, [pc, #312]	; (8008244 <HAL_DMA_IRQHandler+0x1e0>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d013      	beq.n	8008136 <HAL_DMA_IRQHandler+0xd2>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a4d      	ldr	r2, [pc, #308]	; (8008248 <HAL_DMA_IRQHandler+0x1e4>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d00e      	beq.n	8008136 <HAL_DMA_IRQHandler+0xd2>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a4b      	ldr	r2, [pc, #300]	; (800824c <HAL_DMA_IRQHandler+0x1e8>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d009      	beq.n	8008136 <HAL_DMA_IRQHandler+0xd2>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a4a      	ldr	r2, [pc, #296]	; (8008250 <HAL_DMA_IRQHandler+0x1ec>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d004      	beq.n	8008136 <HAL_DMA_IRQHandler+0xd2>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a48      	ldr	r2, [pc, #288]	; (8008254 <HAL_DMA_IRQHandler+0x1f0>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d101      	bne.n	800813a <HAL_DMA_IRQHandler+0xd6>
 8008136:	2301      	movs	r3, #1
 8008138:	e000      	b.n	800813c <HAL_DMA_IRQHandler+0xd8>
 800813a:	2300      	movs	r3, #0
 800813c:	2b00      	cmp	r3, #0
 800813e:	f000 842b 	beq.w	8008998 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008146:	f003 031f 	and.w	r3, r3, #31
 800814a:	2208      	movs	r2, #8
 800814c:	409a      	lsls	r2, r3
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	4013      	ands	r3, r2
 8008152:	2b00      	cmp	r3, #0
 8008154:	f000 80a2 	beq.w	800829c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a2e      	ldr	r2, [pc, #184]	; (8008218 <HAL_DMA_IRQHandler+0x1b4>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d04a      	beq.n	80081f8 <HAL_DMA_IRQHandler+0x194>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a2d      	ldr	r2, [pc, #180]	; (800821c <HAL_DMA_IRQHandler+0x1b8>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d045      	beq.n	80081f8 <HAL_DMA_IRQHandler+0x194>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a2b      	ldr	r2, [pc, #172]	; (8008220 <HAL_DMA_IRQHandler+0x1bc>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d040      	beq.n	80081f8 <HAL_DMA_IRQHandler+0x194>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a2a      	ldr	r2, [pc, #168]	; (8008224 <HAL_DMA_IRQHandler+0x1c0>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d03b      	beq.n	80081f8 <HAL_DMA_IRQHandler+0x194>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a28      	ldr	r2, [pc, #160]	; (8008228 <HAL_DMA_IRQHandler+0x1c4>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d036      	beq.n	80081f8 <HAL_DMA_IRQHandler+0x194>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a27      	ldr	r2, [pc, #156]	; (800822c <HAL_DMA_IRQHandler+0x1c8>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d031      	beq.n	80081f8 <HAL_DMA_IRQHandler+0x194>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a25      	ldr	r2, [pc, #148]	; (8008230 <HAL_DMA_IRQHandler+0x1cc>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d02c      	beq.n	80081f8 <HAL_DMA_IRQHandler+0x194>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a24      	ldr	r2, [pc, #144]	; (8008234 <HAL_DMA_IRQHandler+0x1d0>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d027      	beq.n	80081f8 <HAL_DMA_IRQHandler+0x194>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a22      	ldr	r2, [pc, #136]	; (8008238 <HAL_DMA_IRQHandler+0x1d4>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d022      	beq.n	80081f8 <HAL_DMA_IRQHandler+0x194>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a21      	ldr	r2, [pc, #132]	; (800823c <HAL_DMA_IRQHandler+0x1d8>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d01d      	beq.n	80081f8 <HAL_DMA_IRQHandler+0x194>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a1f      	ldr	r2, [pc, #124]	; (8008240 <HAL_DMA_IRQHandler+0x1dc>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d018      	beq.n	80081f8 <HAL_DMA_IRQHandler+0x194>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a1e      	ldr	r2, [pc, #120]	; (8008244 <HAL_DMA_IRQHandler+0x1e0>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d013      	beq.n	80081f8 <HAL_DMA_IRQHandler+0x194>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a1c      	ldr	r2, [pc, #112]	; (8008248 <HAL_DMA_IRQHandler+0x1e4>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d00e      	beq.n	80081f8 <HAL_DMA_IRQHandler+0x194>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a1b      	ldr	r2, [pc, #108]	; (800824c <HAL_DMA_IRQHandler+0x1e8>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d009      	beq.n	80081f8 <HAL_DMA_IRQHandler+0x194>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a19      	ldr	r2, [pc, #100]	; (8008250 <HAL_DMA_IRQHandler+0x1ec>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d004      	beq.n	80081f8 <HAL_DMA_IRQHandler+0x194>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a18      	ldr	r2, [pc, #96]	; (8008254 <HAL_DMA_IRQHandler+0x1f0>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d12f      	bne.n	8008258 <HAL_DMA_IRQHandler+0x1f4>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f003 0304 	and.w	r3, r3, #4
 8008202:	2b00      	cmp	r3, #0
 8008204:	bf14      	ite	ne
 8008206:	2301      	movne	r3, #1
 8008208:	2300      	moveq	r3, #0
 800820a:	b2db      	uxtb	r3, r3
 800820c:	e02e      	b.n	800826c <HAL_DMA_IRQHandler+0x208>
 800820e:	bf00      	nop
 8008210:	24000090 	.word	0x24000090
 8008214:	1b4e81b5 	.word	0x1b4e81b5
 8008218:	40020010 	.word	0x40020010
 800821c:	40020028 	.word	0x40020028
 8008220:	40020040 	.word	0x40020040
 8008224:	40020058 	.word	0x40020058
 8008228:	40020070 	.word	0x40020070
 800822c:	40020088 	.word	0x40020088
 8008230:	400200a0 	.word	0x400200a0
 8008234:	400200b8 	.word	0x400200b8
 8008238:	40020410 	.word	0x40020410
 800823c:	40020428 	.word	0x40020428
 8008240:	40020440 	.word	0x40020440
 8008244:	40020458 	.word	0x40020458
 8008248:	40020470 	.word	0x40020470
 800824c:	40020488 	.word	0x40020488
 8008250:	400204a0 	.word	0x400204a0
 8008254:	400204b8 	.word	0x400204b8
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f003 0308 	and.w	r3, r3, #8
 8008262:	2b00      	cmp	r3, #0
 8008264:	bf14      	ite	ne
 8008266:	2301      	movne	r3, #1
 8008268:	2300      	moveq	r3, #0
 800826a:	b2db      	uxtb	r3, r3
 800826c:	2b00      	cmp	r3, #0
 800826e:	d015      	beq.n	800829c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f022 0204 	bic.w	r2, r2, #4
 800827e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008284:	f003 031f 	and.w	r3, r3, #31
 8008288:	2208      	movs	r2, #8
 800828a:	409a      	lsls	r2, r3
 800828c:	6a3b      	ldr	r3, [r7, #32]
 800828e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008294:	f043 0201 	orr.w	r2, r3, #1
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082a0:	f003 031f 	and.w	r3, r3, #31
 80082a4:	69ba      	ldr	r2, [r7, #24]
 80082a6:	fa22 f303 	lsr.w	r3, r2, r3
 80082aa:	f003 0301 	and.w	r3, r3, #1
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d06e      	beq.n	8008390 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a69      	ldr	r2, [pc, #420]	; (800845c <HAL_DMA_IRQHandler+0x3f8>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d04a      	beq.n	8008352 <HAL_DMA_IRQHandler+0x2ee>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a67      	ldr	r2, [pc, #412]	; (8008460 <HAL_DMA_IRQHandler+0x3fc>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d045      	beq.n	8008352 <HAL_DMA_IRQHandler+0x2ee>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a66      	ldr	r2, [pc, #408]	; (8008464 <HAL_DMA_IRQHandler+0x400>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d040      	beq.n	8008352 <HAL_DMA_IRQHandler+0x2ee>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a64      	ldr	r2, [pc, #400]	; (8008468 <HAL_DMA_IRQHandler+0x404>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d03b      	beq.n	8008352 <HAL_DMA_IRQHandler+0x2ee>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a63      	ldr	r2, [pc, #396]	; (800846c <HAL_DMA_IRQHandler+0x408>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d036      	beq.n	8008352 <HAL_DMA_IRQHandler+0x2ee>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a61      	ldr	r2, [pc, #388]	; (8008470 <HAL_DMA_IRQHandler+0x40c>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d031      	beq.n	8008352 <HAL_DMA_IRQHandler+0x2ee>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a60      	ldr	r2, [pc, #384]	; (8008474 <HAL_DMA_IRQHandler+0x410>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d02c      	beq.n	8008352 <HAL_DMA_IRQHandler+0x2ee>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a5e      	ldr	r2, [pc, #376]	; (8008478 <HAL_DMA_IRQHandler+0x414>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d027      	beq.n	8008352 <HAL_DMA_IRQHandler+0x2ee>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a5d      	ldr	r2, [pc, #372]	; (800847c <HAL_DMA_IRQHandler+0x418>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d022      	beq.n	8008352 <HAL_DMA_IRQHandler+0x2ee>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a5b      	ldr	r2, [pc, #364]	; (8008480 <HAL_DMA_IRQHandler+0x41c>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d01d      	beq.n	8008352 <HAL_DMA_IRQHandler+0x2ee>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a5a      	ldr	r2, [pc, #360]	; (8008484 <HAL_DMA_IRQHandler+0x420>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d018      	beq.n	8008352 <HAL_DMA_IRQHandler+0x2ee>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a58      	ldr	r2, [pc, #352]	; (8008488 <HAL_DMA_IRQHandler+0x424>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d013      	beq.n	8008352 <HAL_DMA_IRQHandler+0x2ee>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a57      	ldr	r2, [pc, #348]	; (800848c <HAL_DMA_IRQHandler+0x428>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d00e      	beq.n	8008352 <HAL_DMA_IRQHandler+0x2ee>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a55      	ldr	r2, [pc, #340]	; (8008490 <HAL_DMA_IRQHandler+0x42c>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d009      	beq.n	8008352 <HAL_DMA_IRQHandler+0x2ee>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a54      	ldr	r2, [pc, #336]	; (8008494 <HAL_DMA_IRQHandler+0x430>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d004      	beq.n	8008352 <HAL_DMA_IRQHandler+0x2ee>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a52      	ldr	r2, [pc, #328]	; (8008498 <HAL_DMA_IRQHandler+0x434>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d10a      	bne.n	8008368 <HAL_DMA_IRQHandler+0x304>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	695b      	ldr	r3, [r3, #20]
 8008358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800835c:	2b00      	cmp	r3, #0
 800835e:	bf14      	ite	ne
 8008360:	2301      	movne	r3, #1
 8008362:	2300      	moveq	r3, #0
 8008364:	b2db      	uxtb	r3, r3
 8008366:	e003      	b.n	8008370 <HAL_DMA_IRQHandler+0x30c>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2300      	movs	r3, #0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00d      	beq.n	8008390 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008378:	f003 031f 	and.w	r3, r3, #31
 800837c:	2201      	movs	r2, #1
 800837e:	409a      	lsls	r2, r3
 8008380:	6a3b      	ldr	r3, [r7, #32]
 8008382:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008388:	f043 0202 	orr.w	r2, r3, #2
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008394:	f003 031f 	and.w	r3, r3, #31
 8008398:	2204      	movs	r2, #4
 800839a:	409a      	lsls	r2, r3
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	4013      	ands	r3, r2
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f000 808f 	beq.w	80084c4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a2c      	ldr	r2, [pc, #176]	; (800845c <HAL_DMA_IRQHandler+0x3f8>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d04a      	beq.n	8008446 <HAL_DMA_IRQHandler+0x3e2>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a2a      	ldr	r2, [pc, #168]	; (8008460 <HAL_DMA_IRQHandler+0x3fc>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d045      	beq.n	8008446 <HAL_DMA_IRQHandler+0x3e2>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a29      	ldr	r2, [pc, #164]	; (8008464 <HAL_DMA_IRQHandler+0x400>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d040      	beq.n	8008446 <HAL_DMA_IRQHandler+0x3e2>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a27      	ldr	r2, [pc, #156]	; (8008468 <HAL_DMA_IRQHandler+0x404>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d03b      	beq.n	8008446 <HAL_DMA_IRQHandler+0x3e2>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a26      	ldr	r2, [pc, #152]	; (800846c <HAL_DMA_IRQHandler+0x408>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d036      	beq.n	8008446 <HAL_DMA_IRQHandler+0x3e2>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a24      	ldr	r2, [pc, #144]	; (8008470 <HAL_DMA_IRQHandler+0x40c>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d031      	beq.n	8008446 <HAL_DMA_IRQHandler+0x3e2>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a23      	ldr	r2, [pc, #140]	; (8008474 <HAL_DMA_IRQHandler+0x410>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d02c      	beq.n	8008446 <HAL_DMA_IRQHandler+0x3e2>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a21      	ldr	r2, [pc, #132]	; (8008478 <HAL_DMA_IRQHandler+0x414>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d027      	beq.n	8008446 <HAL_DMA_IRQHandler+0x3e2>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a20      	ldr	r2, [pc, #128]	; (800847c <HAL_DMA_IRQHandler+0x418>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d022      	beq.n	8008446 <HAL_DMA_IRQHandler+0x3e2>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a1e      	ldr	r2, [pc, #120]	; (8008480 <HAL_DMA_IRQHandler+0x41c>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d01d      	beq.n	8008446 <HAL_DMA_IRQHandler+0x3e2>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a1d      	ldr	r2, [pc, #116]	; (8008484 <HAL_DMA_IRQHandler+0x420>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d018      	beq.n	8008446 <HAL_DMA_IRQHandler+0x3e2>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a1b      	ldr	r2, [pc, #108]	; (8008488 <HAL_DMA_IRQHandler+0x424>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d013      	beq.n	8008446 <HAL_DMA_IRQHandler+0x3e2>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a1a      	ldr	r2, [pc, #104]	; (800848c <HAL_DMA_IRQHandler+0x428>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d00e      	beq.n	8008446 <HAL_DMA_IRQHandler+0x3e2>
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a18      	ldr	r2, [pc, #96]	; (8008490 <HAL_DMA_IRQHandler+0x42c>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d009      	beq.n	8008446 <HAL_DMA_IRQHandler+0x3e2>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a17      	ldr	r2, [pc, #92]	; (8008494 <HAL_DMA_IRQHandler+0x430>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d004      	beq.n	8008446 <HAL_DMA_IRQHandler+0x3e2>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a15      	ldr	r2, [pc, #84]	; (8008498 <HAL_DMA_IRQHandler+0x434>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d12a      	bne.n	800849c <HAL_DMA_IRQHandler+0x438>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 0302 	and.w	r3, r3, #2
 8008450:	2b00      	cmp	r3, #0
 8008452:	bf14      	ite	ne
 8008454:	2301      	movne	r3, #1
 8008456:	2300      	moveq	r3, #0
 8008458:	b2db      	uxtb	r3, r3
 800845a:	e023      	b.n	80084a4 <HAL_DMA_IRQHandler+0x440>
 800845c:	40020010 	.word	0x40020010
 8008460:	40020028 	.word	0x40020028
 8008464:	40020040 	.word	0x40020040
 8008468:	40020058 	.word	0x40020058
 800846c:	40020070 	.word	0x40020070
 8008470:	40020088 	.word	0x40020088
 8008474:	400200a0 	.word	0x400200a0
 8008478:	400200b8 	.word	0x400200b8
 800847c:	40020410 	.word	0x40020410
 8008480:	40020428 	.word	0x40020428
 8008484:	40020440 	.word	0x40020440
 8008488:	40020458 	.word	0x40020458
 800848c:	40020470 	.word	0x40020470
 8008490:	40020488 	.word	0x40020488
 8008494:	400204a0 	.word	0x400204a0
 8008498:	400204b8 	.word	0x400204b8
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	2300      	movs	r3, #0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00d      	beq.n	80084c4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084ac:	f003 031f 	and.w	r3, r3, #31
 80084b0:	2204      	movs	r2, #4
 80084b2:	409a      	lsls	r2, r3
 80084b4:	6a3b      	ldr	r3, [r7, #32]
 80084b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084bc:	f043 0204 	orr.w	r2, r3, #4
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084c8:	f003 031f 	and.w	r3, r3, #31
 80084cc:	2210      	movs	r2, #16
 80084ce:	409a      	lsls	r2, r3
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	4013      	ands	r3, r2
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f000 80a6 	beq.w	8008626 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a85      	ldr	r2, [pc, #532]	; (80086f4 <HAL_DMA_IRQHandler+0x690>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d04a      	beq.n	800857a <HAL_DMA_IRQHandler+0x516>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a83      	ldr	r2, [pc, #524]	; (80086f8 <HAL_DMA_IRQHandler+0x694>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d045      	beq.n	800857a <HAL_DMA_IRQHandler+0x516>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a82      	ldr	r2, [pc, #520]	; (80086fc <HAL_DMA_IRQHandler+0x698>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d040      	beq.n	800857a <HAL_DMA_IRQHandler+0x516>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a80      	ldr	r2, [pc, #512]	; (8008700 <HAL_DMA_IRQHandler+0x69c>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d03b      	beq.n	800857a <HAL_DMA_IRQHandler+0x516>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a7f      	ldr	r2, [pc, #508]	; (8008704 <HAL_DMA_IRQHandler+0x6a0>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d036      	beq.n	800857a <HAL_DMA_IRQHandler+0x516>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a7d      	ldr	r2, [pc, #500]	; (8008708 <HAL_DMA_IRQHandler+0x6a4>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d031      	beq.n	800857a <HAL_DMA_IRQHandler+0x516>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a7c      	ldr	r2, [pc, #496]	; (800870c <HAL_DMA_IRQHandler+0x6a8>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d02c      	beq.n	800857a <HAL_DMA_IRQHandler+0x516>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a7a      	ldr	r2, [pc, #488]	; (8008710 <HAL_DMA_IRQHandler+0x6ac>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d027      	beq.n	800857a <HAL_DMA_IRQHandler+0x516>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a79      	ldr	r2, [pc, #484]	; (8008714 <HAL_DMA_IRQHandler+0x6b0>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d022      	beq.n	800857a <HAL_DMA_IRQHandler+0x516>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a77      	ldr	r2, [pc, #476]	; (8008718 <HAL_DMA_IRQHandler+0x6b4>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d01d      	beq.n	800857a <HAL_DMA_IRQHandler+0x516>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a76      	ldr	r2, [pc, #472]	; (800871c <HAL_DMA_IRQHandler+0x6b8>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d018      	beq.n	800857a <HAL_DMA_IRQHandler+0x516>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a74      	ldr	r2, [pc, #464]	; (8008720 <HAL_DMA_IRQHandler+0x6bc>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d013      	beq.n	800857a <HAL_DMA_IRQHandler+0x516>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a73      	ldr	r2, [pc, #460]	; (8008724 <HAL_DMA_IRQHandler+0x6c0>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d00e      	beq.n	800857a <HAL_DMA_IRQHandler+0x516>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a71      	ldr	r2, [pc, #452]	; (8008728 <HAL_DMA_IRQHandler+0x6c4>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d009      	beq.n	800857a <HAL_DMA_IRQHandler+0x516>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a70      	ldr	r2, [pc, #448]	; (800872c <HAL_DMA_IRQHandler+0x6c8>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d004      	beq.n	800857a <HAL_DMA_IRQHandler+0x516>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a6e      	ldr	r2, [pc, #440]	; (8008730 <HAL_DMA_IRQHandler+0x6cc>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d10a      	bne.n	8008590 <HAL_DMA_IRQHandler+0x52c>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 0308 	and.w	r3, r3, #8
 8008584:	2b00      	cmp	r3, #0
 8008586:	bf14      	ite	ne
 8008588:	2301      	movne	r3, #1
 800858a:	2300      	moveq	r3, #0
 800858c:	b2db      	uxtb	r3, r3
 800858e:	e009      	b.n	80085a4 <HAL_DMA_IRQHandler+0x540>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f003 0304 	and.w	r3, r3, #4
 800859a:	2b00      	cmp	r3, #0
 800859c:	bf14      	ite	ne
 800859e:	2301      	movne	r3, #1
 80085a0:	2300      	moveq	r3, #0
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d03e      	beq.n	8008626 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085ac:	f003 031f 	and.w	r3, r3, #31
 80085b0:	2210      	movs	r2, #16
 80085b2:	409a      	lsls	r2, r3
 80085b4:	6a3b      	ldr	r3, [r7, #32]
 80085b6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d018      	beq.n	80085f8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d108      	bne.n	80085e6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d024      	beq.n	8008626 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	4798      	blx	r3
 80085e4:	e01f      	b.n	8008626 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d01b      	beq.n	8008626 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	4798      	blx	r3
 80085f6:	e016      	b.n	8008626 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008602:	2b00      	cmp	r3, #0
 8008604:	d107      	bne.n	8008616 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f022 0208 	bic.w	r2, r2, #8
 8008614:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861a:	2b00      	cmp	r3, #0
 800861c:	d003      	beq.n	8008626 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800862a:	f003 031f 	and.w	r3, r3, #31
 800862e:	2220      	movs	r2, #32
 8008630:	409a      	lsls	r2, r3
 8008632:	69bb      	ldr	r3, [r7, #24]
 8008634:	4013      	ands	r3, r2
 8008636:	2b00      	cmp	r3, #0
 8008638:	f000 8110 	beq.w	800885c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a2c      	ldr	r2, [pc, #176]	; (80086f4 <HAL_DMA_IRQHandler+0x690>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d04a      	beq.n	80086dc <HAL_DMA_IRQHandler+0x678>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a2b      	ldr	r2, [pc, #172]	; (80086f8 <HAL_DMA_IRQHandler+0x694>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d045      	beq.n	80086dc <HAL_DMA_IRQHandler+0x678>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a29      	ldr	r2, [pc, #164]	; (80086fc <HAL_DMA_IRQHandler+0x698>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d040      	beq.n	80086dc <HAL_DMA_IRQHandler+0x678>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a28      	ldr	r2, [pc, #160]	; (8008700 <HAL_DMA_IRQHandler+0x69c>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d03b      	beq.n	80086dc <HAL_DMA_IRQHandler+0x678>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a26      	ldr	r2, [pc, #152]	; (8008704 <HAL_DMA_IRQHandler+0x6a0>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d036      	beq.n	80086dc <HAL_DMA_IRQHandler+0x678>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a25      	ldr	r2, [pc, #148]	; (8008708 <HAL_DMA_IRQHandler+0x6a4>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d031      	beq.n	80086dc <HAL_DMA_IRQHandler+0x678>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a23      	ldr	r2, [pc, #140]	; (800870c <HAL_DMA_IRQHandler+0x6a8>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d02c      	beq.n	80086dc <HAL_DMA_IRQHandler+0x678>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a22      	ldr	r2, [pc, #136]	; (8008710 <HAL_DMA_IRQHandler+0x6ac>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d027      	beq.n	80086dc <HAL_DMA_IRQHandler+0x678>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a20      	ldr	r2, [pc, #128]	; (8008714 <HAL_DMA_IRQHandler+0x6b0>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d022      	beq.n	80086dc <HAL_DMA_IRQHandler+0x678>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a1f      	ldr	r2, [pc, #124]	; (8008718 <HAL_DMA_IRQHandler+0x6b4>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d01d      	beq.n	80086dc <HAL_DMA_IRQHandler+0x678>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a1d      	ldr	r2, [pc, #116]	; (800871c <HAL_DMA_IRQHandler+0x6b8>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d018      	beq.n	80086dc <HAL_DMA_IRQHandler+0x678>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a1c      	ldr	r2, [pc, #112]	; (8008720 <HAL_DMA_IRQHandler+0x6bc>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d013      	beq.n	80086dc <HAL_DMA_IRQHandler+0x678>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a1a      	ldr	r2, [pc, #104]	; (8008724 <HAL_DMA_IRQHandler+0x6c0>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d00e      	beq.n	80086dc <HAL_DMA_IRQHandler+0x678>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a19      	ldr	r2, [pc, #100]	; (8008728 <HAL_DMA_IRQHandler+0x6c4>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d009      	beq.n	80086dc <HAL_DMA_IRQHandler+0x678>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a17      	ldr	r2, [pc, #92]	; (800872c <HAL_DMA_IRQHandler+0x6c8>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d004      	beq.n	80086dc <HAL_DMA_IRQHandler+0x678>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a16      	ldr	r2, [pc, #88]	; (8008730 <HAL_DMA_IRQHandler+0x6cc>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d12b      	bne.n	8008734 <HAL_DMA_IRQHandler+0x6d0>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 0310 	and.w	r3, r3, #16
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	bf14      	ite	ne
 80086ea:	2301      	movne	r3, #1
 80086ec:	2300      	moveq	r3, #0
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	e02a      	b.n	8008748 <HAL_DMA_IRQHandler+0x6e4>
 80086f2:	bf00      	nop
 80086f4:	40020010 	.word	0x40020010
 80086f8:	40020028 	.word	0x40020028
 80086fc:	40020040 	.word	0x40020040
 8008700:	40020058 	.word	0x40020058
 8008704:	40020070 	.word	0x40020070
 8008708:	40020088 	.word	0x40020088
 800870c:	400200a0 	.word	0x400200a0
 8008710:	400200b8 	.word	0x400200b8
 8008714:	40020410 	.word	0x40020410
 8008718:	40020428 	.word	0x40020428
 800871c:	40020440 	.word	0x40020440
 8008720:	40020458 	.word	0x40020458
 8008724:	40020470 	.word	0x40020470
 8008728:	40020488 	.word	0x40020488
 800872c:	400204a0 	.word	0x400204a0
 8008730:	400204b8 	.word	0x400204b8
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f003 0302 	and.w	r3, r3, #2
 800873e:	2b00      	cmp	r3, #0
 8008740:	bf14      	ite	ne
 8008742:	2301      	movne	r3, #1
 8008744:	2300      	moveq	r3, #0
 8008746:	b2db      	uxtb	r3, r3
 8008748:	2b00      	cmp	r3, #0
 800874a:	f000 8087 	beq.w	800885c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008752:	f003 031f 	and.w	r3, r3, #31
 8008756:	2220      	movs	r2, #32
 8008758:	409a      	lsls	r2, r3
 800875a:	6a3b      	ldr	r3, [r7, #32]
 800875c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008764:	b2db      	uxtb	r3, r3
 8008766:	2b04      	cmp	r3, #4
 8008768:	d139      	bne.n	80087de <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f022 0216 	bic.w	r2, r2, #22
 8008778:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	695a      	ldr	r2, [r3, #20]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008788:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878e:	2b00      	cmp	r3, #0
 8008790:	d103      	bne.n	800879a <HAL_DMA_IRQHandler+0x736>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008796:	2b00      	cmp	r3, #0
 8008798:	d007      	beq.n	80087aa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f022 0208 	bic.w	r2, r2, #8
 80087a8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087ae:	f003 031f 	and.w	r3, r3, #31
 80087b2:	223f      	movs	r2, #63	; 0x3f
 80087b4:	409a      	lsls	r2, r3
 80087b6:	6a3b      	ldr	r3, [r7, #32]
 80087b8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2201      	movs	r2, #1
 80087be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	f000 834a 	beq.w	8008e68 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	4798      	blx	r3
          }
          return;
 80087dc:	e344      	b.n	8008e68 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d018      	beq.n	800881e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d108      	bne.n	800880c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d02c      	beq.n	800885c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	4798      	blx	r3
 800880a:	e027      	b.n	800885c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008810:	2b00      	cmp	r3, #0
 8008812:	d023      	beq.n	800885c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	4798      	blx	r3
 800881c:	e01e      	b.n	800885c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008828:	2b00      	cmp	r3, #0
 800882a:	d10f      	bne.n	800884c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f022 0210 	bic.w	r2, r2, #16
 800883a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008850:	2b00      	cmp	r3, #0
 8008852:	d003      	beq.n	800885c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008860:	2b00      	cmp	r3, #0
 8008862:	f000 8306 	beq.w	8008e72 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800886a:	f003 0301 	and.w	r3, r3, #1
 800886e:	2b00      	cmp	r3, #0
 8008870:	f000 8088 	beq.w	8008984 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2204      	movs	r2, #4
 8008878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a7a      	ldr	r2, [pc, #488]	; (8008a6c <HAL_DMA_IRQHandler+0xa08>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d04a      	beq.n	800891c <HAL_DMA_IRQHandler+0x8b8>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a79      	ldr	r2, [pc, #484]	; (8008a70 <HAL_DMA_IRQHandler+0xa0c>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d045      	beq.n	800891c <HAL_DMA_IRQHandler+0x8b8>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a77      	ldr	r2, [pc, #476]	; (8008a74 <HAL_DMA_IRQHandler+0xa10>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d040      	beq.n	800891c <HAL_DMA_IRQHandler+0x8b8>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a76      	ldr	r2, [pc, #472]	; (8008a78 <HAL_DMA_IRQHandler+0xa14>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d03b      	beq.n	800891c <HAL_DMA_IRQHandler+0x8b8>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a74      	ldr	r2, [pc, #464]	; (8008a7c <HAL_DMA_IRQHandler+0xa18>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d036      	beq.n	800891c <HAL_DMA_IRQHandler+0x8b8>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a73      	ldr	r2, [pc, #460]	; (8008a80 <HAL_DMA_IRQHandler+0xa1c>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d031      	beq.n	800891c <HAL_DMA_IRQHandler+0x8b8>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a71      	ldr	r2, [pc, #452]	; (8008a84 <HAL_DMA_IRQHandler+0xa20>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d02c      	beq.n	800891c <HAL_DMA_IRQHandler+0x8b8>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a70      	ldr	r2, [pc, #448]	; (8008a88 <HAL_DMA_IRQHandler+0xa24>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d027      	beq.n	800891c <HAL_DMA_IRQHandler+0x8b8>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a6e      	ldr	r2, [pc, #440]	; (8008a8c <HAL_DMA_IRQHandler+0xa28>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d022      	beq.n	800891c <HAL_DMA_IRQHandler+0x8b8>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a6d      	ldr	r2, [pc, #436]	; (8008a90 <HAL_DMA_IRQHandler+0xa2c>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d01d      	beq.n	800891c <HAL_DMA_IRQHandler+0x8b8>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a6b      	ldr	r2, [pc, #428]	; (8008a94 <HAL_DMA_IRQHandler+0xa30>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d018      	beq.n	800891c <HAL_DMA_IRQHandler+0x8b8>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a6a      	ldr	r2, [pc, #424]	; (8008a98 <HAL_DMA_IRQHandler+0xa34>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d013      	beq.n	800891c <HAL_DMA_IRQHandler+0x8b8>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a68      	ldr	r2, [pc, #416]	; (8008a9c <HAL_DMA_IRQHandler+0xa38>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d00e      	beq.n	800891c <HAL_DMA_IRQHandler+0x8b8>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a67      	ldr	r2, [pc, #412]	; (8008aa0 <HAL_DMA_IRQHandler+0xa3c>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d009      	beq.n	800891c <HAL_DMA_IRQHandler+0x8b8>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a65      	ldr	r2, [pc, #404]	; (8008aa4 <HAL_DMA_IRQHandler+0xa40>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d004      	beq.n	800891c <HAL_DMA_IRQHandler+0x8b8>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a64      	ldr	r2, [pc, #400]	; (8008aa8 <HAL_DMA_IRQHandler+0xa44>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d108      	bne.n	800892e <HAL_DMA_IRQHandler+0x8ca>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f022 0201 	bic.w	r2, r2, #1
 800892a:	601a      	str	r2, [r3, #0]
 800892c:	e007      	b.n	800893e <HAL_DMA_IRQHandler+0x8da>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f022 0201 	bic.w	r2, r2, #1
 800893c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	3301      	adds	r3, #1
 8008942:	60fb      	str	r3, [r7, #12]
 8008944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008946:	429a      	cmp	r2, r3
 8008948:	d307      	bcc.n	800895a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f003 0301 	and.w	r3, r3, #1
 8008954:	2b00      	cmp	r3, #0
 8008956:	d1f2      	bne.n	800893e <HAL_DMA_IRQHandler+0x8da>
 8008958:	e000      	b.n	800895c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800895a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f003 0301 	and.w	r3, r3, #1
 8008966:	2b00      	cmp	r3, #0
 8008968:	d004      	beq.n	8008974 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2203      	movs	r2, #3
 800896e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8008972:	e003      	b.n	800897c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008988:	2b00      	cmp	r3, #0
 800898a:	f000 8272 	beq.w	8008e72 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	4798      	blx	r3
 8008996:	e26c      	b.n	8008e72 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a43      	ldr	r2, [pc, #268]	; (8008aac <HAL_DMA_IRQHandler+0xa48>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d022      	beq.n	80089e8 <HAL_DMA_IRQHandler+0x984>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a42      	ldr	r2, [pc, #264]	; (8008ab0 <HAL_DMA_IRQHandler+0xa4c>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d01d      	beq.n	80089e8 <HAL_DMA_IRQHandler+0x984>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a40      	ldr	r2, [pc, #256]	; (8008ab4 <HAL_DMA_IRQHandler+0xa50>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d018      	beq.n	80089e8 <HAL_DMA_IRQHandler+0x984>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a3f      	ldr	r2, [pc, #252]	; (8008ab8 <HAL_DMA_IRQHandler+0xa54>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d013      	beq.n	80089e8 <HAL_DMA_IRQHandler+0x984>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a3d      	ldr	r2, [pc, #244]	; (8008abc <HAL_DMA_IRQHandler+0xa58>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d00e      	beq.n	80089e8 <HAL_DMA_IRQHandler+0x984>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a3c      	ldr	r2, [pc, #240]	; (8008ac0 <HAL_DMA_IRQHandler+0xa5c>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d009      	beq.n	80089e8 <HAL_DMA_IRQHandler+0x984>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a3a      	ldr	r2, [pc, #232]	; (8008ac4 <HAL_DMA_IRQHandler+0xa60>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d004      	beq.n	80089e8 <HAL_DMA_IRQHandler+0x984>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a39      	ldr	r2, [pc, #228]	; (8008ac8 <HAL_DMA_IRQHandler+0xa64>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d101      	bne.n	80089ec <HAL_DMA_IRQHandler+0x988>
 80089e8:	2301      	movs	r3, #1
 80089ea:	e000      	b.n	80089ee <HAL_DMA_IRQHandler+0x98a>
 80089ec:	2300      	movs	r3, #0
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	f000 823f 	beq.w	8008e72 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a00:	f003 031f 	and.w	r3, r3, #31
 8008a04:	2204      	movs	r2, #4
 8008a06:	409a      	lsls	r2, r3
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	f000 80cd 	beq.w	8008bac <HAL_DMA_IRQHandler+0xb48>
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	f003 0304 	and.w	r3, r3, #4
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f000 80c7 	beq.w	8008bac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a22:	f003 031f 	and.w	r3, r3, #31
 8008a26:	2204      	movs	r2, #4
 8008a28:	409a      	lsls	r2, r3
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d049      	beq.n	8008acc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d109      	bne.n	8008a56 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	f000 8210 	beq.w	8008e6c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008a54:	e20a      	b.n	8008e6c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	f000 8206 	beq.w	8008e6c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008a68:	e200      	b.n	8008e6c <HAL_DMA_IRQHandler+0xe08>
 8008a6a:	bf00      	nop
 8008a6c:	40020010 	.word	0x40020010
 8008a70:	40020028 	.word	0x40020028
 8008a74:	40020040 	.word	0x40020040
 8008a78:	40020058 	.word	0x40020058
 8008a7c:	40020070 	.word	0x40020070
 8008a80:	40020088 	.word	0x40020088
 8008a84:	400200a0 	.word	0x400200a0
 8008a88:	400200b8 	.word	0x400200b8
 8008a8c:	40020410 	.word	0x40020410
 8008a90:	40020428 	.word	0x40020428
 8008a94:	40020440 	.word	0x40020440
 8008a98:	40020458 	.word	0x40020458
 8008a9c:	40020470 	.word	0x40020470
 8008aa0:	40020488 	.word	0x40020488
 8008aa4:	400204a0 	.word	0x400204a0
 8008aa8:	400204b8 	.word	0x400204b8
 8008aac:	58025408 	.word	0x58025408
 8008ab0:	5802541c 	.word	0x5802541c
 8008ab4:	58025430 	.word	0x58025430
 8008ab8:	58025444 	.word	0x58025444
 8008abc:	58025458 	.word	0x58025458
 8008ac0:	5802546c 	.word	0x5802546c
 8008ac4:	58025480 	.word	0x58025480
 8008ac8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	f003 0320 	and.w	r3, r3, #32
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d160      	bne.n	8008b98 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a8c      	ldr	r2, [pc, #560]	; (8008d0c <HAL_DMA_IRQHandler+0xca8>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d04a      	beq.n	8008b76 <HAL_DMA_IRQHandler+0xb12>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a8a      	ldr	r2, [pc, #552]	; (8008d10 <HAL_DMA_IRQHandler+0xcac>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d045      	beq.n	8008b76 <HAL_DMA_IRQHandler+0xb12>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a89      	ldr	r2, [pc, #548]	; (8008d14 <HAL_DMA_IRQHandler+0xcb0>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d040      	beq.n	8008b76 <HAL_DMA_IRQHandler+0xb12>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a87      	ldr	r2, [pc, #540]	; (8008d18 <HAL_DMA_IRQHandler+0xcb4>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d03b      	beq.n	8008b76 <HAL_DMA_IRQHandler+0xb12>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a86      	ldr	r2, [pc, #536]	; (8008d1c <HAL_DMA_IRQHandler+0xcb8>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d036      	beq.n	8008b76 <HAL_DMA_IRQHandler+0xb12>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a84      	ldr	r2, [pc, #528]	; (8008d20 <HAL_DMA_IRQHandler+0xcbc>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d031      	beq.n	8008b76 <HAL_DMA_IRQHandler+0xb12>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a83      	ldr	r2, [pc, #524]	; (8008d24 <HAL_DMA_IRQHandler+0xcc0>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d02c      	beq.n	8008b76 <HAL_DMA_IRQHandler+0xb12>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a81      	ldr	r2, [pc, #516]	; (8008d28 <HAL_DMA_IRQHandler+0xcc4>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d027      	beq.n	8008b76 <HAL_DMA_IRQHandler+0xb12>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a80      	ldr	r2, [pc, #512]	; (8008d2c <HAL_DMA_IRQHandler+0xcc8>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d022      	beq.n	8008b76 <HAL_DMA_IRQHandler+0xb12>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a7e      	ldr	r2, [pc, #504]	; (8008d30 <HAL_DMA_IRQHandler+0xccc>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d01d      	beq.n	8008b76 <HAL_DMA_IRQHandler+0xb12>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a7d      	ldr	r2, [pc, #500]	; (8008d34 <HAL_DMA_IRQHandler+0xcd0>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d018      	beq.n	8008b76 <HAL_DMA_IRQHandler+0xb12>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a7b      	ldr	r2, [pc, #492]	; (8008d38 <HAL_DMA_IRQHandler+0xcd4>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d013      	beq.n	8008b76 <HAL_DMA_IRQHandler+0xb12>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a7a      	ldr	r2, [pc, #488]	; (8008d3c <HAL_DMA_IRQHandler+0xcd8>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d00e      	beq.n	8008b76 <HAL_DMA_IRQHandler+0xb12>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a78      	ldr	r2, [pc, #480]	; (8008d40 <HAL_DMA_IRQHandler+0xcdc>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d009      	beq.n	8008b76 <HAL_DMA_IRQHandler+0xb12>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a77      	ldr	r2, [pc, #476]	; (8008d44 <HAL_DMA_IRQHandler+0xce0>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d004      	beq.n	8008b76 <HAL_DMA_IRQHandler+0xb12>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a75      	ldr	r2, [pc, #468]	; (8008d48 <HAL_DMA_IRQHandler+0xce4>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d108      	bne.n	8008b88 <HAL_DMA_IRQHandler+0xb24>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f022 0208 	bic.w	r2, r2, #8
 8008b84:	601a      	str	r2, [r3, #0]
 8008b86:	e007      	b.n	8008b98 <HAL_DMA_IRQHandler+0xb34>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f022 0204 	bic.w	r2, r2, #4
 8008b96:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	f000 8165 	beq.w	8008e6c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008baa:	e15f      	b.n	8008e6c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bb0:	f003 031f 	and.w	r3, r3, #31
 8008bb4:	2202      	movs	r2, #2
 8008bb6:	409a      	lsls	r2, r3
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	4013      	ands	r3, r2
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f000 80c5 	beq.w	8008d4c <HAL_DMA_IRQHandler+0xce8>
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	f003 0302 	and.w	r3, r3, #2
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	f000 80bf 	beq.w	8008d4c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bd2:	f003 031f 	and.w	r3, r3, #31
 8008bd6:	2202      	movs	r2, #2
 8008bd8:	409a      	lsls	r2, r3
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d018      	beq.n	8008c1a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d109      	bne.n	8008c06 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f000 813a 	beq.w	8008e70 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008c04:	e134      	b.n	8008e70 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	f000 8130 	beq.w	8008e70 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008c18:	e12a      	b.n	8008e70 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	f003 0320 	and.w	r3, r3, #32
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d168      	bne.n	8008cf6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a38      	ldr	r2, [pc, #224]	; (8008d0c <HAL_DMA_IRQHandler+0xca8>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d04a      	beq.n	8008cc4 <HAL_DMA_IRQHandler+0xc60>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a37      	ldr	r2, [pc, #220]	; (8008d10 <HAL_DMA_IRQHandler+0xcac>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d045      	beq.n	8008cc4 <HAL_DMA_IRQHandler+0xc60>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a35      	ldr	r2, [pc, #212]	; (8008d14 <HAL_DMA_IRQHandler+0xcb0>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d040      	beq.n	8008cc4 <HAL_DMA_IRQHandler+0xc60>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a34      	ldr	r2, [pc, #208]	; (8008d18 <HAL_DMA_IRQHandler+0xcb4>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d03b      	beq.n	8008cc4 <HAL_DMA_IRQHandler+0xc60>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a32      	ldr	r2, [pc, #200]	; (8008d1c <HAL_DMA_IRQHandler+0xcb8>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d036      	beq.n	8008cc4 <HAL_DMA_IRQHandler+0xc60>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a31      	ldr	r2, [pc, #196]	; (8008d20 <HAL_DMA_IRQHandler+0xcbc>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d031      	beq.n	8008cc4 <HAL_DMA_IRQHandler+0xc60>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a2f      	ldr	r2, [pc, #188]	; (8008d24 <HAL_DMA_IRQHandler+0xcc0>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d02c      	beq.n	8008cc4 <HAL_DMA_IRQHandler+0xc60>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a2e      	ldr	r2, [pc, #184]	; (8008d28 <HAL_DMA_IRQHandler+0xcc4>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d027      	beq.n	8008cc4 <HAL_DMA_IRQHandler+0xc60>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a2c      	ldr	r2, [pc, #176]	; (8008d2c <HAL_DMA_IRQHandler+0xcc8>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d022      	beq.n	8008cc4 <HAL_DMA_IRQHandler+0xc60>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a2b      	ldr	r2, [pc, #172]	; (8008d30 <HAL_DMA_IRQHandler+0xccc>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d01d      	beq.n	8008cc4 <HAL_DMA_IRQHandler+0xc60>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a29      	ldr	r2, [pc, #164]	; (8008d34 <HAL_DMA_IRQHandler+0xcd0>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d018      	beq.n	8008cc4 <HAL_DMA_IRQHandler+0xc60>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a28      	ldr	r2, [pc, #160]	; (8008d38 <HAL_DMA_IRQHandler+0xcd4>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d013      	beq.n	8008cc4 <HAL_DMA_IRQHandler+0xc60>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a26      	ldr	r2, [pc, #152]	; (8008d3c <HAL_DMA_IRQHandler+0xcd8>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d00e      	beq.n	8008cc4 <HAL_DMA_IRQHandler+0xc60>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a25      	ldr	r2, [pc, #148]	; (8008d40 <HAL_DMA_IRQHandler+0xcdc>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d009      	beq.n	8008cc4 <HAL_DMA_IRQHandler+0xc60>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a23      	ldr	r2, [pc, #140]	; (8008d44 <HAL_DMA_IRQHandler+0xce0>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d004      	beq.n	8008cc4 <HAL_DMA_IRQHandler+0xc60>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a22      	ldr	r2, [pc, #136]	; (8008d48 <HAL_DMA_IRQHandler+0xce4>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d108      	bne.n	8008cd6 <HAL_DMA_IRQHandler+0xc72>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f022 0214 	bic.w	r2, r2, #20
 8008cd2:	601a      	str	r2, [r3, #0]
 8008cd4:	e007      	b.n	8008ce6 <HAL_DMA_IRQHandler+0xc82>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f022 020a 	bic.w	r2, r2, #10
 8008ce4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2201      	movs	r2, #1
 8008cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f000 80b8 	beq.w	8008e70 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008d08:	e0b2      	b.n	8008e70 <HAL_DMA_IRQHandler+0xe0c>
 8008d0a:	bf00      	nop
 8008d0c:	40020010 	.word	0x40020010
 8008d10:	40020028 	.word	0x40020028
 8008d14:	40020040 	.word	0x40020040
 8008d18:	40020058 	.word	0x40020058
 8008d1c:	40020070 	.word	0x40020070
 8008d20:	40020088 	.word	0x40020088
 8008d24:	400200a0 	.word	0x400200a0
 8008d28:	400200b8 	.word	0x400200b8
 8008d2c:	40020410 	.word	0x40020410
 8008d30:	40020428 	.word	0x40020428
 8008d34:	40020440 	.word	0x40020440
 8008d38:	40020458 	.word	0x40020458
 8008d3c:	40020470 	.word	0x40020470
 8008d40:	40020488 	.word	0x40020488
 8008d44:	400204a0 	.word	0x400204a0
 8008d48:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d50:	f003 031f 	and.w	r3, r3, #31
 8008d54:	2208      	movs	r2, #8
 8008d56:	409a      	lsls	r2, r3
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	4013      	ands	r3, r2
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f000 8088 	beq.w	8008e72 <HAL_DMA_IRQHandler+0xe0e>
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	f003 0308 	and.w	r3, r3, #8
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f000 8082 	beq.w	8008e72 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a41      	ldr	r2, [pc, #260]	; (8008e78 <HAL_DMA_IRQHandler+0xe14>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d04a      	beq.n	8008e0e <HAL_DMA_IRQHandler+0xdaa>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a3f      	ldr	r2, [pc, #252]	; (8008e7c <HAL_DMA_IRQHandler+0xe18>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d045      	beq.n	8008e0e <HAL_DMA_IRQHandler+0xdaa>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a3e      	ldr	r2, [pc, #248]	; (8008e80 <HAL_DMA_IRQHandler+0xe1c>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d040      	beq.n	8008e0e <HAL_DMA_IRQHandler+0xdaa>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a3c      	ldr	r2, [pc, #240]	; (8008e84 <HAL_DMA_IRQHandler+0xe20>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d03b      	beq.n	8008e0e <HAL_DMA_IRQHandler+0xdaa>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a3b      	ldr	r2, [pc, #236]	; (8008e88 <HAL_DMA_IRQHandler+0xe24>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d036      	beq.n	8008e0e <HAL_DMA_IRQHandler+0xdaa>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a39      	ldr	r2, [pc, #228]	; (8008e8c <HAL_DMA_IRQHandler+0xe28>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d031      	beq.n	8008e0e <HAL_DMA_IRQHandler+0xdaa>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a38      	ldr	r2, [pc, #224]	; (8008e90 <HAL_DMA_IRQHandler+0xe2c>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d02c      	beq.n	8008e0e <HAL_DMA_IRQHandler+0xdaa>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a36      	ldr	r2, [pc, #216]	; (8008e94 <HAL_DMA_IRQHandler+0xe30>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d027      	beq.n	8008e0e <HAL_DMA_IRQHandler+0xdaa>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a35      	ldr	r2, [pc, #212]	; (8008e98 <HAL_DMA_IRQHandler+0xe34>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d022      	beq.n	8008e0e <HAL_DMA_IRQHandler+0xdaa>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a33      	ldr	r2, [pc, #204]	; (8008e9c <HAL_DMA_IRQHandler+0xe38>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d01d      	beq.n	8008e0e <HAL_DMA_IRQHandler+0xdaa>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a32      	ldr	r2, [pc, #200]	; (8008ea0 <HAL_DMA_IRQHandler+0xe3c>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d018      	beq.n	8008e0e <HAL_DMA_IRQHandler+0xdaa>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a30      	ldr	r2, [pc, #192]	; (8008ea4 <HAL_DMA_IRQHandler+0xe40>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d013      	beq.n	8008e0e <HAL_DMA_IRQHandler+0xdaa>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a2f      	ldr	r2, [pc, #188]	; (8008ea8 <HAL_DMA_IRQHandler+0xe44>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d00e      	beq.n	8008e0e <HAL_DMA_IRQHandler+0xdaa>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a2d      	ldr	r2, [pc, #180]	; (8008eac <HAL_DMA_IRQHandler+0xe48>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d009      	beq.n	8008e0e <HAL_DMA_IRQHandler+0xdaa>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a2c      	ldr	r2, [pc, #176]	; (8008eb0 <HAL_DMA_IRQHandler+0xe4c>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d004      	beq.n	8008e0e <HAL_DMA_IRQHandler+0xdaa>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a2a      	ldr	r2, [pc, #168]	; (8008eb4 <HAL_DMA_IRQHandler+0xe50>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d108      	bne.n	8008e20 <HAL_DMA_IRQHandler+0xdbc>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f022 021c 	bic.w	r2, r2, #28
 8008e1c:	601a      	str	r2, [r3, #0]
 8008e1e:	e007      	b.n	8008e30 <HAL_DMA_IRQHandler+0xdcc>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f022 020e 	bic.w	r2, r2, #14
 8008e2e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e34:	f003 031f 	and.w	r3, r3, #31
 8008e38:	2201      	movs	r2, #1
 8008e3a:	409a      	lsls	r2, r3
 8008e3c:	69fb      	ldr	r3, [r7, #28]
 8008e3e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d009      	beq.n	8008e72 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	4798      	blx	r3
 8008e66:	e004      	b.n	8008e72 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008e68:	bf00      	nop
 8008e6a:	e002      	b.n	8008e72 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008e6c:	bf00      	nop
 8008e6e:	e000      	b.n	8008e72 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008e70:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008e72:	3728      	adds	r7, #40	; 0x28
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	40020010 	.word	0x40020010
 8008e7c:	40020028 	.word	0x40020028
 8008e80:	40020040 	.word	0x40020040
 8008e84:	40020058 	.word	0x40020058
 8008e88:	40020070 	.word	0x40020070
 8008e8c:	40020088 	.word	0x40020088
 8008e90:	400200a0 	.word	0x400200a0
 8008e94:	400200b8 	.word	0x400200b8
 8008e98:	40020410 	.word	0x40020410
 8008e9c:	40020428 	.word	0x40020428
 8008ea0:	40020440 	.word	0x40020440
 8008ea4:	40020458 	.word	0x40020458
 8008ea8:	40020470 	.word	0x40020470
 8008eac:	40020488 	.word	0x40020488
 8008eb0:	400204a0 	.word	0x400204a0
 8008eb4:	400204b8 	.word	0x400204b8

08008eb8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b087      	sub	sp, #28
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	607a      	str	r2, [r7, #4]
 8008ec4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ed0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a84      	ldr	r2, [pc, #528]	; (80090e8 <DMA_SetConfig+0x230>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d072      	beq.n	8008fc2 <DMA_SetConfig+0x10a>
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a82      	ldr	r2, [pc, #520]	; (80090ec <DMA_SetConfig+0x234>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d06d      	beq.n	8008fc2 <DMA_SetConfig+0x10a>
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a81      	ldr	r2, [pc, #516]	; (80090f0 <DMA_SetConfig+0x238>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d068      	beq.n	8008fc2 <DMA_SetConfig+0x10a>
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a7f      	ldr	r2, [pc, #508]	; (80090f4 <DMA_SetConfig+0x23c>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d063      	beq.n	8008fc2 <DMA_SetConfig+0x10a>
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a7e      	ldr	r2, [pc, #504]	; (80090f8 <DMA_SetConfig+0x240>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d05e      	beq.n	8008fc2 <DMA_SetConfig+0x10a>
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a7c      	ldr	r2, [pc, #496]	; (80090fc <DMA_SetConfig+0x244>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d059      	beq.n	8008fc2 <DMA_SetConfig+0x10a>
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a7b      	ldr	r2, [pc, #492]	; (8009100 <DMA_SetConfig+0x248>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d054      	beq.n	8008fc2 <DMA_SetConfig+0x10a>
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a79      	ldr	r2, [pc, #484]	; (8009104 <DMA_SetConfig+0x24c>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d04f      	beq.n	8008fc2 <DMA_SetConfig+0x10a>
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a78      	ldr	r2, [pc, #480]	; (8009108 <DMA_SetConfig+0x250>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d04a      	beq.n	8008fc2 <DMA_SetConfig+0x10a>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a76      	ldr	r2, [pc, #472]	; (800910c <DMA_SetConfig+0x254>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d045      	beq.n	8008fc2 <DMA_SetConfig+0x10a>
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a75      	ldr	r2, [pc, #468]	; (8009110 <DMA_SetConfig+0x258>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d040      	beq.n	8008fc2 <DMA_SetConfig+0x10a>
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a73      	ldr	r2, [pc, #460]	; (8009114 <DMA_SetConfig+0x25c>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d03b      	beq.n	8008fc2 <DMA_SetConfig+0x10a>
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a72      	ldr	r2, [pc, #456]	; (8009118 <DMA_SetConfig+0x260>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d036      	beq.n	8008fc2 <DMA_SetConfig+0x10a>
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a70      	ldr	r2, [pc, #448]	; (800911c <DMA_SetConfig+0x264>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d031      	beq.n	8008fc2 <DMA_SetConfig+0x10a>
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a6f      	ldr	r2, [pc, #444]	; (8009120 <DMA_SetConfig+0x268>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d02c      	beq.n	8008fc2 <DMA_SetConfig+0x10a>
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a6d      	ldr	r2, [pc, #436]	; (8009124 <DMA_SetConfig+0x26c>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d027      	beq.n	8008fc2 <DMA_SetConfig+0x10a>
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a6c      	ldr	r2, [pc, #432]	; (8009128 <DMA_SetConfig+0x270>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d022      	beq.n	8008fc2 <DMA_SetConfig+0x10a>
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a6a      	ldr	r2, [pc, #424]	; (800912c <DMA_SetConfig+0x274>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d01d      	beq.n	8008fc2 <DMA_SetConfig+0x10a>
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a69      	ldr	r2, [pc, #420]	; (8009130 <DMA_SetConfig+0x278>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d018      	beq.n	8008fc2 <DMA_SetConfig+0x10a>
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a67      	ldr	r2, [pc, #412]	; (8009134 <DMA_SetConfig+0x27c>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d013      	beq.n	8008fc2 <DMA_SetConfig+0x10a>
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a66      	ldr	r2, [pc, #408]	; (8009138 <DMA_SetConfig+0x280>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d00e      	beq.n	8008fc2 <DMA_SetConfig+0x10a>
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a64      	ldr	r2, [pc, #400]	; (800913c <DMA_SetConfig+0x284>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d009      	beq.n	8008fc2 <DMA_SetConfig+0x10a>
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a63      	ldr	r2, [pc, #396]	; (8009140 <DMA_SetConfig+0x288>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d004      	beq.n	8008fc2 <DMA_SetConfig+0x10a>
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a61      	ldr	r2, [pc, #388]	; (8009144 <DMA_SetConfig+0x28c>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d101      	bne.n	8008fc6 <DMA_SetConfig+0x10e>
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e000      	b.n	8008fc8 <DMA_SetConfig+0x110>
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d00d      	beq.n	8008fe8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008fd4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d004      	beq.n	8008fe8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008fe6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a3e      	ldr	r2, [pc, #248]	; (80090e8 <DMA_SetConfig+0x230>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d04a      	beq.n	8009088 <DMA_SetConfig+0x1d0>
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a3d      	ldr	r2, [pc, #244]	; (80090ec <DMA_SetConfig+0x234>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d045      	beq.n	8009088 <DMA_SetConfig+0x1d0>
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a3b      	ldr	r2, [pc, #236]	; (80090f0 <DMA_SetConfig+0x238>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d040      	beq.n	8009088 <DMA_SetConfig+0x1d0>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a3a      	ldr	r2, [pc, #232]	; (80090f4 <DMA_SetConfig+0x23c>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d03b      	beq.n	8009088 <DMA_SetConfig+0x1d0>
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a38      	ldr	r2, [pc, #224]	; (80090f8 <DMA_SetConfig+0x240>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d036      	beq.n	8009088 <DMA_SetConfig+0x1d0>
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a37      	ldr	r2, [pc, #220]	; (80090fc <DMA_SetConfig+0x244>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d031      	beq.n	8009088 <DMA_SetConfig+0x1d0>
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a35      	ldr	r2, [pc, #212]	; (8009100 <DMA_SetConfig+0x248>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d02c      	beq.n	8009088 <DMA_SetConfig+0x1d0>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a34      	ldr	r2, [pc, #208]	; (8009104 <DMA_SetConfig+0x24c>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d027      	beq.n	8009088 <DMA_SetConfig+0x1d0>
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a32      	ldr	r2, [pc, #200]	; (8009108 <DMA_SetConfig+0x250>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d022      	beq.n	8009088 <DMA_SetConfig+0x1d0>
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a31      	ldr	r2, [pc, #196]	; (800910c <DMA_SetConfig+0x254>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d01d      	beq.n	8009088 <DMA_SetConfig+0x1d0>
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a2f      	ldr	r2, [pc, #188]	; (8009110 <DMA_SetConfig+0x258>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d018      	beq.n	8009088 <DMA_SetConfig+0x1d0>
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a2e      	ldr	r2, [pc, #184]	; (8009114 <DMA_SetConfig+0x25c>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d013      	beq.n	8009088 <DMA_SetConfig+0x1d0>
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a2c      	ldr	r2, [pc, #176]	; (8009118 <DMA_SetConfig+0x260>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d00e      	beq.n	8009088 <DMA_SetConfig+0x1d0>
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a2b      	ldr	r2, [pc, #172]	; (800911c <DMA_SetConfig+0x264>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d009      	beq.n	8009088 <DMA_SetConfig+0x1d0>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a29      	ldr	r2, [pc, #164]	; (8009120 <DMA_SetConfig+0x268>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d004      	beq.n	8009088 <DMA_SetConfig+0x1d0>
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a28      	ldr	r2, [pc, #160]	; (8009124 <DMA_SetConfig+0x26c>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d101      	bne.n	800908c <DMA_SetConfig+0x1d4>
 8009088:	2301      	movs	r3, #1
 800908a:	e000      	b.n	800908e <DMA_SetConfig+0x1d6>
 800908c:	2300      	movs	r3, #0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d05a      	beq.n	8009148 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009096:	f003 031f 	and.w	r3, r3, #31
 800909a:	223f      	movs	r2, #63	; 0x3f
 800909c:	409a      	lsls	r2, r3
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80090b0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	683a      	ldr	r2, [r7, #0]
 80090b8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	2b40      	cmp	r3, #64	; 0x40
 80090c0:	d108      	bne.n	80090d4 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68ba      	ldr	r2, [r7, #8]
 80090d0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80090d2:	e087      	b.n	80091e4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	68ba      	ldr	r2, [r7, #8]
 80090da:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	60da      	str	r2, [r3, #12]
}
 80090e4:	e07e      	b.n	80091e4 <DMA_SetConfig+0x32c>
 80090e6:	bf00      	nop
 80090e8:	40020010 	.word	0x40020010
 80090ec:	40020028 	.word	0x40020028
 80090f0:	40020040 	.word	0x40020040
 80090f4:	40020058 	.word	0x40020058
 80090f8:	40020070 	.word	0x40020070
 80090fc:	40020088 	.word	0x40020088
 8009100:	400200a0 	.word	0x400200a0
 8009104:	400200b8 	.word	0x400200b8
 8009108:	40020410 	.word	0x40020410
 800910c:	40020428 	.word	0x40020428
 8009110:	40020440 	.word	0x40020440
 8009114:	40020458 	.word	0x40020458
 8009118:	40020470 	.word	0x40020470
 800911c:	40020488 	.word	0x40020488
 8009120:	400204a0 	.word	0x400204a0
 8009124:	400204b8 	.word	0x400204b8
 8009128:	58025408 	.word	0x58025408
 800912c:	5802541c 	.word	0x5802541c
 8009130:	58025430 	.word	0x58025430
 8009134:	58025444 	.word	0x58025444
 8009138:	58025458 	.word	0x58025458
 800913c:	5802546c 	.word	0x5802546c
 8009140:	58025480 	.word	0x58025480
 8009144:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a28      	ldr	r2, [pc, #160]	; (80091f0 <DMA_SetConfig+0x338>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d022      	beq.n	8009198 <DMA_SetConfig+0x2e0>
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a27      	ldr	r2, [pc, #156]	; (80091f4 <DMA_SetConfig+0x33c>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d01d      	beq.n	8009198 <DMA_SetConfig+0x2e0>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a25      	ldr	r2, [pc, #148]	; (80091f8 <DMA_SetConfig+0x340>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d018      	beq.n	8009198 <DMA_SetConfig+0x2e0>
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a24      	ldr	r2, [pc, #144]	; (80091fc <DMA_SetConfig+0x344>)
 800916c:	4293      	cmp	r3, r2
 800916e:	d013      	beq.n	8009198 <DMA_SetConfig+0x2e0>
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a22      	ldr	r2, [pc, #136]	; (8009200 <DMA_SetConfig+0x348>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d00e      	beq.n	8009198 <DMA_SetConfig+0x2e0>
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a21      	ldr	r2, [pc, #132]	; (8009204 <DMA_SetConfig+0x34c>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d009      	beq.n	8009198 <DMA_SetConfig+0x2e0>
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a1f      	ldr	r2, [pc, #124]	; (8009208 <DMA_SetConfig+0x350>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d004      	beq.n	8009198 <DMA_SetConfig+0x2e0>
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a1e      	ldr	r2, [pc, #120]	; (800920c <DMA_SetConfig+0x354>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d101      	bne.n	800919c <DMA_SetConfig+0x2e4>
 8009198:	2301      	movs	r3, #1
 800919a:	e000      	b.n	800919e <DMA_SetConfig+0x2e6>
 800919c:	2300      	movs	r3, #0
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d020      	beq.n	80091e4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091a6:	f003 031f 	and.w	r3, r3, #31
 80091aa:	2201      	movs	r2, #1
 80091ac:	409a      	lsls	r2, r3
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	683a      	ldr	r2, [r7, #0]
 80091b8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	2b40      	cmp	r3, #64	; 0x40
 80091c0:	d108      	bne.n	80091d4 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	68ba      	ldr	r2, [r7, #8]
 80091d0:	60da      	str	r2, [r3, #12]
}
 80091d2:	e007      	b.n	80091e4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68ba      	ldr	r2, [r7, #8]
 80091da:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	60da      	str	r2, [r3, #12]
}
 80091e4:	bf00      	nop
 80091e6:	371c      	adds	r7, #28
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr
 80091f0:	58025408 	.word	0x58025408
 80091f4:	5802541c 	.word	0x5802541c
 80091f8:	58025430 	.word	0x58025430
 80091fc:	58025444 	.word	0x58025444
 8009200:	58025458 	.word	0x58025458
 8009204:	5802546c 	.word	0x5802546c
 8009208:	58025480 	.word	0x58025480
 800920c:	58025494 	.word	0x58025494

08009210 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009210:	b480      	push	{r7}
 8009212:	b085      	sub	sp, #20
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a42      	ldr	r2, [pc, #264]	; (8009328 <DMA_CalcBaseAndBitshift+0x118>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d04a      	beq.n	80092b8 <DMA_CalcBaseAndBitshift+0xa8>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a41      	ldr	r2, [pc, #260]	; (800932c <DMA_CalcBaseAndBitshift+0x11c>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d045      	beq.n	80092b8 <DMA_CalcBaseAndBitshift+0xa8>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a3f      	ldr	r2, [pc, #252]	; (8009330 <DMA_CalcBaseAndBitshift+0x120>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d040      	beq.n	80092b8 <DMA_CalcBaseAndBitshift+0xa8>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a3e      	ldr	r2, [pc, #248]	; (8009334 <DMA_CalcBaseAndBitshift+0x124>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d03b      	beq.n	80092b8 <DMA_CalcBaseAndBitshift+0xa8>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a3c      	ldr	r2, [pc, #240]	; (8009338 <DMA_CalcBaseAndBitshift+0x128>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d036      	beq.n	80092b8 <DMA_CalcBaseAndBitshift+0xa8>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a3b      	ldr	r2, [pc, #236]	; (800933c <DMA_CalcBaseAndBitshift+0x12c>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d031      	beq.n	80092b8 <DMA_CalcBaseAndBitshift+0xa8>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a39      	ldr	r2, [pc, #228]	; (8009340 <DMA_CalcBaseAndBitshift+0x130>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d02c      	beq.n	80092b8 <DMA_CalcBaseAndBitshift+0xa8>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a38      	ldr	r2, [pc, #224]	; (8009344 <DMA_CalcBaseAndBitshift+0x134>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d027      	beq.n	80092b8 <DMA_CalcBaseAndBitshift+0xa8>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a36      	ldr	r2, [pc, #216]	; (8009348 <DMA_CalcBaseAndBitshift+0x138>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d022      	beq.n	80092b8 <DMA_CalcBaseAndBitshift+0xa8>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a35      	ldr	r2, [pc, #212]	; (800934c <DMA_CalcBaseAndBitshift+0x13c>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d01d      	beq.n	80092b8 <DMA_CalcBaseAndBitshift+0xa8>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a33      	ldr	r2, [pc, #204]	; (8009350 <DMA_CalcBaseAndBitshift+0x140>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d018      	beq.n	80092b8 <DMA_CalcBaseAndBitshift+0xa8>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a32      	ldr	r2, [pc, #200]	; (8009354 <DMA_CalcBaseAndBitshift+0x144>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d013      	beq.n	80092b8 <DMA_CalcBaseAndBitshift+0xa8>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a30      	ldr	r2, [pc, #192]	; (8009358 <DMA_CalcBaseAndBitshift+0x148>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d00e      	beq.n	80092b8 <DMA_CalcBaseAndBitshift+0xa8>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a2f      	ldr	r2, [pc, #188]	; (800935c <DMA_CalcBaseAndBitshift+0x14c>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d009      	beq.n	80092b8 <DMA_CalcBaseAndBitshift+0xa8>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a2d      	ldr	r2, [pc, #180]	; (8009360 <DMA_CalcBaseAndBitshift+0x150>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d004      	beq.n	80092b8 <DMA_CalcBaseAndBitshift+0xa8>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a2c      	ldr	r2, [pc, #176]	; (8009364 <DMA_CalcBaseAndBitshift+0x154>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d101      	bne.n	80092bc <DMA_CalcBaseAndBitshift+0xac>
 80092b8:	2301      	movs	r3, #1
 80092ba:	e000      	b.n	80092be <DMA_CalcBaseAndBitshift+0xae>
 80092bc:	2300      	movs	r3, #0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d024      	beq.n	800930c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	3b10      	subs	r3, #16
 80092ca:	4a27      	ldr	r2, [pc, #156]	; (8009368 <DMA_CalcBaseAndBitshift+0x158>)
 80092cc:	fba2 2303 	umull	r2, r3, r2, r3
 80092d0:	091b      	lsrs	r3, r3, #4
 80092d2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f003 0307 	and.w	r3, r3, #7
 80092da:	4a24      	ldr	r2, [pc, #144]	; (800936c <DMA_CalcBaseAndBitshift+0x15c>)
 80092dc:	5cd3      	ldrb	r3, [r2, r3]
 80092de:	461a      	mov	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2b03      	cmp	r3, #3
 80092e8:	d908      	bls.n	80092fc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	461a      	mov	r2, r3
 80092f0:	4b1f      	ldr	r3, [pc, #124]	; (8009370 <DMA_CalcBaseAndBitshift+0x160>)
 80092f2:	4013      	ands	r3, r2
 80092f4:	1d1a      	adds	r2, r3, #4
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	659a      	str	r2, [r3, #88]	; 0x58
 80092fa:	e00d      	b.n	8009318 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	461a      	mov	r2, r3
 8009302:	4b1b      	ldr	r3, [pc, #108]	; (8009370 <DMA_CalcBaseAndBitshift+0x160>)
 8009304:	4013      	ands	r3, r2
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	6593      	str	r3, [r2, #88]	; 0x58
 800930a:	e005      	b.n	8009318 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800931c:	4618      	mov	r0, r3
 800931e:	3714      	adds	r7, #20
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr
 8009328:	40020010 	.word	0x40020010
 800932c:	40020028 	.word	0x40020028
 8009330:	40020040 	.word	0x40020040
 8009334:	40020058 	.word	0x40020058
 8009338:	40020070 	.word	0x40020070
 800933c:	40020088 	.word	0x40020088
 8009340:	400200a0 	.word	0x400200a0
 8009344:	400200b8 	.word	0x400200b8
 8009348:	40020410 	.word	0x40020410
 800934c:	40020428 	.word	0x40020428
 8009350:	40020440 	.word	0x40020440
 8009354:	40020458 	.word	0x40020458
 8009358:	40020470 	.word	0x40020470
 800935c:	40020488 	.word	0x40020488
 8009360:	400204a0 	.word	0x400204a0
 8009364:	400204b8 	.word	0x400204b8
 8009368:	aaaaaaab 	.word	0xaaaaaaab
 800936c:	08011884 	.word	0x08011884
 8009370:	fffffc00 	.word	0xfffffc00

08009374 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009374:	b480      	push	{r7}
 8009376:	b085      	sub	sp, #20
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800937c:	2300      	movs	r3, #0
 800937e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	699b      	ldr	r3, [r3, #24]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d120      	bne.n	80093ca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800938c:	2b03      	cmp	r3, #3
 800938e:	d858      	bhi.n	8009442 <DMA_CheckFifoParam+0xce>
 8009390:	a201      	add	r2, pc, #4	; (adr r2, 8009398 <DMA_CheckFifoParam+0x24>)
 8009392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009396:	bf00      	nop
 8009398:	080093a9 	.word	0x080093a9
 800939c:	080093bb 	.word	0x080093bb
 80093a0:	080093a9 	.word	0x080093a9
 80093a4:	08009443 	.word	0x08009443
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d048      	beq.n	8009446 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80093b4:	2301      	movs	r3, #1
 80093b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80093b8:	e045      	b.n	8009446 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80093c2:	d142      	bne.n	800944a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80093c8:	e03f      	b.n	800944a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	699b      	ldr	r3, [r3, #24]
 80093ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093d2:	d123      	bne.n	800941c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d8:	2b03      	cmp	r3, #3
 80093da:	d838      	bhi.n	800944e <DMA_CheckFifoParam+0xda>
 80093dc:	a201      	add	r2, pc, #4	; (adr r2, 80093e4 <DMA_CheckFifoParam+0x70>)
 80093de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e2:	bf00      	nop
 80093e4:	080093f5 	.word	0x080093f5
 80093e8:	080093fb 	.word	0x080093fb
 80093ec:	080093f5 	.word	0x080093f5
 80093f0:	0800940d 	.word	0x0800940d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	73fb      	strb	r3, [r7, #15]
        break;
 80093f8:	e030      	b.n	800945c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009402:	2b00      	cmp	r3, #0
 8009404:	d025      	beq.n	8009452 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009406:	2301      	movs	r3, #1
 8009408:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800940a:	e022      	b.n	8009452 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009410:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009414:	d11f      	bne.n	8009456 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800941a:	e01c      	b.n	8009456 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009420:	2b02      	cmp	r3, #2
 8009422:	d902      	bls.n	800942a <DMA_CheckFifoParam+0xb6>
 8009424:	2b03      	cmp	r3, #3
 8009426:	d003      	beq.n	8009430 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009428:	e018      	b.n	800945c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	73fb      	strb	r3, [r7, #15]
        break;
 800942e:	e015      	b.n	800945c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009434:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00e      	beq.n	800945a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	73fb      	strb	r3, [r7, #15]
    break;
 8009440:	e00b      	b.n	800945a <DMA_CheckFifoParam+0xe6>
        break;
 8009442:	bf00      	nop
 8009444:	e00a      	b.n	800945c <DMA_CheckFifoParam+0xe8>
        break;
 8009446:	bf00      	nop
 8009448:	e008      	b.n	800945c <DMA_CheckFifoParam+0xe8>
        break;
 800944a:	bf00      	nop
 800944c:	e006      	b.n	800945c <DMA_CheckFifoParam+0xe8>
        break;
 800944e:	bf00      	nop
 8009450:	e004      	b.n	800945c <DMA_CheckFifoParam+0xe8>
        break;
 8009452:	bf00      	nop
 8009454:	e002      	b.n	800945c <DMA_CheckFifoParam+0xe8>
        break;
 8009456:	bf00      	nop
 8009458:	e000      	b.n	800945c <DMA_CheckFifoParam+0xe8>
    break;
 800945a:	bf00      	nop
    }
  }

  return status;
 800945c:	7bfb      	ldrb	r3, [r7, #15]
}
 800945e:	4618      	mov	r0, r3
 8009460:	3714      	adds	r7, #20
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr
 800946a:	bf00      	nop

0800946c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800946c:	b480      	push	{r7}
 800946e:	b085      	sub	sp, #20
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a38      	ldr	r2, [pc, #224]	; (8009560 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d022      	beq.n	80094ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a36      	ldr	r2, [pc, #216]	; (8009564 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d01d      	beq.n	80094ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a35      	ldr	r2, [pc, #212]	; (8009568 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d018      	beq.n	80094ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a33      	ldr	r2, [pc, #204]	; (800956c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d013      	beq.n	80094ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a32      	ldr	r2, [pc, #200]	; (8009570 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d00e      	beq.n	80094ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a30      	ldr	r2, [pc, #192]	; (8009574 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d009      	beq.n	80094ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a2f      	ldr	r2, [pc, #188]	; (8009578 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d004      	beq.n	80094ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a2d      	ldr	r2, [pc, #180]	; (800957c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d101      	bne.n	80094ce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80094ca:	2301      	movs	r3, #1
 80094cc:	e000      	b.n	80094d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80094ce:	2300      	movs	r3, #0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d01a      	beq.n	800950a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	3b08      	subs	r3, #8
 80094dc:	4a28      	ldr	r2, [pc, #160]	; (8009580 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80094de:	fba2 2303 	umull	r2, r3, r2, r3
 80094e2:	091b      	lsrs	r3, r3, #4
 80094e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	4b26      	ldr	r3, [pc, #152]	; (8009584 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80094ea:	4413      	add	r3, r2
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	461a      	mov	r2, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	4a24      	ldr	r2, [pc, #144]	; (8009588 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80094f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f003 031f 	and.w	r3, r3, #31
 8009500:	2201      	movs	r2, #1
 8009502:	409a      	lsls	r2, r3
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009508:	e024      	b.n	8009554 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	b2db      	uxtb	r3, r3
 8009510:	3b10      	subs	r3, #16
 8009512:	4a1e      	ldr	r2, [pc, #120]	; (800958c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009514:	fba2 2303 	umull	r2, r3, r2, r3
 8009518:	091b      	lsrs	r3, r3, #4
 800951a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	4a1c      	ldr	r2, [pc, #112]	; (8009590 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d806      	bhi.n	8009532 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	4a1b      	ldr	r2, [pc, #108]	; (8009594 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d902      	bls.n	8009532 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	3308      	adds	r3, #8
 8009530:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	4b18      	ldr	r3, [pc, #96]	; (8009598 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009536:	4413      	add	r3, r2
 8009538:	009b      	lsls	r3, r3, #2
 800953a:	461a      	mov	r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4a16      	ldr	r2, [pc, #88]	; (800959c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009544:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f003 031f 	and.w	r3, r3, #31
 800954c:	2201      	movs	r2, #1
 800954e:	409a      	lsls	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009554:	bf00      	nop
 8009556:	3714      	adds	r7, #20
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr
 8009560:	58025408 	.word	0x58025408
 8009564:	5802541c 	.word	0x5802541c
 8009568:	58025430 	.word	0x58025430
 800956c:	58025444 	.word	0x58025444
 8009570:	58025458 	.word	0x58025458
 8009574:	5802546c 	.word	0x5802546c
 8009578:	58025480 	.word	0x58025480
 800957c:	58025494 	.word	0x58025494
 8009580:	cccccccd 	.word	0xcccccccd
 8009584:	16009600 	.word	0x16009600
 8009588:	58025880 	.word	0x58025880
 800958c:	aaaaaaab 	.word	0xaaaaaaab
 8009590:	400204b8 	.word	0x400204b8
 8009594:	4002040f 	.word	0x4002040f
 8009598:	10008200 	.word	0x10008200
 800959c:	40020880 	.word	0x40020880

080095a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b085      	sub	sp, #20
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d04a      	beq.n	800964c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2b08      	cmp	r3, #8
 80095ba:	d847      	bhi.n	800964c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a25      	ldr	r2, [pc, #148]	; (8009658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d022      	beq.n	800960c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a24      	ldr	r2, [pc, #144]	; (800965c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d01d      	beq.n	800960c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a22      	ldr	r2, [pc, #136]	; (8009660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d018      	beq.n	800960c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a21      	ldr	r2, [pc, #132]	; (8009664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d013      	beq.n	800960c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a1f      	ldr	r2, [pc, #124]	; (8009668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d00e      	beq.n	800960c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a1e      	ldr	r2, [pc, #120]	; (800966c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d009      	beq.n	800960c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a1c      	ldr	r2, [pc, #112]	; (8009670 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d004      	beq.n	800960c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a1b      	ldr	r2, [pc, #108]	; (8009674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d101      	bne.n	8009610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800960c:	2301      	movs	r3, #1
 800960e:	e000      	b.n	8009612 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009610:	2300      	movs	r3, #0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00a      	beq.n	800962c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009616:	68fa      	ldr	r2, [r7, #12]
 8009618:	4b17      	ldr	r3, [pc, #92]	; (8009678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800961a:	4413      	add	r3, r2
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	461a      	mov	r2, r3
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4a15      	ldr	r2, [pc, #84]	; (800967c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009628:	671a      	str	r2, [r3, #112]	; 0x70
 800962a:	e009      	b.n	8009640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800962c:	68fa      	ldr	r2, [r7, #12]
 800962e:	4b14      	ldr	r3, [pc, #80]	; (8009680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009630:	4413      	add	r3, r2
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	461a      	mov	r2, r3
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4a11      	ldr	r2, [pc, #68]	; (8009684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800963e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	3b01      	subs	r3, #1
 8009644:	2201      	movs	r2, #1
 8009646:	409a      	lsls	r2, r3
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800964c:	bf00      	nop
 800964e:	3714      	adds	r7, #20
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr
 8009658:	58025408 	.word	0x58025408
 800965c:	5802541c 	.word	0x5802541c
 8009660:	58025430 	.word	0x58025430
 8009664:	58025444 	.word	0x58025444
 8009668:	58025458 	.word	0x58025458
 800966c:	5802546c 	.word	0x5802546c
 8009670:	58025480 	.word	0x58025480
 8009674:	58025494 	.word	0x58025494
 8009678:	1600963f 	.word	0x1600963f
 800967c:	58025940 	.word	0x58025940
 8009680:	1000823f 	.word	0x1000823f
 8009684:	40020940 	.word	0x40020940

08009688 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009688:	b480      	push	{r7}
 800968a:	b089      	sub	sp, #36	; 0x24
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009692:	2300      	movs	r3, #0
 8009694:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009696:	4b86      	ldr	r3, [pc, #536]	; (80098b0 <HAL_GPIO_Init+0x228>)
 8009698:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800969a:	e18c      	b.n	80099b6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	2101      	movs	r1, #1
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	fa01 f303 	lsl.w	r3, r1, r3
 80096a8:	4013      	ands	r3, r2
 80096aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f000 817e 	beq.w	80099b0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	f003 0303 	and.w	r3, r3, #3
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d005      	beq.n	80096cc <HAL_GPIO_Init+0x44>
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	f003 0303 	and.w	r3, r3, #3
 80096c8:	2b02      	cmp	r3, #2
 80096ca:	d130      	bne.n	800972e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80096d2:	69fb      	ldr	r3, [r7, #28]
 80096d4:	005b      	lsls	r3, r3, #1
 80096d6:	2203      	movs	r2, #3
 80096d8:	fa02 f303 	lsl.w	r3, r2, r3
 80096dc:	43db      	mvns	r3, r3
 80096de:	69ba      	ldr	r2, [r7, #24]
 80096e0:	4013      	ands	r3, r2
 80096e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	68da      	ldr	r2, [r3, #12]
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	005b      	lsls	r3, r3, #1
 80096ec:	fa02 f303 	lsl.w	r3, r2, r3
 80096f0:	69ba      	ldr	r2, [r7, #24]
 80096f2:	4313      	orrs	r3, r2
 80096f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	69ba      	ldr	r2, [r7, #24]
 80096fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009702:	2201      	movs	r2, #1
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	fa02 f303 	lsl.w	r3, r2, r3
 800970a:	43db      	mvns	r3, r3
 800970c:	69ba      	ldr	r2, [r7, #24]
 800970e:	4013      	ands	r3, r2
 8009710:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	091b      	lsrs	r3, r3, #4
 8009718:	f003 0201 	and.w	r2, r3, #1
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	fa02 f303 	lsl.w	r3, r2, r3
 8009722:	69ba      	ldr	r2, [r7, #24]
 8009724:	4313      	orrs	r3, r2
 8009726:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	69ba      	ldr	r2, [r7, #24]
 800972c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	f003 0303 	and.w	r3, r3, #3
 8009736:	2b03      	cmp	r3, #3
 8009738:	d017      	beq.n	800976a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	68db      	ldr	r3, [r3, #12]
 800973e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009740:	69fb      	ldr	r3, [r7, #28]
 8009742:	005b      	lsls	r3, r3, #1
 8009744:	2203      	movs	r2, #3
 8009746:	fa02 f303 	lsl.w	r3, r2, r3
 800974a:	43db      	mvns	r3, r3
 800974c:	69ba      	ldr	r2, [r7, #24]
 800974e:	4013      	ands	r3, r2
 8009750:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	689a      	ldr	r2, [r3, #8]
 8009756:	69fb      	ldr	r3, [r7, #28]
 8009758:	005b      	lsls	r3, r3, #1
 800975a:	fa02 f303 	lsl.w	r3, r2, r3
 800975e:	69ba      	ldr	r2, [r7, #24]
 8009760:	4313      	orrs	r3, r2
 8009762:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	69ba      	ldr	r2, [r7, #24]
 8009768:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	f003 0303 	and.w	r3, r3, #3
 8009772:	2b02      	cmp	r3, #2
 8009774:	d123      	bne.n	80097be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009776:	69fb      	ldr	r3, [r7, #28]
 8009778:	08da      	lsrs	r2, r3, #3
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	3208      	adds	r2, #8
 800977e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009782:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	f003 0307 	and.w	r3, r3, #7
 800978a:	009b      	lsls	r3, r3, #2
 800978c:	220f      	movs	r2, #15
 800978e:	fa02 f303 	lsl.w	r3, r2, r3
 8009792:	43db      	mvns	r3, r3
 8009794:	69ba      	ldr	r2, [r7, #24]
 8009796:	4013      	ands	r3, r2
 8009798:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	691a      	ldr	r2, [r3, #16]
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	f003 0307 	and.w	r3, r3, #7
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	fa02 f303 	lsl.w	r3, r2, r3
 80097aa:	69ba      	ldr	r2, [r7, #24]
 80097ac:	4313      	orrs	r3, r2
 80097ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80097b0:	69fb      	ldr	r3, [r7, #28]
 80097b2:	08da      	lsrs	r2, r3, #3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	3208      	adds	r2, #8
 80097b8:	69b9      	ldr	r1, [r7, #24]
 80097ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	005b      	lsls	r3, r3, #1
 80097c8:	2203      	movs	r2, #3
 80097ca:	fa02 f303 	lsl.w	r3, r2, r3
 80097ce:	43db      	mvns	r3, r3
 80097d0:	69ba      	ldr	r2, [r7, #24]
 80097d2:	4013      	ands	r3, r2
 80097d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	f003 0203 	and.w	r2, r3, #3
 80097de:	69fb      	ldr	r3, [r7, #28]
 80097e0:	005b      	lsls	r3, r3, #1
 80097e2:	fa02 f303 	lsl.w	r3, r2, r3
 80097e6:	69ba      	ldr	r2, [r7, #24]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	69ba      	ldr	r2, [r7, #24]
 80097f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	f000 80d8 	beq.w	80099b0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009800:	4b2c      	ldr	r3, [pc, #176]	; (80098b4 <HAL_GPIO_Init+0x22c>)
 8009802:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009806:	4a2b      	ldr	r2, [pc, #172]	; (80098b4 <HAL_GPIO_Init+0x22c>)
 8009808:	f043 0302 	orr.w	r3, r3, #2
 800980c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009810:	4b28      	ldr	r3, [pc, #160]	; (80098b4 <HAL_GPIO_Init+0x22c>)
 8009812:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009816:	f003 0302 	and.w	r3, r3, #2
 800981a:	60fb      	str	r3, [r7, #12]
 800981c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800981e:	4a26      	ldr	r2, [pc, #152]	; (80098b8 <HAL_GPIO_Init+0x230>)
 8009820:	69fb      	ldr	r3, [r7, #28]
 8009822:	089b      	lsrs	r3, r3, #2
 8009824:	3302      	adds	r3, #2
 8009826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800982a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800982c:	69fb      	ldr	r3, [r7, #28]
 800982e:	f003 0303 	and.w	r3, r3, #3
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	220f      	movs	r2, #15
 8009836:	fa02 f303 	lsl.w	r3, r2, r3
 800983a:	43db      	mvns	r3, r3
 800983c:	69ba      	ldr	r2, [r7, #24]
 800983e:	4013      	ands	r3, r2
 8009840:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4a1d      	ldr	r2, [pc, #116]	; (80098bc <HAL_GPIO_Init+0x234>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d04a      	beq.n	80098e0 <HAL_GPIO_Init+0x258>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a1c      	ldr	r2, [pc, #112]	; (80098c0 <HAL_GPIO_Init+0x238>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d02b      	beq.n	80098aa <HAL_GPIO_Init+0x222>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4a1b      	ldr	r2, [pc, #108]	; (80098c4 <HAL_GPIO_Init+0x23c>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d025      	beq.n	80098a6 <HAL_GPIO_Init+0x21e>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	4a1a      	ldr	r2, [pc, #104]	; (80098c8 <HAL_GPIO_Init+0x240>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d01f      	beq.n	80098a2 <HAL_GPIO_Init+0x21a>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	4a19      	ldr	r2, [pc, #100]	; (80098cc <HAL_GPIO_Init+0x244>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d019      	beq.n	800989e <HAL_GPIO_Init+0x216>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	4a18      	ldr	r2, [pc, #96]	; (80098d0 <HAL_GPIO_Init+0x248>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d013      	beq.n	800989a <HAL_GPIO_Init+0x212>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	4a17      	ldr	r2, [pc, #92]	; (80098d4 <HAL_GPIO_Init+0x24c>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d00d      	beq.n	8009896 <HAL_GPIO_Init+0x20e>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4a16      	ldr	r2, [pc, #88]	; (80098d8 <HAL_GPIO_Init+0x250>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d007      	beq.n	8009892 <HAL_GPIO_Init+0x20a>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	4a15      	ldr	r2, [pc, #84]	; (80098dc <HAL_GPIO_Init+0x254>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d101      	bne.n	800988e <HAL_GPIO_Init+0x206>
 800988a:	2309      	movs	r3, #9
 800988c:	e029      	b.n	80098e2 <HAL_GPIO_Init+0x25a>
 800988e:	230a      	movs	r3, #10
 8009890:	e027      	b.n	80098e2 <HAL_GPIO_Init+0x25a>
 8009892:	2307      	movs	r3, #7
 8009894:	e025      	b.n	80098e2 <HAL_GPIO_Init+0x25a>
 8009896:	2306      	movs	r3, #6
 8009898:	e023      	b.n	80098e2 <HAL_GPIO_Init+0x25a>
 800989a:	2305      	movs	r3, #5
 800989c:	e021      	b.n	80098e2 <HAL_GPIO_Init+0x25a>
 800989e:	2304      	movs	r3, #4
 80098a0:	e01f      	b.n	80098e2 <HAL_GPIO_Init+0x25a>
 80098a2:	2303      	movs	r3, #3
 80098a4:	e01d      	b.n	80098e2 <HAL_GPIO_Init+0x25a>
 80098a6:	2302      	movs	r3, #2
 80098a8:	e01b      	b.n	80098e2 <HAL_GPIO_Init+0x25a>
 80098aa:	2301      	movs	r3, #1
 80098ac:	e019      	b.n	80098e2 <HAL_GPIO_Init+0x25a>
 80098ae:	bf00      	nop
 80098b0:	58000080 	.word	0x58000080
 80098b4:	58024400 	.word	0x58024400
 80098b8:	58000400 	.word	0x58000400
 80098bc:	58020000 	.word	0x58020000
 80098c0:	58020400 	.word	0x58020400
 80098c4:	58020800 	.word	0x58020800
 80098c8:	58020c00 	.word	0x58020c00
 80098cc:	58021000 	.word	0x58021000
 80098d0:	58021400 	.word	0x58021400
 80098d4:	58021800 	.word	0x58021800
 80098d8:	58021c00 	.word	0x58021c00
 80098dc:	58022400 	.word	0x58022400
 80098e0:	2300      	movs	r3, #0
 80098e2:	69fa      	ldr	r2, [r7, #28]
 80098e4:	f002 0203 	and.w	r2, r2, #3
 80098e8:	0092      	lsls	r2, r2, #2
 80098ea:	4093      	lsls	r3, r2
 80098ec:	69ba      	ldr	r2, [r7, #24]
 80098ee:	4313      	orrs	r3, r2
 80098f0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80098f2:	4938      	ldr	r1, [pc, #224]	; (80099d4 <HAL_GPIO_Init+0x34c>)
 80098f4:	69fb      	ldr	r3, [r7, #28]
 80098f6:	089b      	lsrs	r3, r3, #2
 80098f8:	3302      	adds	r3, #2
 80098fa:	69ba      	ldr	r2, [r7, #24]
 80098fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	43db      	mvns	r3, r3
 800990c:	69ba      	ldr	r2, [r7, #24]
 800990e:	4013      	ands	r3, r2
 8009910:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800991a:	2b00      	cmp	r3, #0
 800991c:	d003      	beq.n	8009926 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800991e:	69ba      	ldr	r2, [r7, #24]
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	4313      	orrs	r3, r2
 8009924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009926:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800992e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	43db      	mvns	r3, r3
 800993a:	69ba      	ldr	r2, [r7, #24]
 800993c:	4013      	ands	r3, r2
 800993e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009948:	2b00      	cmp	r3, #0
 800994a:	d003      	beq.n	8009954 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800994c:	69ba      	ldr	r2, [r7, #24]
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	4313      	orrs	r3, r2
 8009952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009954:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009958:	69bb      	ldr	r3, [r7, #24]
 800995a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	43db      	mvns	r3, r3
 8009966:	69ba      	ldr	r2, [r7, #24]
 8009968:	4013      	ands	r3, r2
 800996a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009974:	2b00      	cmp	r3, #0
 8009976:	d003      	beq.n	8009980 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8009978:	69ba      	ldr	r2, [r7, #24]
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	4313      	orrs	r3, r2
 800997e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	69ba      	ldr	r2, [r7, #24]
 8009984:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	43db      	mvns	r3, r3
 8009990:	69ba      	ldr	r2, [r7, #24]
 8009992:	4013      	ands	r3, r2
 8009994:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	685b      	ldr	r3, [r3, #4]
 800999a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d003      	beq.n	80099aa <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80099a2:	69ba      	ldr	r2, [r7, #24]
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	4313      	orrs	r3, r2
 80099a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	69ba      	ldr	r2, [r7, #24]
 80099ae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	3301      	adds	r3, #1
 80099b4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	69fb      	ldr	r3, [r7, #28]
 80099bc:	fa22 f303 	lsr.w	r3, r2, r3
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	f47f ae6b 	bne.w	800969c <HAL_GPIO_Init+0x14>
  }
}
 80099c6:	bf00      	nop
 80099c8:	bf00      	nop
 80099ca:	3724      	adds	r7, #36	; 0x24
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr
 80099d4:	58000400 	.word	0x58000400

080099d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	460b      	mov	r3, r1
 80099e2:	807b      	strh	r3, [r7, #2]
 80099e4:	4613      	mov	r3, r2
 80099e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80099e8:	787b      	ldrb	r3, [r7, #1]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d003      	beq.n	80099f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80099ee:	887a      	ldrh	r2, [r7, #2]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80099f4:	e003      	b.n	80099fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80099f6:	887b      	ldrh	r3, [r7, #2]
 80099f8:	041a      	lsls	r2, r3, #16
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	619a      	str	r2, [r3, #24]
}
 80099fe:	bf00      	nop
 8009a00:	370c      	adds	r7, #12
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr
	...

08009a0c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009a14:	4b19      	ldr	r3, [pc, #100]	; (8009a7c <HAL_PWREx_ConfigSupply+0x70>)
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	f003 0304 	and.w	r3, r3, #4
 8009a1c:	2b04      	cmp	r3, #4
 8009a1e:	d00a      	beq.n	8009a36 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009a20:	4b16      	ldr	r3, [pc, #88]	; (8009a7c <HAL_PWREx_ConfigSupply+0x70>)
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	f003 0307 	and.w	r3, r3, #7
 8009a28:	687a      	ldr	r2, [r7, #4]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d001      	beq.n	8009a32 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e01f      	b.n	8009a72 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009a32:	2300      	movs	r3, #0
 8009a34:	e01d      	b.n	8009a72 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009a36:	4b11      	ldr	r3, [pc, #68]	; (8009a7c <HAL_PWREx_ConfigSupply+0x70>)
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	f023 0207 	bic.w	r2, r3, #7
 8009a3e:	490f      	ldr	r1, [pc, #60]	; (8009a7c <HAL_PWREx_ConfigSupply+0x70>)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009a46:	f7fc fecb 	bl	80067e0 <HAL_GetTick>
 8009a4a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009a4c:	e009      	b.n	8009a62 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009a4e:	f7fc fec7 	bl	80067e0 <HAL_GetTick>
 8009a52:	4602      	mov	r2, r0
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	1ad3      	subs	r3, r2, r3
 8009a58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a5c:	d901      	bls.n	8009a62 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e007      	b.n	8009a72 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009a62:	4b06      	ldr	r3, [pc, #24]	; (8009a7c <HAL_PWREx_ConfigSupply+0x70>)
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a6e:	d1ee      	bne.n	8009a4e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3710      	adds	r7, #16
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	bf00      	nop
 8009a7c:	58024800 	.word	0x58024800

08009a80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b08c      	sub	sp, #48	; 0x30
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d101      	bne.n	8009a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e397      	b.n	800a1c2 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f003 0301 	and.w	r3, r3, #1
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f000 8087 	beq.w	8009bae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009aa0:	4b9e      	ldr	r3, [pc, #632]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009aa2:	691b      	ldr	r3, [r3, #16]
 8009aa4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009aaa:	4b9c      	ldr	r3, [pc, #624]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aae:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab2:	2b10      	cmp	r3, #16
 8009ab4:	d007      	beq.n	8009ac6 <HAL_RCC_OscConfig+0x46>
 8009ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab8:	2b18      	cmp	r3, #24
 8009aba:	d110      	bne.n	8009ade <HAL_RCC_OscConfig+0x5e>
 8009abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009abe:	f003 0303 	and.w	r3, r3, #3
 8009ac2:	2b02      	cmp	r3, #2
 8009ac4:	d10b      	bne.n	8009ade <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ac6:	4b95      	ldr	r3, [pc, #596]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d06c      	beq.n	8009bac <HAL_RCC_OscConfig+0x12c>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d168      	bne.n	8009bac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009ada:	2301      	movs	r3, #1
 8009adc:	e371      	b.n	800a1c2 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ae6:	d106      	bne.n	8009af6 <HAL_RCC_OscConfig+0x76>
 8009ae8:	4b8c      	ldr	r3, [pc, #560]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a8b      	ldr	r2, [pc, #556]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009af2:	6013      	str	r3, [r2, #0]
 8009af4:	e02e      	b.n	8009b54 <HAL_RCC_OscConfig+0xd4>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d10c      	bne.n	8009b18 <HAL_RCC_OscConfig+0x98>
 8009afe:	4b87      	ldr	r3, [pc, #540]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a86      	ldr	r2, [pc, #536]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b08:	6013      	str	r3, [r2, #0]
 8009b0a:	4b84      	ldr	r3, [pc, #528]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a83      	ldr	r2, [pc, #524]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009b10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b14:	6013      	str	r3, [r2, #0]
 8009b16:	e01d      	b.n	8009b54 <HAL_RCC_OscConfig+0xd4>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b20:	d10c      	bne.n	8009b3c <HAL_RCC_OscConfig+0xbc>
 8009b22:	4b7e      	ldr	r3, [pc, #504]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a7d      	ldr	r2, [pc, #500]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009b28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009b2c:	6013      	str	r3, [r2, #0]
 8009b2e:	4b7b      	ldr	r3, [pc, #492]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a7a      	ldr	r2, [pc, #488]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b38:	6013      	str	r3, [r2, #0]
 8009b3a:	e00b      	b.n	8009b54 <HAL_RCC_OscConfig+0xd4>
 8009b3c:	4b77      	ldr	r3, [pc, #476]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a76      	ldr	r2, [pc, #472]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b46:	6013      	str	r3, [r2, #0]
 8009b48:	4b74      	ldr	r3, [pc, #464]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a73      	ldr	r2, [pc, #460]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009b4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d013      	beq.n	8009b84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b5c:	f7fc fe40 	bl	80067e0 <HAL_GetTick>
 8009b60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b62:	e008      	b.n	8009b76 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b64:	f7fc fe3c 	bl	80067e0 <HAL_GetTick>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6c:	1ad3      	subs	r3, r2, r3
 8009b6e:	2b64      	cmp	r3, #100	; 0x64
 8009b70:	d901      	bls.n	8009b76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009b72:	2303      	movs	r3, #3
 8009b74:	e325      	b.n	800a1c2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b76:	4b69      	ldr	r3, [pc, #420]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d0f0      	beq.n	8009b64 <HAL_RCC_OscConfig+0xe4>
 8009b82:	e014      	b.n	8009bae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b84:	f7fc fe2c 	bl	80067e0 <HAL_GetTick>
 8009b88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009b8a:	e008      	b.n	8009b9e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b8c:	f7fc fe28 	bl	80067e0 <HAL_GetTick>
 8009b90:	4602      	mov	r2, r0
 8009b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b94:	1ad3      	subs	r3, r2, r3
 8009b96:	2b64      	cmp	r3, #100	; 0x64
 8009b98:	d901      	bls.n	8009b9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009b9a:	2303      	movs	r3, #3
 8009b9c:	e311      	b.n	800a1c2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009b9e:	4b5f      	ldr	r3, [pc, #380]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d1f0      	bne.n	8009b8c <HAL_RCC_OscConfig+0x10c>
 8009baa:	e000      	b.n	8009bae <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f003 0302 	and.w	r3, r3, #2
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	f000 808a 	beq.w	8009cd0 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009bbc:	4b57      	ldr	r3, [pc, #348]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009bbe:	691b      	ldr	r3, [r3, #16]
 8009bc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009bc4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009bc6:	4b55      	ldr	r3, [pc, #340]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bca:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009bcc:	6a3b      	ldr	r3, [r7, #32]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d007      	beq.n	8009be2 <HAL_RCC_OscConfig+0x162>
 8009bd2:	6a3b      	ldr	r3, [r7, #32]
 8009bd4:	2b18      	cmp	r3, #24
 8009bd6:	d137      	bne.n	8009c48 <HAL_RCC_OscConfig+0x1c8>
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	f003 0303 	and.w	r3, r3, #3
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d132      	bne.n	8009c48 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009be2:	4b4e      	ldr	r3, [pc, #312]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f003 0304 	and.w	r3, r3, #4
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d005      	beq.n	8009bfa <HAL_RCC_OscConfig+0x17a>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	68db      	ldr	r3, [r3, #12]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d101      	bne.n	8009bfa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e2e3      	b.n	800a1c2 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009bfa:	4b48      	ldr	r3, [pc, #288]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f023 0219 	bic.w	r2, r3, #25
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	4945      	ldr	r1, [pc, #276]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009c0c:	f7fc fde8 	bl	80067e0 <HAL_GetTick>
 8009c10:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c12:	e008      	b.n	8009c26 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009c14:	f7fc fde4 	bl	80067e0 <HAL_GetTick>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1c:	1ad3      	subs	r3, r2, r3
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	d901      	bls.n	8009c26 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8009c22:	2303      	movs	r3, #3
 8009c24:	e2cd      	b.n	800a1c2 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c26:	4b3d      	ldr	r3, [pc, #244]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f003 0304 	and.w	r3, r3, #4
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d0f0      	beq.n	8009c14 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c32:	4b3a      	ldr	r3, [pc, #232]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	691b      	ldr	r3, [r3, #16]
 8009c3e:	061b      	lsls	r3, r3, #24
 8009c40:	4936      	ldr	r1, [pc, #216]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009c42:	4313      	orrs	r3, r2
 8009c44:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c46:	e043      	b.n	8009cd0 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d026      	beq.n	8009c9e <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009c50:	4b32      	ldr	r3, [pc, #200]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f023 0219 	bic.w	r2, r3, #25
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	492f      	ldr	r1, [pc, #188]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c62:	f7fc fdbd 	bl	80067e0 <HAL_GetTick>
 8009c66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c68:	e008      	b.n	8009c7c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009c6a:	f7fc fdb9 	bl	80067e0 <HAL_GetTick>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c72:	1ad3      	subs	r3, r2, r3
 8009c74:	2b02      	cmp	r3, #2
 8009c76:	d901      	bls.n	8009c7c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009c78:	2303      	movs	r3, #3
 8009c7a:	e2a2      	b.n	800a1c2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c7c:	4b27      	ldr	r3, [pc, #156]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f003 0304 	and.w	r3, r3, #4
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d0f0      	beq.n	8009c6a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c88:	4b24      	ldr	r3, [pc, #144]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	691b      	ldr	r3, [r3, #16]
 8009c94:	061b      	lsls	r3, r3, #24
 8009c96:	4921      	ldr	r1, [pc, #132]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	604b      	str	r3, [r1, #4]
 8009c9c:	e018      	b.n	8009cd0 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009c9e:	4b1f      	ldr	r3, [pc, #124]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a1e      	ldr	r2, [pc, #120]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009ca4:	f023 0301 	bic.w	r3, r3, #1
 8009ca8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009caa:	f7fc fd99 	bl	80067e0 <HAL_GetTick>
 8009cae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009cb0:	e008      	b.n	8009cc4 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009cb2:	f7fc fd95 	bl	80067e0 <HAL_GetTick>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cba:	1ad3      	subs	r3, r2, r3
 8009cbc:	2b02      	cmp	r3, #2
 8009cbe:	d901      	bls.n	8009cc4 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8009cc0:	2303      	movs	r3, #3
 8009cc2:	e27e      	b.n	800a1c2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009cc4:	4b15      	ldr	r3, [pc, #84]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f003 0304 	and.w	r3, r3, #4
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d1f0      	bne.n	8009cb2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f003 0310 	and.w	r3, r3, #16
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d06d      	beq.n	8009db8 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009cdc:	4b0f      	ldr	r3, [pc, #60]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ce4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009ce6:	4b0d      	ldr	r3, [pc, #52]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cea:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	2b08      	cmp	r3, #8
 8009cf0:	d007      	beq.n	8009d02 <HAL_RCC_OscConfig+0x282>
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	2b18      	cmp	r3, #24
 8009cf6:	d11e      	bne.n	8009d36 <HAL_RCC_OscConfig+0x2b6>
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	f003 0303 	and.w	r3, r3, #3
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d119      	bne.n	8009d36 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009d02:	4b06      	ldr	r3, [pc, #24]	; (8009d1c <HAL_RCC_OscConfig+0x29c>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d008      	beq.n	8009d20 <HAL_RCC_OscConfig+0x2a0>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	69db      	ldr	r3, [r3, #28]
 8009d12:	2b80      	cmp	r3, #128	; 0x80
 8009d14:	d004      	beq.n	8009d20 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8009d16:	2301      	movs	r3, #1
 8009d18:	e253      	b.n	800a1c2 <HAL_RCC_OscConfig+0x742>
 8009d1a:	bf00      	nop
 8009d1c:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009d20:	4ba3      	ldr	r3, [pc, #652]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6a1b      	ldr	r3, [r3, #32]
 8009d2c:	061b      	lsls	r3, r3, #24
 8009d2e:	49a0      	ldr	r1, [pc, #640]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009d30:	4313      	orrs	r3, r2
 8009d32:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009d34:	e040      	b.n	8009db8 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	69db      	ldr	r3, [r3, #28]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d023      	beq.n	8009d86 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009d3e:	4b9c      	ldr	r3, [pc, #624]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4a9b      	ldr	r2, [pc, #620]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d4a:	f7fc fd49 	bl	80067e0 <HAL_GetTick>
 8009d4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009d50:	e008      	b.n	8009d64 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009d52:	f7fc fd45 	bl	80067e0 <HAL_GetTick>
 8009d56:	4602      	mov	r2, r0
 8009d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5a:	1ad3      	subs	r3, r2, r3
 8009d5c:	2b02      	cmp	r3, #2
 8009d5e:	d901      	bls.n	8009d64 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8009d60:	2303      	movs	r3, #3
 8009d62:	e22e      	b.n	800a1c2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009d64:	4b92      	ldr	r3, [pc, #584]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d0f0      	beq.n	8009d52 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009d70:	4b8f      	ldr	r3, [pc, #572]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6a1b      	ldr	r3, [r3, #32]
 8009d7c:	061b      	lsls	r3, r3, #24
 8009d7e:	498c      	ldr	r1, [pc, #560]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009d80:	4313      	orrs	r3, r2
 8009d82:	60cb      	str	r3, [r1, #12]
 8009d84:	e018      	b.n	8009db8 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009d86:	4b8a      	ldr	r3, [pc, #552]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a89      	ldr	r2, [pc, #548]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009d8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d92:	f7fc fd25 	bl	80067e0 <HAL_GetTick>
 8009d96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009d98:	e008      	b.n	8009dac <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009d9a:	f7fc fd21 	bl	80067e0 <HAL_GetTick>
 8009d9e:	4602      	mov	r2, r0
 8009da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da2:	1ad3      	subs	r3, r2, r3
 8009da4:	2b02      	cmp	r3, #2
 8009da6:	d901      	bls.n	8009dac <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8009da8:	2303      	movs	r3, #3
 8009daa:	e20a      	b.n	800a1c2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009dac:	4b80      	ldr	r3, [pc, #512]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d1f0      	bne.n	8009d9a <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f003 0308 	and.w	r3, r3, #8
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d036      	beq.n	8009e32 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	695b      	ldr	r3, [r3, #20]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d019      	beq.n	8009e00 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009dcc:	4b78      	ldr	r3, [pc, #480]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dd0:	4a77      	ldr	r2, [pc, #476]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009dd2:	f043 0301 	orr.w	r3, r3, #1
 8009dd6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dd8:	f7fc fd02 	bl	80067e0 <HAL_GetTick>
 8009ddc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009dde:	e008      	b.n	8009df2 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009de0:	f7fc fcfe 	bl	80067e0 <HAL_GetTick>
 8009de4:	4602      	mov	r2, r0
 8009de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de8:	1ad3      	subs	r3, r2, r3
 8009dea:	2b02      	cmp	r3, #2
 8009dec:	d901      	bls.n	8009df2 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8009dee:	2303      	movs	r3, #3
 8009df0:	e1e7      	b.n	800a1c2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009df2:	4b6f      	ldr	r3, [pc, #444]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009df4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009df6:	f003 0302 	and.w	r3, r3, #2
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d0f0      	beq.n	8009de0 <HAL_RCC_OscConfig+0x360>
 8009dfe:	e018      	b.n	8009e32 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009e00:	4b6b      	ldr	r3, [pc, #428]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009e02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e04:	4a6a      	ldr	r2, [pc, #424]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009e06:	f023 0301 	bic.w	r3, r3, #1
 8009e0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e0c:	f7fc fce8 	bl	80067e0 <HAL_GetTick>
 8009e10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009e12:	e008      	b.n	8009e26 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009e14:	f7fc fce4 	bl	80067e0 <HAL_GetTick>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1c:	1ad3      	subs	r3, r2, r3
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	d901      	bls.n	8009e26 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8009e22:	2303      	movs	r3, #3
 8009e24:	e1cd      	b.n	800a1c2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009e26:	4b62      	ldr	r3, [pc, #392]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e2a:	f003 0302 	and.w	r3, r3, #2
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d1f0      	bne.n	8009e14 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f003 0320 	and.w	r3, r3, #32
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d036      	beq.n	8009eac <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	699b      	ldr	r3, [r3, #24]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d019      	beq.n	8009e7a <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009e46:	4b5a      	ldr	r3, [pc, #360]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a59      	ldr	r2, [pc, #356]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009e4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009e50:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009e52:	f7fc fcc5 	bl	80067e0 <HAL_GetTick>
 8009e56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009e58:	e008      	b.n	8009e6c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009e5a:	f7fc fcc1 	bl	80067e0 <HAL_GetTick>
 8009e5e:	4602      	mov	r2, r0
 8009e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e62:	1ad3      	subs	r3, r2, r3
 8009e64:	2b02      	cmp	r3, #2
 8009e66:	d901      	bls.n	8009e6c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8009e68:	2303      	movs	r3, #3
 8009e6a:	e1aa      	b.n	800a1c2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009e6c:	4b50      	ldr	r3, [pc, #320]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d0f0      	beq.n	8009e5a <HAL_RCC_OscConfig+0x3da>
 8009e78:	e018      	b.n	8009eac <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009e7a:	4b4d      	ldr	r3, [pc, #308]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a4c      	ldr	r2, [pc, #304]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009e80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e84:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009e86:	f7fc fcab 	bl	80067e0 <HAL_GetTick>
 8009e8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009e8c:	e008      	b.n	8009ea0 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009e8e:	f7fc fca7 	bl	80067e0 <HAL_GetTick>
 8009e92:	4602      	mov	r2, r0
 8009e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e96:	1ad3      	subs	r3, r2, r3
 8009e98:	2b02      	cmp	r3, #2
 8009e9a:	d901      	bls.n	8009ea0 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8009e9c:	2303      	movs	r3, #3
 8009e9e:	e190      	b.n	800a1c2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009ea0:	4b43      	ldr	r3, [pc, #268]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d1f0      	bne.n	8009e8e <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f003 0304 	and.w	r3, r3, #4
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	f000 8085 	beq.w	8009fc4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009eba:	4b3e      	ldr	r3, [pc, #248]	; (8009fb4 <HAL_RCC_OscConfig+0x534>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a3d      	ldr	r2, [pc, #244]	; (8009fb4 <HAL_RCC_OscConfig+0x534>)
 8009ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ec4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009ec6:	f7fc fc8b 	bl	80067e0 <HAL_GetTick>
 8009eca:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009ecc:	e008      	b.n	8009ee0 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009ece:	f7fc fc87 	bl	80067e0 <HAL_GetTick>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed6:	1ad3      	subs	r3, r2, r3
 8009ed8:	2b64      	cmp	r3, #100	; 0x64
 8009eda:	d901      	bls.n	8009ee0 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8009edc:	2303      	movs	r3, #3
 8009ede:	e170      	b.n	800a1c2 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009ee0:	4b34      	ldr	r3, [pc, #208]	; (8009fb4 <HAL_RCC_OscConfig+0x534>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d0f0      	beq.n	8009ece <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	689b      	ldr	r3, [r3, #8]
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	d106      	bne.n	8009f02 <HAL_RCC_OscConfig+0x482>
 8009ef4:	4b2e      	ldr	r3, [pc, #184]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ef8:	4a2d      	ldr	r2, [pc, #180]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009efa:	f043 0301 	orr.w	r3, r3, #1
 8009efe:	6713      	str	r3, [r2, #112]	; 0x70
 8009f00:	e02d      	b.n	8009f5e <HAL_RCC_OscConfig+0x4de>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	689b      	ldr	r3, [r3, #8]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d10c      	bne.n	8009f24 <HAL_RCC_OscConfig+0x4a4>
 8009f0a:	4b29      	ldr	r3, [pc, #164]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f0e:	4a28      	ldr	r2, [pc, #160]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009f10:	f023 0301 	bic.w	r3, r3, #1
 8009f14:	6713      	str	r3, [r2, #112]	; 0x70
 8009f16:	4b26      	ldr	r3, [pc, #152]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f1a:	4a25      	ldr	r2, [pc, #148]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009f1c:	f023 0304 	bic.w	r3, r3, #4
 8009f20:	6713      	str	r3, [r2, #112]	; 0x70
 8009f22:	e01c      	b.n	8009f5e <HAL_RCC_OscConfig+0x4de>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	2b05      	cmp	r3, #5
 8009f2a:	d10c      	bne.n	8009f46 <HAL_RCC_OscConfig+0x4c6>
 8009f2c:	4b20      	ldr	r3, [pc, #128]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f30:	4a1f      	ldr	r2, [pc, #124]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009f32:	f043 0304 	orr.w	r3, r3, #4
 8009f36:	6713      	str	r3, [r2, #112]	; 0x70
 8009f38:	4b1d      	ldr	r3, [pc, #116]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f3c:	4a1c      	ldr	r2, [pc, #112]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009f3e:	f043 0301 	orr.w	r3, r3, #1
 8009f42:	6713      	str	r3, [r2, #112]	; 0x70
 8009f44:	e00b      	b.n	8009f5e <HAL_RCC_OscConfig+0x4de>
 8009f46:	4b1a      	ldr	r3, [pc, #104]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f4a:	4a19      	ldr	r2, [pc, #100]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009f4c:	f023 0301 	bic.w	r3, r3, #1
 8009f50:	6713      	str	r3, [r2, #112]	; 0x70
 8009f52:	4b17      	ldr	r3, [pc, #92]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f56:	4a16      	ldr	r2, [pc, #88]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009f58:	f023 0304 	bic.w	r3, r3, #4
 8009f5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d015      	beq.n	8009f92 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f66:	f7fc fc3b 	bl	80067e0 <HAL_GetTick>
 8009f6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f6c:	e00a      	b.n	8009f84 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009f6e:	f7fc fc37 	bl	80067e0 <HAL_GetTick>
 8009f72:	4602      	mov	r2, r0
 8009f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f76:	1ad3      	subs	r3, r2, r3
 8009f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d901      	bls.n	8009f84 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8009f80:	2303      	movs	r3, #3
 8009f82:	e11e      	b.n	800a1c2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f84:	4b0a      	ldr	r3, [pc, #40]	; (8009fb0 <HAL_RCC_OscConfig+0x530>)
 8009f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f88:	f003 0302 	and.w	r3, r3, #2
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d0ee      	beq.n	8009f6e <HAL_RCC_OscConfig+0x4ee>
 8009f90:	e018      	b.n	8009fc4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f92:	f7fc fc25 	bl	80067e0 <HAL_GetTick>
 8009f96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009f98:	e00e      	b.n	8009fb8 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009f9a:	f7fc fc21 	bl	80067e0 <HAL_GetTick>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d905      	bls.n	8009fb8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009fac:	2303      	movs	r3, #3
 8009fae:	e108      	b.n	800a1c2 <HAL_RCC_OscConfig+0x742>
 8009fb0:	58024400 	.word	0x58024400
 8009fb4:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009fb8:	4b84      	ldr	r3, [pc, #528]	; (800a1cc <HAL_RCC_OscConfig+0x74c>)
 8009fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fbc:	f003 0302 	and.w	r3, r3, #2
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d1ea      	bne.n	8009f9a <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	f000 80f9 	beq.w	800a1c0 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009fce:	4b7f      	ldr	r3, [pc, #508]	; (800a1cc <HAL_RCC_OscConfig+0x74c>)
 8009fd0:	691b      	ldr	r3, [r3, #16]
 8009fd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009fd6:	2b18      	cmp	r3, #24
 8009fd8:	f000 80b4 	beq.w	800a144 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe0:	2b02      	cmp	r3, #2
 8009fe2:	f040 8095 	bne.w	800a110 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009fe6:	4b79      	ldr	r3, [pc, #484]	; (800a1cc <HAL_RCC_OscConfig+0x74c>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a78      	ldr	r2, [pc, #480]	; (800a1cc <HAL_RCC_OscConfig+0x74c>)
 8009fec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ff0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ff2:	f7fc fbf5 	bl	80067e0 <HAL_GetTick>
 8009ff6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009ff8:	e008      	b.n	800a00c <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009ffa:	f7fc fbf1 	bl	80067e0 <HAL_GetTick>
 8009ffe:	4602      	mov	r2, r0
 800a000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a002:	1ad3      	subs	r3, r2, r3
 800a004:	2b02      	cmp	r3, #2
 800a006:	d901      	bls.n	800a00c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800a008:	2303      	movs	r3, #3
 800a00a:	e0da      	b.n	800a1c2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a00c:	4b6f      	ldr	r3, [pc, #444]	; (800a1cc <HAL_RCC_OscConfig+0x74c>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a014:	2b00      	cmp	r3, #0
 800a016:	d1f0      	bne.n	8009ffa <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a018:	4b6c      	ldr	r3, [pc, #432]	; (800a1cc <HAL_RCC_OscConfig+0x74c>)
 800a01a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a01c:	4b6c      	ldr	r3, [pc, #432]	; (800a1d0 <HAL_RCC_OscConfig+0x750>)
 800a01e:	4013      	ands	r3, r2
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a028:	0112      	lsls	r2, r2, #4
 800a02a:	430a      	orrs	r2, r1
 800a02c:	4967      	ldr	r1, [pc, #412]	; (800a1cc <HAL_RCC_OscConfig+0x74c>)
 800a02e:	4313      	orrs	r3, r2
 800a030:	628b      	str	r3, [r1, #40]	; 0x28
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a036:	3b01      	subs	r3, #1
 800a038:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a040:	3b01      	subs	r3, #1
 800a042:	025b      	lsls	r3, r3, #9
 800a044:	b29b      	uxth	r3, r3
 800a046:	431a      	orrs	r2, r3
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a04c:	3b01      	subs	r3, #1
 800a04e:	041b      	lsls	r3, r3, #16
 800a050:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a054:	431a      	orrs	r2, r3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a05a:	3b01      	subs	r3, #1
 800a05c:	061b      	lsls	r3, r3, #24
 800a05e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a062:	495a      	ldr	r1, [pc, #360]	; (800a1cc <HAL_RCC_OscConfig+0x74c>)
 800a064:	4313      	orrs	r3, r2
 800a066:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800a068:	4b58      	ldr	r3, [pc, #352]	; (800a1cc <HAL_RCC_OscConfig+0x74c>)
 800a06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a06c:	4a57      	ldr	r2, [pc, #348]	; (800a1cc <HAL_RCC_OscConfig+0x74c>)
 800a06e:	f023 0301 	bic.w	r3, r3, #1
 800a072:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a074:	4b55      	ldr	r3, [pc, #340]	; (800a1cc <HAL_RCC_OscConfig+0x74c>)
 800a076:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a078:	4b56      	ldr	r3, [pc, #344]	; (800a1d4 <HAL_RCC_OscConfig+0x754>)
 800a07a:	4013      	ands	r3, r2
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a080:	00d2      	lsls	r2, r2, #3
 800a082:	4952      	ldr	r1, [pc, #328]	; (800a1cc <HAL_RCC_OscConfig+0x74c>)
 800a084:	4313      	orrs	r3, r2
 800a086:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a088:	4b50      	ldr	r3, [pc, #320]	; (800a1cc <HAL_RCC_OscConfig+0x74c>)
 800a08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a08c:	f023 020c 	bic.w	r2, r3, #12
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a094:	494d      	ldr	r1, [pc, #308]	; (800a1cc <HAL_RCC_OscConfig+0x74c>)
 800a096:	4313      	orrs	r3, r2
 800a098:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a09a:	4b4c      	ldr	r3, [pc, #304]	; (800a1cc <HAL_RCC_OscConfig+0x74c>)
 800a09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09e:	f023 0202 	bic.w	r2, r3, #2
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0a6:	4949      	ldr	r1, [pc, #292]	; (800a1cc <HAL_RCC_OscConfig+0x74c>)
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a0ac:	4b47      	ldr	r3, [pc, #284]	; (800a1cc <HAL_RCC_OscConfig+0x74c>)
 800a0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b0:	4a46      	ldr	r2, [pc, #280]	; (800a1cc <HAL_RCC_OscConfig+0x74c>)
 800a0b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0b8:	4b44      	ldr	r3, [pc, #272]	; (800a1cc <HAL_RCC_OscConfig+0x74c>)
 800a0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0bc:	4a43      	ldr	r2, [pc, #268]	; (800a1cc <HAL_RCC_OscConfig+0x74c>)
 800a0be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a0c4:	4b41      	ldr	r3, [pc, #260]	; (800a1cc <HAL_RCC_OscConfig+0x74c>)
 800a0c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c8:	4a40      	ldr	r2, [pc, #256]	; (800a1cc <HAL_RCC_OscConfig+0x74c>)
 800a0ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a0ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800a0d0:	4b3e      	ldr	r3, [pc, #248]	; (800a1cc <HAL_RCC_OscConfig+0x74c>)
 800a0d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d4:	4a3d      	ldr	r2, [pc, #244]	; (800a1cc <HAL_RCC_OscConfig+0x74c>)
 800a0d6:	f043 0301 	orr.w	r3, r3, #1
 800a0da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a0dc:	4b3b      	ldr	r3, [pc, #236]	; (800a1cc <HAL_RCC_OscConfig+0x74c>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a3a      	ldr	r2, [pc, #232]	; (800a1cc <HAL_RCC_OscConfig+0x74c>)
 800a0e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a0e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0e8:	f7fc fb7a 	bl	80067e0 <HAL_GetTick>
 800a0ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a0ee:	e008      	b.n	800a102 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a0f0:	f7fc fb76 	bl	80067e0 <HAL_GetTick>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f8:	1ad3      	subs	r3, r2, r3
 800a0fa:	2b02      	cmp	r3, #2
 800a0fc:	d901      	bls.n	800a102 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800a0fe:	2303      	movs	r3, #3
 800a100:	e05f      	b.n	800a1c2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a102:	4b32      	ldr	r3, [pc, #200]	; (800a1cc <HAL_RCC_OscConfig+0x74c>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d0f0      	beq.n	800a0f0 <HAL_RCC_OscConfig+0x670>
 800a10e:	e057      	b.n	800a1c0 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a110:	4b2e      	ldr	r3, [pc, #184]	; (800a1cc <HAL_RCC_OscConfig+0x74c>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a2d      	ldr	r2, [pc, #180]	; (800a1cc <HAL_RCC_OscConfig+0x74c>)
 800a116:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a11a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a11c:	f7fc fb60 	bl	80067e0 <HAL_GetTick>
 800a120:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a122:	e008      	b.n	800a136 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a124:	f7fc fb5c 	bl	80067e0 <HAL_GetTick>
 800a128:	4602      	mov	r2, r0
 800a12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12c:	1ad3      	subs	r3, r2, r3
 800a12e:	2b02      	cmp	r3, #2
 800a130:	d901      	bls.n	800a136 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800a132:	2303      	movs	r3, #3
 800a134:	e045      	b.n	800a1c2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a136:	4b25      	ldr	r3, [pc, #148]	; (800a1cc <HAL_RCC_OscConfig+0x74c>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d1f0      	bne.n	800a124 <HAL_RCC_OscConfig+0x6a4>
 800a142:	e03d      	b.n	800a1c0 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a144:	4b21      	ldr	r3, [pc, #132]	; (800a1cc <HAL_RCC_OscConfig+0x74c>)
 800a146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a148:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a14a:	4b20      	ldr	r3, [pc, #128]	; (800a1cc <HAL_RCC_OscConfig+0x74c>)
 800a14c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a14e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a154:	2b01      	cmp	r3, #1
 800a156:	d031      	beq.n	800a1bc <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	f003 0203 	and.w	r2, r3, #3
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a162:	429a      	cmp	r2, r3
 800a164:	d12a      	bne.n	800a1bc <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	091b      	lsrs	r3, r3, #4
 800a16a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a172:	429a      	cmp	r2, r3
 800a174:	d122      	bne.n	800a1bc <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a180:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a182:	429a      	cmp	r2, r3
 800a184:	d11a      	bne.n	800a1bc <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	0a5b      	lsrs	r3, r3, #9
 800a18a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a192:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a194:	429a      	cmp	r2, r3
 800a196:	d111      	bne.n	800a1bc <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	0c1b      	lsrs	r3, r3, #16
 800a19c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1a4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d108      	bne.n	800a1bc <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	0e1b      	lsrs	r3, r3, #24
 800a1ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1b6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d001      	beq.n	800a1c0 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	e000      	b.n	800a1c2 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 800a1c0:	2300      	movs	r3, #0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3730      	adds	r7, #48	; 0x30
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	58024400 	.word	0x58024400
 800a1d0:	fffffc0c 	.word	0xfffffc0c
 800a1d4:	ffff0007 	.word	0xffff0007

0800a1d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b086      	sub	sp, #24
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d101      	bne.n	800a1ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e19c      	b.n	800a526 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a1ec:	4b8a      	ldr	r3, [pc, #552]	; (800a418 <HAL_RCC_ClockConfig+0x240>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f003 030f 	and.w	r3, r3, #15
 800a1f4:	683a      	ldr	r2, [r7, #0]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d910      	bls.n	800a21c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1fa:	4b87      	ldr	r3, [pc, #540]	; (800a418 <HAL_RCC_ClockConfig+0x240>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f023 020f 	bic.w	r2, r3, #15
 800a202:	4985      	ldr	r1, [pc, #532]	; (800a418 <HAL_RCC_ClockConfig+0x240>)
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	4313      	orrs	r3, r2
 800a208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a20a:	4b83      	ldr	r3, [pc, #524]	; (800a418 <HAL_RCC_ClockConfig+0x240>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f003 030f 	and.w	r3, r3, #15
 800a212:	683a      	ldr	r2, [r7, #0]
 800a214:	429a      	cmp	r2, r3
 800a216:	d001      	beq.n	800a21c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a218:	2301      	movs	r3, #1
 800a21a:	e184      	b.n	800a526 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f003 0304 	and.w	r3, r3, #4
 800a224:	2b00      	cmp	r3, #0
 800a226:	d010      	beq.n	800a24a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	691a      	ldr	r2, [r3, #16]
 800a22c:	4b7b      	ldr	r3, [pc, #492]	; (800a41c <HAL_RCC_ClockConfig+0x244>)
 800a22e:	699b      	ldr	r3, [r3, #24]
 800a230:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a234:	429a      	cmp	r2, r3
 800a236:	d908      	bls.n	800a24a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a238:	4b78      	ldr	r3, [pc, #480]	; (800a41c <HAL_RCC_ClockConfig+0x244>)
 800a23a:	699b      	ldr	r3, [r3, #24]
 800a23c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	691b      	ldr	r3, [r3, #16]
 800a244:	4975      	ldr	r1, [pc, #468]	; (800a41c <HAL_RCC_ClockConfig+0x244>)
 800a246:	4313      	orrs	r3, r2
 800a248:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f003 0308 	and.w	r3, r3, #8
 800a252:	2b00      	cmp	r3, #0
 800a254:	d010      	beq.n	800a278 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	695a      	ldr	r2, [r3, #20]
 800a25a:	4b70      	ldr	r3, [pc, #448]	; (800a41c <HAL_RCC_ClockConfig+0x244>)
 800a25c:	69db      	ldr	r3, [r3, #28]
 800a25e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a262:	429a      	cmp	r2, r3
 800a264:	d908      	bls.n	800a278 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a266:	4b6d      	ldr	r3, [pc, #436]	; (800a41c <HAL_RCC_ClockConfig+0x244>)
 800a268:	69db      	ldr	r3, [r3, #28]
 800a26a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	695b      	ldr	r3, [r3, #20]
 800a272:	496a      	ldr	r1, [pc, #424]	; (800a41c <HAL_RCC_ClockConfig+0x244>)
 800a274:	4313      	orrs	r3, r2
 800a276:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f003 0310 	and.w	r3, r3, #16
 800a280:	2b00      	cmp	r3, #0
 800a282:	d010      	beq.n	800a2a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	699a      	ldr	r2, [r3, #24]
 800a288:	4b64      	ldr	r3, [pc, #400]	; (800a41c <HAL_RCC_ClockConfig+0x244>)
 800a28a:	69db      	ldr	r3, [r3, #28]
 800a28c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a290:	429a      	cmp	r2, r3
 800a292:	d908      	bls.n	800a2a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a294:	4b61      	ldr	r3, [pc, #388]	; (800a41c <HAL_RCC_ClockConfig+0x244>)
 800a296:	69db      	ldr	r3, [r3, #28]
 800a298:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	699b      	ldr	r3, [r3, #24]
 800a2a0:	495e      	ldr	r1, [pc, #376]	; (800a41c <HAL_RCC_ClockConfig+0x244>)
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f003 0320 	and.w	r3, r3, #32
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d010      	beq.n	800a2d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	69da      	ldr	r2, [r3, #28]
 800a2b6:	4b59      	ldr	r3, [pc, #356]	; (800a41c <HAL_RCC_ClockConfig+0x244>)
 800a2b8:	6a1b      	ldr	r3, [r3, #32]
 800a2ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d908      	bls.n	800a2d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a2c2:	4b56      	ldr	r3, [pc, #344]	; (800a41c <HAL_RCC_ClockConfig+0x244>)
 800a2c4:	6a1b      	ldr	r3, [r3, #32]
 800a2c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	69db      	ldr	r3, [r3, #28]
 800a2ce:	4953      	ldr	r1, [pc, #332]	; (800a41c <HAL_RCC_ClockConfig+0x244>)
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f003 0302 	and.w	r3, r3, #2
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d010      	beq.n	800a302 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	68da      	ldr	r2, [r3, #12]
 800a2e4:	4b4d      	ldr	r3, [pc, #308]	; (800a41c <HAL_RCC_ClockConfig+0x244>)
 800a2e6:	699b      	ldr	r3, [r3, #24]
 800a2e8:	f003 030f 	and.w	r3, r3, #15
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d908      	bls.n	800a302 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a2f0:	4b4a      	ldr	r3, [pc, #296]	; (800a41c <HAL_RCC_ClockConfig+0x244>)
 800a2f2:	699b      	ldr	r3, [r3, #24]
 800a2f4:	f023 020f 	bic.w	r2, r3, #15
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	4947      	ldr	r1, [pc, #284]	; (800a41c <HAL_RCC_ClockConfig+0x244>)
 800a2fe:	4313      	orrs	r3, r2
 800a300:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f003 0301 	and.w	r3, r3, #1
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d055      	beq.n	800a3ba <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a30e:	4b43      	ldr	r3, [pc, #268]	; (800a41c <HAL_RCC_ClockConfig+0x244>)
 800a310:	699b      	ldr	r3, [r3, #24]
 800a312:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	689b      	ldr	r3, [r3, #8]
 800a31a:	4940      	ldr	r1, [pc, #256]	; (800a41c <HAL_RCC_ClockConfig+0x244>)
 800a31c:	4313      	orrs	r3, r2
 800a31e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	2b02      	cmp	r3, #2
 800a326:	d107      	bne.n	800a338 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a328:	4b3c      	ldr	r3, [pc, #240]	; (800a41c <HAL_RCC_ClockConfig+0x244>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a330:	2b00      	cmp	r3, #0
 800a332:	d121      	bne.n	800a378 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a334:	2301      	movs	r3, #1
 800a336:	e0f6      	b.n	800a526 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	2b03      	cmp	r3, #3
 800a33e:	d107      	bne.n	800a350 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a340:	4b36      	ldr	r3, [pc, #216]	; (800a41c <HAL_RCC_ClockConfig+0x244>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d115      	bne.n	800a378 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e0ea      	b.n	800a526 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	2b01      	cmp	r3, #1
 800a356:	d107      	bne.n	800a368 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a358:	4b30      	ldr	r3, [pc, #192]	; (800a41c <HAL_RCC_ClockConfig+0x244>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a360:	2b00      	cmp	r3, #0
 800a362:	d109      	bne.n	800a378 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a364:	2301      	movs	r3, #1
 800a366:	e0de      	b.n	800a526 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a368:	4b2c      	ldr	r3, [pc, #176]	; (800a41c <HAL_RCC_ClockConfig+0x244>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f003 0304 	and.w	r3, r3, #4
 800a370:	2b00      	cmp	r3, #0
 800a372:	d101      	bne.n	800a378 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a374:	2301      	movs	r3, #1
 800a376:	e0d6      	b.n	800a526 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a378:	4b28      	ldr	r3, [pc, #160]	; (800a41c <HAL_RCC_ClockConfig+0x244>)
 800a37a:	691b      	ldr	r3, [r3, #16]
 800a37c:	f023 0207 	bic.w	r2, r3, #7
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	4925      	ldr	r1, [pc, #148]	; (800a41c <HAL_RCC_ClockConfig+0x244>)
 800a386:	4313      	orrs	r3, r2
 800a388:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a38a:	f7fc fa29 	bl	80067e0 <HAL_GetTick>
 800a38e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a390:	e00a      	b.n	800a3a8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a392:	f7fc fa25 	bl	80067e0 <HAL_GetTick>
 800a396:	4602      	mov	r2, r0
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	1ad3      	subs	r3, r2, r3
 800a39c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d901      	bls.n	800a3a8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a3a4:	2303      	movs	r3, #3
 800a3a6:	e0be      	b.n	800a526 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3a8:	4b1c      	ldr	r3, [pc, #112]	; (800a41c <HAL_RCC_ClockConfig+0x244>)
 800a3aa:	691b      	ldr	r3, [r3, #16]
 800a3ac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	00db      	lsls	r3, r3, #3
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d1eb      	bne.n	800a392 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f003 0302 	and.w	r3, r3, #2
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d010      	beq.n	800a3e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	68da      	ldr	r2, [r3, #12]
 800a3ca:	4b14      	ldr	r3, [pc, #80]	; (800a41c <HAL_RCC_ClockConfig+0x244>)
 800a3cc:	699b      	ldr	r3, [r3, #24]
 800a3ce:	f003 030f 	and.w	r3, r3, #15
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d208      	bcs.n	800a3e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a3d6:	4b11      	ldr	r3, [pc, #68]	; (800a41c <HAL_RCC_ClockConfig+0x244>)
 800a3d8:	699b      	ldr	r3, [r3, #24]
 800a3da:	f023 020f 	bic.w	r2, r3, #15
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	68db      	ldr	r3, [r3, #12]
 800a3e2:	490e      	ldr	r1, [pc, #56]	; (800a41c <HAL_RCC_ClockConfig+0x244>)
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a3e8:	4b0b      	ldr	r3, [pc, #44]	; (800a418 <HAL_RCC_ClockConfig+0x240>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f003 030f 	and.w	r3, r3, #15
 800a3f0:	683a      	ldr	r2, [r7, #0]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d214      	bcs.n	800a420 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3f6:	4b08      	ldr	r3, [pc, #32]	; (800a418 <HAL_RCC_ClockConfig+0x240>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f023 020f 	bic.w	r2, r3, #15
 800a3fe:	4906      	ldr	r1, [pc, #24]	; (800a418 <HAL_RCC_ClockConfig+0x240>)
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	4313      	orrs	r3, r2
 800a404:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a406:	4b04      	ldr	r3, [pc, #16]	; (800a418 <HAL_RCC_ClockConfig+0x240>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f003 030f 	and.w	r3, r3, #15
 800a40e:	683a      	ldr	r2, [r7, #0]
 800a410:	429a      	cmp	r2, r3
 800a412:	d005      	beq.n	800a420 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a414:	2301      	movs	r3, #1
 800a416:	e086      	b.n	800a526 <HAL_RCC_ClockConfig+0x34e>
 800a418:	52002000 	.word	0x52002000
 800a41c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f003 0304 	and.w	r3, r3, #4
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d010      	beq.n	800a44e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	691a      	ldr	r2, [r3, #16]
 800a430:	4b3f      	ldr	r3, [pc, #252]	; (800a530 <HAL_RCC_ClockConfig+0x358>)
 800a432:	699b      	ldr	r3, [r3, #24]
 800a434:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a438:	429a      	cmp	r2, r3
 800a43a:	d208      	bcs.n	800a44e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a43c:	4b3c      	ldr	r3, [pc, #240]	; (800a530 <HAL_RCC_ClockConfig+0x358>)
 800a43e:	699b      	ldr	r3, [r3, #24]
 800a440:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	691b      	ldr	r3, [r3, #16]
 800a448:	4939      	ldr	r1, [pc, #228]	; (800a530 <HAL_RCC_ClockConfig+0x358>)
 800a44a:	4313      	orrs	r3, r2
 800a44c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 0308 	and.w	r3, r3, #8
 800a456:	2b00      	cmp	r3, #0
 800a458:	d010      	beq.n	800a47c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	695a      	ldr	r2, [r3, #20]
 800a45e:	4b34      	ldr	r3, [pc, #208]	; (800a530 <HAL_RCC_ClockConfig+0x358>)
 800a460:	69db      	ldr	r3, [r3, #28]
 800a462:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a466:	429a      	cmp	r2, r3
 800a468:	d208      	bcs.n	800a47c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a46a:	4b31      	ldr	r3, [pc, #196]	; (800a530 <HAL_RCC_ClockConfig+0x358>)
 800a46c:	69db      	ldr	r3, [r3, #28]
 800a46e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	695b      	ldr	r3, [r3, #20]
 800a476:	492e      	ldr	r1, [pc, #184]	; (800a530 <HAL_RCC_ClockConfig+0x358>)
 800a478:	4313      	orrs	r3, r2
 800a47a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f003 0310 	and.w	r3, r3, #16
 800a484:	2b00      	cmp	r3, #0
 800a486:	d010      	beq.n	800a4aa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	699a      	ldr	r2, [r3, #24]
 800a48c:	4b28      	ldr	r3, [pc, #160]	; (800a530 <HAL_RCC_ClockConfig+0x358>)
 800a48e:	69db      	ldr	r3, [r3, #28]
 800a490:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a494:	429a      	cmp	r2, r3
 800a496:	d208      	bcs.n	800a4aa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a498:	4b25      	ldr	r3, [pc, #148]	; (800a530 <HAL_RCC_ClockConfig+0x358>)
 800a49a:	69db      	ldr	r3, [r3, #28]
 800a49c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	699b      	ldr	r3, [r3, #24]
 800a4a4:	4922      	ldr	r1, [pc, #136]	; (800a530 <HAL_RCC_ClockConfig+0x358>)
 800a4a6:	4313      	orrs	r3, r2
 800a4a8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f003 0320 	and.w	r3, r3, #32
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d010      	beq.n	800a4d8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	69da      	ldr	r2, [r3, #28]
 800a4ba:	4b1d      	ldr	r3, [pc, #116]	; (800a530 <HAL_RCC_ClockConfig+0x358>)
 800a4bc:	6a1b      	ldr	r3, [r3, #32]
 800a4be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d208      	bcs.n	800a4d8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a4c6:	4b1a      	ldr	r3, [pc, #104]	; (800a530 <HAL_RCC_ClockConfig+0x358>)
 800a4c8:	6a1b      	ldr	r3, [r3, #32]
 800a4ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	69db      	ldr	r3, [r3, #28]
 800a4d2:	4917      	ldr	r1, [pc, #92]	; (800a530 <HAL_RCC_ClockConfig+0x358>)
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a4d8:	f000 f834 	bl	800a544 <HAL_RCC_GetSysClockFreq>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	4b14      	ldr	r3, [pc, #80]	; (800a530 <HAL_RCC_ClockConfig+0x358>)
 800a4e0:	699b      	ldr	r3, [r3, #24]
 800a4e2:	0a1b      	lsrs	r3, r3, #8
 800a4e4:	f003 030f 	and.w	r3, r3, #15
 800a4e8:	4912      	ldr	r1, [pc, #72]	; (800a534 <HAL_RCC_ClockConfig+0x35c>)
 800a4ea:	5ccb      	ldrb	r3, [r1, r3]
 800a4ec:	f003 031f 	and.w	r3, r3, #31
 800a4f0:	fa22 f303 	lsr.w	r3, r2, r3
 800a4f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a4f6:	4b0e      	ldr	r3, [pc, #56]	; (800a530 <HAL_RCC_ClockConfig+0x358>)
 800a4f8:	699b      	ldr	r3, [r3, #24]
 800a4fa:	f003 030f 	and.w	r3, r3, #15
 800a4fe:	4a0d      	ldr	r2, [pc, #52]	; (800a534 <HAL_RCC_ClockConfig+0x35c>)
 800a500:	5cd3      	ldrb	r3, [r2, r3]
 800a502:	f003 031f 	and.w	r3, r3, #31
 800a506:	693a      	ldr	r2, [r7, #16]
 800a508:	fa22 f303 	lsr.w	r3, r2, r3
 800a50c:	4a0a      	ldr	r2, [pc, #40]	; (800a538 <HAL_RCC_ClockConfig+0x360>)
 800a50e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a510:	4a0a      	ldr	r2, [pc, #40]	; (800a53c <HAL_RCC_ClockConfig+0x364>)
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a516:	4b0a      	ldr	r3, [pc, #40]	; (800a540 <HAL_RCC_ClockConfig+0x368>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7fc f916 	bl	800674c <HAL_InitTick>
 800a520:	4603      	mov	r3, r0
 800a522:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a524:	7bfb      	ldrb	r3, [r7, #15]
}
 800a526:	4618      	mov	r0, r3
 800a528:	3718      	adds	r7, #24
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	58024400 	.word	0x58024400
 800a534:	08011874 	.word	0x08011874
 800a538:	24000094 	.word	0x24000094
 800a53c:	24000090 	.word	0x24000090
 800a540:	24000098 	.word	0x24000098

0800a544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a544:	b480      	push	{r7}
 800a546:	b089      	sub	sp, #36	; 0x24
 800a548:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a54a:	4bb3      	ldr	r3, [pc, #716]	; (800a818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a54c:	691b      	ldr	r3, [r3, #16]
 800a54e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a552:	2b18      	cmp	r3, #24
 800a554:	f200 8155 	bhi.w	800a802 <HAL_RCC_GetSysClockFreq+0x2be>
 800a558:	a201      	add	r2, pc, #4	; (adr r2, 800a560 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a55a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a55e:	bf00      	nop
 800a560:	0800a5c5 	.word	0x0800a5c5
 800a564:	0800a803 	.word	0x0800a803
 800a568:	0800a803 	.word	0x0800a803
 800a56c:	0800a803 	.word	0x0800a803
 800a570:	0800a803 	.word	0x0800a803
 800a574:	0800a803 	.word	0x0800a803
 800a578:	0800a803 	.word	0x0800a803
 800a57c:	0800a803 	.word	0x0800a803
 800a580:	0800a5eb 	.word	0x0800a5eb
 800a584:	0800a803 	.word	0x0800a803
 800a588:	0800a803 	.word	0x0800a803
 800a58c:	0800a803 	.word	0x0800a803
 800a590:	0800a803 	.word	0x0800a803
 800a594:	0800a803 	.word	0x0800a803
 800a598:	0800a803 	.word	0x0800a803
 800a59c:	0800a803 	.word	0x0800a803
 800a5a0:	0800a5f1 	.word	0x0800a5f1
 800a5a4:	0800a803 	.word	0x0800a803
 800a5a8:	0800a803 	.word	0x0800a803
 800a5ac:	0800a803 	.word	0x0800a803
 800a5b0:	0800a803 	.word	0x0800a803
 800a5b4:	0800a803 	.word	0x0800a803
 800a5b8:	0800a803 	.word	0x0800a803
 800a5bc:	0800a803 	.word	0x0800a803
 800a5c0:	0800a5f7 	.word	0x0800a5f7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5c4:	4b94      	ldr	r3, [pc, #592]	; (800a818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f003 0320 	and.w	r3, r3, #32
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d009      	beq.n	800a5e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a5d0:	4b91      	ldr	r3, [pc, #580]	; (800a818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	08db      	lsrs	r3, r3, #3
 800a5d6:	f003 0303 	and.w	r3, r3, #3
 800a5da:	4a90      	ldr	r2, [pc, #576]	; (800a81c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a5dc:	fa22 f303 	lsr.w	r3, r2, r3
 800a5e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a5e2:	e111      	b.n	800a808 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a5e4:	4b8d      	ldr	r3, [pc, #564]	; (800a81c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a5e6:	61bb      	str	r3, [r7, #24]
    break;
 800a5e8:	e10e      	b.n	800a808 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a5ea:	4b8d      	ldr	r3, [pc, #564]	; (800a820 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a5ec:	61bb      	str	r3, [r7, #24]
    break;
 800a5ee:	e10b      	b.n	800a808 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a5f0:	4b8c      	ldr	r3, [pc, #560]	; (800a824 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a5f2:	61bb      	str	r3, [r7, #24]
    break;
 800a5f4:	e108      	b.n	800a808 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a5f6:	4b88      	ldr	r3, [pc, #544]	; (800a818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5fa:	f003 0303 	and.w	r3, r3, #3
 800a5fe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a600:	4b85      	ldr	r3, [pc, #532]	; (800a818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a604:	091b      	lsrs	r3, r3, #4
 800a606:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a60a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a60c:	4b82      	ldr	r3, [pc, #520]	; (800a818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a610:	f003 0301 	and.w	r3, r3, #1
 800a614:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a616:	4b80      	ldr	r3, [pc, #512]	; (800a818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a61a:	08db      	lsrs	r3, r3, #3
 800a61c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a620:	68fa      	ldr	r2, [r7, #12]
 800a622:	fb02 f303 	mul.w	r3, r2, r3
 800a626:	ee07 3a90 	vmov	s15, r3
 800a62a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a62e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	2b00      	cmp	r3, #0
 800a636:	f000 80e1 	beq.w	800a7fc <HAL_RCC_GetSysClockFreq+0x2b8>
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	2b02      	cmp	r3, #2
 800a63e:	f000 8083 	beq.w	800a748 <HAL_RCC_GetSysClockFreq+0x204>
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	2b02      	cmp	r3, #2
 800a646:	f200 80a1 	bhi.w	800a78c <HAL_RCC_GetSysClockFreq+0x248>
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d003      	beq.n	800a658 <HAL_RCC_GetSysClockFreq+0x114>
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	2b01      	cmp	r3, #1
 800a654:	d056      	beq.n	800a704 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a656:	e099      	b.n	800a78c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a658:	4b6f      	ldr	r3, [pc, #444]	; (800a818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f003 0320 	and.w	r3, r3, #32
 800a660:	2b00      	cmp	r3, #0
 800a662:	d02d      	beq.n	800a6c0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a664:	4b6c      	ldr	r3, [pc, #432]	; (800a818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	08db      	lsrs	r3, r3, #3
 800a66a:	f003 0303 	and.w	r3, r3, #3
 800a66e:	4a6b      	ldr	r2, [pc, #428]	; (800a81c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a670:	fa22 f303 	lsr.w	r3, r2, r3
 800a674:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	ee07 3a90 	vmov	s15, r3
 800a67c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	ee07 3a90 	vmov	s15, r3
 800a686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a68a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a68e:	4b62      	ldr	r3, [pc, #392]	; (800a818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a696:	ee07 3a90 	vmov	s15, r3
 800a69a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a69e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6a2:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a828 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a6a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a6be:	e087      	b.n	800a7d0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	ee07 3a90 	vmov	s15, r3
 800a6c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ca:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a82c <HAL_RCC_GetSysClockFreq+0x2e8>
 800a6ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6d2:	4b51      	ldr	r3, [pc, #324]	; (800a818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6da:	ee07 3a90 	vmov	s15, r3
 800a6de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6e2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6e6:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a828 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a6ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a702:	e065      	b.n	800a7d0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	ee07 3a90 	vmov	s15, r3
 800a70a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a70e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a830 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a716:	4b40      	ldr	r3, [pc, #256]	; (800a818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a71a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a71e:	ee07 3a90 	vmov	s15, r3
 800a722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a726:	ed97 6a02 	vldr	s12, [r7, #8]
 800a72a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a828 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a72e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a736:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a73a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a73e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a742:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a746:	e043      	b.n	800a7d0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	ee07 3a90 	vmov	s15, r3
 800a74e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a752:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a834 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a75a:	4b2f      	ldr	r3, [pc, #188]	; (800a818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a75c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a75e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a762:	ee07 3a90 	vmov	s15, r3
 800a766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a76a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a76e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a828 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a77a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a77e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a782:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a786:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a78a:	e021      	b.n	800a7d0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	ee07 3a90 	vmov	s15, r3
 800a792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a796:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a830 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a79a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a79e:	4b1e      	ldr	r3, [pc, #120]	; (800a818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7a6:	ee07 3a90 	vmov	s15, r3
 800a7aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7ae:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7b2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a828 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a7b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a7ce:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a7d0:	4b11      	ldr	r3, [pc, #68]	; (800a818 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7d4:	0a5b      	lsrs	r3, r3, #9
 800a7d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7da:	3301      	adds	r3, #1
 800a7dc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	ee07 3a90 	vmov	s15, r3
 800a7e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a7e8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a7ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a7f4:	ee17 3a90 	vmov	r3, s15
 800a7f8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a7fa:	e005      	b.n	800a808 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	61bb      	str	r3, [r7, #24]
    break;
 800a800:	e002      	b.n	800a808 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800a802:	4b07      	ldr	r3, [pc, #28]	; (800a820 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a804:	61bb      	str	r3, [r7, #24]
    break;
 800a806:	bf00      	nop
  }

  return sysclockfreq;
 800a808:	69bb      	ldr	r3, [r7, #24]
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3724      	adds	r7, #36	; 0x24
 800a80e:	46bd      	mov	sp, r7
 800a810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a814:	4770      	bx	lr
 800a816:	bf00      	nop
 800a818:	58024400 	.word	0x58024400
 800a81c:	03d09000 	.word	0x03d09000
 800a820:	003d0900 	.word	0x003d0900
 800a824:	007a1200 	.word	0x007a1200
 800a828:	46000000 	.word	0x46000000
 800a82c:	4c742400 	.word	0x4c742400
 800a830:	4a742400 	.word	0x4a742400
 800a834:	4af42400 	.word	0x4af42400

0800a838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a83e:	f7ff fe81 	bl	800a544 <HAL_RCC_GetSysClockFreq>
 800a842:	4602      	mov	r2, r0
 800a844:	4b10      	ldr	r3, [pc, #64]	; (800a888 <HAL_RCC_GetHCLKFreq+0x50>)
 800a846:	699b      	ldr	r3, [r3, #24]
 800a848:	0a1b      	lsrs	r3, r3, #8
 800a84a:	f003 030f 	and.w	r3, r3, #15
 800a84e:	490f      	ldr	r1, [pc, #60]	; (800a88c <HAL_RCC_GetHCLKFreq+0x54>)
 800a850:	5ccb      	ldrb	r3, [r1, r3]
 800a852:	f003 031f 	and.w	r3, r3, #31
 800a856:	fa22 f303 	lsr.w	r3, r2, r3
 800a85a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a85c:	4b0a      	ldr	r3, [pc, #40]	; (800a888 <HAL_RCC_GetHCLKFreq+0x50>)
 800a85e:	699b      	ldr	r3, [r3, #24]
 800a860:	f003 030f 	and.w	r3, r3, #15
 800a864:	4a09      	ldr	r2, [pc, #36]	; (800a88c <HAL_RCC_GetHCLKFreq+0x54>)
 800a866:	5cd3      	ldrb	r3, [r2, r3]
 800a868:	f003 031f 	and.w	r3, r3, #31
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	fa22 f303 	lsr.w	r3, r2, r3
 800a872:	4a07      	ldr	r2, [pc, #28]	; (800a890 <HAL_RCC_GetHCLKFreq+0x58>)
 800a874:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a876:	4a07      	ldr	r2, [pc, #28]	; (800a894 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a87c:	4b04      	ldr	r3, [pc, #16]	; (800a890 <HAL_RCC_GetHCLKFreq+0x58>)
 800a87e:	681b      	ldr	r3, [r3, #0]
}
 800a880:	4618      	mov	r0, r3
 800a882:	3708      	adds	r7, #8
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}
 800a888:	58024400 	.word	0x58024400
 800a88c:	08011874 	.word	0x08011874
 800a890:	24000094 	.word	0x24000094
 800a894:	24000090 	.word	0x24000090

0800a898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a89c:	f7ff ffcc 	bl	800a838 <HAL_RCC_GetHCLKFreq>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	4b06      	ldr	r3, [pc, #24]	; (800a8bc <HAL_RCC_GetPCLK1Freq+0x24>)
 800a8a4:	69db      	ldr	r3, [r3, #28]
 800a8a6:	091b      	lsrs	r3, r3, #4
 800a8a8:	f003 0307 	and.w	r3, r3, #7
 800a8ac:	4904      	ldr	r1, [pc, #16]	; (800a8c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a8ae:	5ccb      	ldrb	r3, [r1, r3]
 800a8b0:	f003 031f 	and.w	r3, r3, #31
 800a8b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	bd80      	pop	{r7, pc}
 800a8bc:	58024400 	.word	0x58024400
 800a8c0:	08011874 	.word	0x08011874

0800a8c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a8c8:	f7ff ffb6 	bl	800a838 <HAL_RCC_GetHCLKFreq>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	4b06      	ldr	r3, [pc, #24]	; (800a8e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a8d0:	69db      	ldr	r3, [r3, #28]
 800a8d2:	0a1b      	lsrs	r3, r3, #8
 800a8d4:	f003 0307 	and.w	r3, r3, #7
 800a8d8:	4904      	ldr	r1, [pc, #16]	; (800a8ec <HAL_RCC_GetPCLK2Freq+0x28>)
 800a8da:	5ccb      	ldrb	r3, [r1, r3]
 800a8dc:	f003 031f 	and.w	r3, r3, #31
 800a8e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	bd80      	pop	{r7, pc}
 800a8e8:	58024400 	.word	0x58024400
 800a8ec:	08011874 	.word	0x08011874

0800a8f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b086      	sub	sp, #24
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d03f      	beq.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a910:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a914:	d02a      	beq.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a916:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a91a:	d824      	bhi.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a91c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a920:	d018      	beq.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a922:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a926:	d81e      	bhi.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d003      	beq.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a92c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a930:	d007      	beq.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a932:	e018      	b.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a934:	4bab      	ldr	r3, [pc, #684]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a938:	4aaa      	ldr	r2, [pc, #680]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a93a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a93e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a940:	e015      	b.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	3304      	adds	r3, #4
 800a946:	2102      	movs	r1, #2
 800a948:	4618      	mov	r0, r3
 800a94a:	f001 f989 	bl	800bc60 <RCCEx_PLL2_Config>
 800a94e:	4603      	mov	r3, r0
 800a950:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a952:	e00c      	b.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	3324      	adds	r3, #36	; 0x24
 800a958:	2102      	movs	r1, #2
 800a95a:	4618      	mov	r0, r3
 800a95c:	f001 fa32 	bl	800bdc4 <RCCEx_PLL3_Config>
 800a960:	4603      	mov	r3, r0
 800a962:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a964:	e003      	b.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a966:	2301      	movs	r3, #1
 800a968:	75fb      	strb	r3, [r7, #23]
      break;
 800a96a:	e000      	b.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a96c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a96e:	7dfb      	ldrb	r3, [r7, #23]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d109      	bne.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a974:	4b9b      	ldr	r3, [pc, #620]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a978:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a980:	4998      	ldr	r1, [pc, #608]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a982:	4313      	orrs	r3, r2
 800a984:	650b      	str	r3, [r1, #80]	; 0x50
 800a986:	e001      	b.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a988:	7dfb      	ldrb	r3, [r7, #23]
 800a98a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a994:	2b00      	cmp	r3, #0
 800a996:	d03d      	beq.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a99c:	2b04      	cmp	r3, #4
 800a99e:	d826      	bhi.n	800a9ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a9a0:	a201      	add	r2, pc, #4	; (adr r2, 800a9a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800a9a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9a6:	bf00      	nop
 800a9a8:	0800a9bd 	.word	0x0800a9bd
 800a9ac:	0800a9cb 	.word	0x0800a9cb
 800a9b0:	0800a9dd 	.word	0x0800a9dd
 800a9b4:	0800a9f5 	.word	0x0800a9f5
 800a9b8:	0800a9f5 	.word	0x0800a9f5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9bc:	4b89      	ldr	r3, [pc, #548]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c0:	4a88      	ldr	r2, [pc, #544]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a9c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a9c8:	e015      	b.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	3304      	adds	r3, #4
 800a9ce:	2100      	movs	r1, #0
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f001 f945 	bl	800bc60 <RCCEx_PLL2_Config>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a9da:	e00c      	b.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	3324      	adds	r3, #36	; 0x24
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f001 f9ee 	bl	800bdc4 <RCCEx_PLL3_Config>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a9ec:	e003      	b.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	75fb      	strb	r3, [r7, #23]
      break;
 800a9f2:	e000      	b.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800a9f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a9f6:	7dfb      	ldrb	r3, [r7, #23]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d109      	bne.n	800aa10 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a9fc:	4b79      	ldr	r3, [pc, #484]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a9fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa00:	f023 0207 	bic.w	r2, r3, #7
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa08:	4976      	ldr	r1, [pc, #472]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	650b      	str	r3, [r1, #80]	; 0x50
 800aa0e:	e001      	b.n	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa10:	7dfb      	ldrb	r3, [r7, #23]
 800aa12:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d051      	beq.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aa26:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800aa2a:	d036      	beq.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800aa2c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800aa30:	d830      	bhi.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800aa32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa36:	d032      	beq.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800aa38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa3c:	d82a      	bhi.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800aa3e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aa42:	d02e      	beq.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800aa44:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aa48:	d824      	bhi.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800aa4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa4e:	d018      	beq.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800aa50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa54:	d81e      	bhi.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d003      	beq.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800aa5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa5e:	d007      	beq.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800aa60:	e018      	b.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa62:	4b60      	ldr	r3, [pc, #384]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa66:	4a5f      	ldr	r2, [pc, #380]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aa68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aa6e:	e019      	b.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	3304      	adds	r3, #4
 800aa74:	2100      	movs	r1, #0
 800aa76:	4618      	mov	r0, r3
 800aa78:	f001 f8f2 	bl	800bc60 <RCCEx_PLL2_Config>
 800aa7c:	4603      	mov	r3, r0
 800aa7e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800aa80:	e010      	b.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	3324      	adds	r3, #36	; 0x24
 800aa86:	2100      	movs	r1, #0
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f001 f99b 	bl	800bdc4 <RCCEx_PLL3_Config>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800aa92:	e007      	b.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800aa94:	2301      	movs	r3, #1
 800aa96:	75fb      	strb	r3, [r7, #23]
      break;
 800aa98:	e004      	b.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800aa9a:	bf00      	nop
 800aa9c:	e002      	b.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800aa9e:	bf00      	nop
 800aaa0:	e000      	b.n	800aaa4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800aaa2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aaa4:	7dfb      	ldrb	r3, [r7, #23]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d10a      	bne.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800aaaa:	4b4e      	ldr	r3, [pc, #312]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aaac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaae:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aab8:	494a      	ldr	r1, [pc, #296]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aaba:	4313      	orrs	r3, r2
 800aabc:	658b      	str	r3, [r1, #88]	; 0x58
 800aabe:	e001      	b.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aac0:	7dfb      	ldrb	r3, [r7, #23]
 800aac2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d051      	beq.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aad6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800aada:	d036      	beq.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800aadc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800aae0:	d830      	bhi.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800aae2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aae6:	d032      	beq.n	800ab4e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800aae8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aaec:	d82a      	bhi.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800aaee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aaf2:	d02e      	beq.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0x262>
 800aaf4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aaf8:	d824      	bhi.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800aafa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aafe:	d018      	beq.n	800ab32 <HAL_RCCEx_PeriphCLKConfig+0x242>
 800ab00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab04:	d81e      	bhi.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d003      	beq.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800ab0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ab0e:	d007      	beq.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800ab10:	e018      	b.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab12:	4b34      	ldr	r3, [pc, #208]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab16:	4a33      	ldr	r2, [pc, #204]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ab1e:	e019      	b.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	3304      	adds	r3, #4
 800ab24:	2100      	movs	r1, #0
 800ab26:	4618      	mov	r0, r3
 800ab28:	f001 f89a 	bl	800bc60 <RCCEx_PLL2_Config>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800ab30:	e010      	b.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	3324      	adds	r3, #36	; 0x24
 800ab36:	2100      	movs	r1, #0
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f001 f943 	bl	800bdc4 <RCCEx_PLL3_Config>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ab42:	e007      	b.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800ab44:	2301      	movs	r3, #1
 800ab46:	75fb      	strb	r3, [r7, #23]
      break;
 800ab48:	e004      	b.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800ab4a:	bf00      	nop
 800ab4c:	e002      	b.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800ab4e:	bf00      	nop
 800ab50:	e000      	b.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800ab52:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab54:	7dfb      	ldrb	r3, [r7, #23]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d10a      	bne.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ab5a:	4b22      	ldr	r3, [pc, #136]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab5e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ab68:	491e      	ldr	r1, [pc, #120]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	658b      	str	r3, [r1, #88]	; 0x58
 800ab6e:	e001      	b.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab70:	7dfb      	ldrb	r3, [r7, #23]
 800ab72:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d035      	beq.n	800abec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab84:	2b30      	cmp	r3, #48	; 0x30
 800ab86:	d01c      	beq.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ab88:	2b30      	cmp	r3, #48	; 0x30
 800ab8a:	d817      	bhi.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800ab8c:	2b20      	cmp	r3, #32
 800ab8e:	d00c      	beq.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800ab90:	2b20      	cmp	r3, #32
 800ab92:	d813      	bhi.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d016      	beq.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 800ab98:	2b10      	cmp	r3, #16
 800ab9a:	d10f      	bne.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab9c:	4b11      	ldr	r3, [pc, #68]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ab9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba0:	4a10      	ldr	r2, [pc, #64]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800aba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aba6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800aba8:	e00e      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	3304      	adds	r3, #4
 800abae:	2102      	movs	r1, #2
 800abb0:	4618      	mov	r0, r3
 800abb2:	f001 f855 	bl	800bc60 <RCCEx_PLL2_Config>
 800abb6:	4603      	mov	r3, r0
 800abb8:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800abba:	e005      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800abbc:	2301      	movs	r3, #1
 800abbe:	75fb      	strb	r3, [r7, #23]
      break;
 800abc0:	e002      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800abc2:	bf00      	nop
 800abc4:	e000      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800abc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800abc8:	7dfb      	ldrb	r3, [r7, #23]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d10c      	bne.n	800abe8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800abce:	4b05      	ldr	r3, [pc, #20]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800abd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abd2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abda:	4902      	ldr	r1, [pc, #8]	; (800abe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800abdc:	4313      	orrs	r3, r2
 800abde:	64cb      	str	r3, [r1, #76]	; 0x4c
 800abe0:	e004      	b.n	800abec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800abe2:	bf00      	nop
 800abe4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abe8:	7dfb      	ldrb	r3, [r7, #23]
 800abea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d047      	beq.n	800ac88 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac00:	d030      	beq.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800ac02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac06:	d82a      	bhi.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800ac08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac0c:	d02c      	beq.n	800ac68 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800ac0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac12:	d824      	bhi.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800ac14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac18:	d018      	beq.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800ac1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac1e:	d81e      	bhi.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d003      	beq.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800ac24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac28:	d007      	beq.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ac2a:	e018      	b.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac2c:	4bac      	ldr	r3, [pc, #688]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800ac2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac30:	4aab      	ldr	r2, [pc, #684]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800ac32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ac38:	e017      	b.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	3304      	adds	r3, #4
 800ac3e:	2100      	movs	r1, #0
 800ac40:	4618      	mov	r0, r3
 800ac42:	f001 f80d 	bl	800bc60 <RCCEx_PLL2_Config>
 800ac46:	4603      	mov	r3, r0
 800ac48:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ac4a:	e00e      	b.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	3324      	adds	r3, #36	; 0x24
 800ac50:	2100      	movs	r1, #0
 800ac52:	4618      	mov	r0, r3
 800ac54:	f001 f8b6 	bl	800bdc4 <RCCEx_PLL3_Config>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ac5c:	e005      	b.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac5e:	2301      	movs	r3, #1
 800ac60:	75fb      	strb	r3, [r7, #23]
      break;
 800ac62:	e002      	b.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800ac64:	bf00      	nop
 800ac66:	e000      	b.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800ac68:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac6a:	7dfb      	ldrb	r3, [r7, #23]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d109      	bne.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ac70:	4b9b      	ldr	r3, [pc, #620]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800ac72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac74:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac7c:	4998      	ldr	r1, [pc, #608]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	650b      	str	r3, [r1, #80]	; 0x50
 800ac82:	e001      	b.n	800ac88 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac84:	7dfb      	ldrb	r3, [r7, #23]
 800ac86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d049      	beq.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ac9c:	d02e      	beq.n	800acfc <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800ac9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aca2:	d828      	bhi.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800aca4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aca8:	d02a      	beq.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800acaa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800acae:	d822      	bhi.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800acb0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800acb4:	d026      	beq.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800acb6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800acba:	d81c      	bhi.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800acbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acc0:	d010      	beq.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800acc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acc6:	d816      	bhi.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d01d      	beq.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800accc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acd0:	d111      	bne.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	3304      	adds	r3, #4
 800acd6:	2101      	movs	r1, #1
 800acd8:	4618      	mov	r0, r3
 800acda:	f000 ffc1 	bl	800bc60 <RCCEx_PLL2_Config>
 800acde:	4603      	mov	r3, r0
 800ace0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ace2:	e012      	b.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	3324      	adds	r3, #36	; 0x24
 800ace8:	2101      	movs	r1, #1
 800acea:	4618      	mov	r0, r3
 800acec:	f001 f86a 	bl	800bdc4 <RCCEx_PLL3_Config>
 800acf0:	4603      	mov	r3, r0
 800acf2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800acf4:	e009      	b.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800acf6:	2301      	movs	r3, #1
 800acf8:	75fb      	strb	r3, [r7, #23]
      break;
 800acfa:	e006      	b.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800acfc:	bf00      	nop
 800acfe:	e004      	b.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800ad00:	bf00      	nop
 800ad02:	e002      	b.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800ad04:	bf00      	nop
 800ad06:	e000      	b.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800ad08:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad0a:	7dfb      	ldrb	r3, [r7, #23]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d109      	bne.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ad10:	4b73      	ldr	r3, [pc, #460]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800ad12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad14:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad1c:	4970      	ldr	r1, [pc, #448]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	650b      	str	r3, [r1, #80]	; 0x50
 800ad22:	e001      	b.n	800ad28 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad24:	7dfb      	ldrb	r3, [r7, #23]
 800ad26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d04b      	beq.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ad3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad3e:	d02e      	beq.n	800ad9e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800ad40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad44:	d828      	bhi.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800ad46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad4a:	d02a      	beq.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800ad4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad50:	d822      	bhi.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800ad52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad56:	d026      	beq.n	800ada6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800ad58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad5c:	d81c      	bhi.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800ad5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad62:	d010      	beq.n	800ad86 <HAL_RCCEx_PeriphCLKConfig+0x496>
 800ad64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad68:	d816      	bhi.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d01d      	beq.n	800adaa <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800ad6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad72:	d111      	bne.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	3304      	adds	r3, #4
 800ad78:	2101      	movs	r1, #1
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f000 ff70 	bl	800bc60 <RCCEx_PLL2_Config>
 800ad80:	4603      	mov	r3, r0
 800ad82:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ad84:	e012      	b.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	3324      	adds	r3, #36	; 0x24
 800ad8a:	2101      	movs	r1, #1
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f001 f819 	bl	800bdc4 <RCCEx_PLL3_Config>
 800ad92:	4603      	mov	r3, r0
 800ad94:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ad96:	e009      	b.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	75fb      	strb	r3, [r7, #23]
      break;
 800ad9c:	e006      	b.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800ad9e:	bf00      	nop
 800ada0:	e004      	b.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800ada2:	bf00      	nop
 800ada4:	e002      	b.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800ada6:	bf00      	nop
 800ada8:	e000      	b.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800adaa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800adac:	7dfb      	ldrb	r3, [r7, #23]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d10a      	bne.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800adb2:	4b4b      	ldr	r3, [pc, #300]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800adb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adb6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800adc0:	4947      	ldr	r1, [pc, #284]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800adc2:	4313      	orrs	r3, r2
 800adc4:	658b      	str	r3, [r1, #88]	; 0x58
 800adc6:	e001      	b.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adc8:	7dfb      	ldrb	r3, [r7, #23]
 800adca:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800add4:	2b00      	cmp	r3, #0
 800add6:	d02f      	beq.n	800ae38 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800addc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ade0:	d00e      	beq.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800ade2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ade6:	d814      	bhi.n	800ae12 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d015      	beq.n	800ae18 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800adec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800adf0:	d10f      	bne.n	800ae12 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adf2:	4b3b      	ldr	r3, [pc, #236]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800adf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adf6:	4a3a      	ldr	r2, [pc, #232]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800adf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800adfc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800adfe:	e00c      	b.n	800ae1a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	3304      	adds	r3, #4
 800ae04:	2101      	movs	r1, #1
 800ae06:	4618      	mov	r0, r3
 800ae08:	f000 ff2a 	bl	800bc60 <RCCEx_PLL2_Config>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800ae10:	e003      	b.n	800ae1a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae12:	2301      	movs	r3, #1
 800ae14:	75fb      	strb	r3, [r7, #23]
      break;
 800ae16:	e000      	b.n	800ae1a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800ae18:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae1a:	7dfb      	ldrb	r3, [r7, #23]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d109      	bne.n	800ae34 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ae20:	4b2f      	ldr	r3, [pc, #188]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800ae22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae24:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae2c:	492c      	ldr	r1, [pc, #176]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	650b      	str	r3, [r1, #80]	; 0x50
 800ae32:	e001      	b.n	800ae38 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae34:	7dfb      	ldrb	r3, [r7, #23]
 800ae36:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d032      	beq.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae48:	2b03      	cmp	r3, #3
 800ae4a:	d81b      	bhi.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800ae4c:	a201      	add	r2, pc, #4	; (adr r2, 800ae54 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800ae4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae52:	bf00      	nop
 800ae54:	0800ae8b 	.word	0x0800ae8b
 800ae58:	0800ae65 	.word	0x0800ae65
 800ae5c:	0800ae73 	.word	0x0800ae73
 800ae60:	0800ae8b 	.word	0x0800ae8b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae64:	4b1e      	ldr	r3, [pc, #120]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800ae66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae68:	4a1d      	ldr	r2, [pc, #116]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800ae6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ae70:	e00c      	b.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	3304      	adds	r3, #4
 800ae76:	2102      	movs	r1, #2
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f000 fef1 	bl	800bc60 <RCCEx_PLL2_Config>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ae82:	e003      	b.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800ae84:	2301      	movs	r3, #1
 800ae86:	75fb      	strb	r3, [r7, #23]
      break;
 800ae88:	e000      	b.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800ae8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae8c:	7dfb      	ldrb	r3, [r7, #23]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d109      	bne.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ae92:	4b13      	ldr	r3, [pc, #76]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800ae94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae96:	f023 0203 	bic.w	r2, r3, #3
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae9e:	4910      	ldr	r1, [pc, #64]	; (800aee0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800aea0:	4313      	orrs	r3, r2
 800aea2:	64cb      	str	r3, [r1, #76]	; 0x4c
 800aea4:	e001      	b.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aea6:	7dfb      	ldrb	r3, [r7, #23]
 800aea8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	f000 808a 	beq.w	800afcc <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aeb8:	4b0a      	ldr	r3, [pc, #40]	; (800aee4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	4a09      	ldr	r2, [pc, #36]	; (800aee4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800aebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aec2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aec4:	f7fb fc8c 	bl	80067e0 <HAL_GetTick>
 800aec8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aeca:	e00d      	b.n	800aee8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aecc:	f7fb fc88 	bl	80067e0 <HAL_GetTick>
 800aed0:	4602      	mov	r2, r0
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	1ad3      	subs	r3, r2, r3
 800aed6:	2b64      	cmp	r3, #100	; 0x64
 800aed8:	d906      	bls.n	800aee8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800aeda:	2303      	movs	r3, #3
 800aedc:	75fb      	strb	r3, [r7, #23]
        break;
 800aede:	e009      	b.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800aee0:	58024400 	.word	0x58024400
 800aee4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aee8:	4bb9      	ldr	r3, [pc, #740]	; (800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d0eb      	beq.n	800aecc <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800aef4:	7dfb      	ldrb	r3, [r7, #23]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d166      	bne.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800aefa:	4bb6      	ldr	r3, [pc, #728]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800aefc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800af04:	4053      	eors	r3, r2
 800af06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d013      	beq.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800af0e:	4bb1      	ldr	r3, [pc, #708]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800af10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af16:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800af18:	4bae      	ldr	r3, [pc, #696]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800af1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af1c:	4aad      	ldr	r2, [pc, #692]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800af1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af22:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800af24:	4bab      	ldr	r3, [pc, #684]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800af26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af28:	4aaa      	ldr	r2, [pc, #680]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800af2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af2e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800af30:	4aa8      	ldr	r2, [pc, #672]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800af3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af40:	d115      	bne.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af42:	f7fb fc4d 	bl	80067e0 <HAL_GetTick>
 800af46:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af48:	e00b      	b.n	800af62 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af4a:	f7fb fc49 	bl	80067e0 <HAL_GetTick>
 800af4e:	4602      	mov	r2, r0
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	1ad3      	subs	r3, r2, r3
 800af54:	f241 3288 	movw	r2, #5000	; 0x1388
 800af58:	4293      	cmp	r3, r2
 800af5a:	d902      	bls.n	800af62 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 800af5c:	2303      	movs	r3, #3
 800af5e:	75fb      	strb	r3, [r7, #23]
            break;
 800af60:	e005      	b.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af62:	4b9c      	ldr	r3, [pc, #624]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800af64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af66:	f003 0302 	and.w	r3, r3, #2
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d0ed      	beq.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800af6e:	7dfb      	ldrb	r3, [r7, #23]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d126      	bne.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800af7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af82:	d10d      	bne.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800af84:	4b93      	ldr	r3, [pc, #588]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800af86:	691b      	ldr	r3, [r3, #16]
 800af88:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800af92:	0919      	lsrs	r1, r3, #4
 800af94:	4b90      	ldr	r3, [pc, #576]	; (800b1d8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800af96:	400b      	ands	r3, r1
 800af98:	498e      	ldr	r1, [pc, #568]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800af9a:	4313      	orrs	r3, r2
 800af9c:	610b      	str	r3, [r1, #16]
 800af9e:	e005      	b.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800afa0:	4b8c      	ldr	r3, [pc, #560]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800afa2:	691b      	ldr	r3, [r3, #16]
 800afa4:	4a8b      	ldr	r2, [pc, #556]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800afa6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800afaa:	6113      	str	r3, [r2, #16]
 800afac:	4b89      	ldr	r3, [pc, #548]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800afae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800afb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800afba:	4986      	ldr	r1, [pc, #536]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800afbc:	4313      	orrs	r3, r2
 800afbe:	670b      	str	r3, [r1, #112]	; 0x70
 800afc0:	e004      	b.n	800afcc <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800afc2:	7dfb      	ldrb	r3, [r7, #23]
 800afc4:	75bb      	strb	r3, [r7, #22]
 800afc6:	e001      	b.n	800afcc <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afc8:	7dfb      	ldrb	r3, [r7, #23]
 800afca:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f003 0301 	and.w	r3, r3, #1
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d07e      	beq.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800afdc:	2b28      	cmp	r3, #40	; 0x28
 800afde:	d867      	bhi.n	800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800afe0:	a201      	add	r2, pc, #4	; (adr r2, 800afe8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800afe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe6:	bf00      	nop
 800afe8:	0800b0b7 	.word	0x0800b0b7
 800afec:	0800b0b1 	.word	0x0800b0b1
 800aff0:	0800b0b1 	.word	0x0800b0b1
 800aff4:	0800b0b1 	.word	0x0800b0b1
 800aff8:	0800b0b1 	.word	0x0800b0b1
 800affc:	0800b0b1 	.word	0x0800b0b1
 800b000:	0800b0b1 	.word	0x0800b0b1
 800b004:	0800b0b1 	.word	0x0800b0b1
 800b008:	0800b08d 	.word	0x0800b08d
 800b00c:	0800b0b1 	.word	0x0800b0b1
 800b010:	0800b0b1 	.word	0x0800b0b1
 800b014:	0800b0b1 	.word	0x0800b0b1
 800b018:	0800b0b1 	.word	0x0800b0b1
 800b01c:	0800b0b1 	.word	0x0800b0b1
 800b020:	0800b0b1 	.word	0x0800b0b1
 800b024:	0800b0b1 	.word	0x0800b0b1
 800b028:	0800b09f 	.word	0x0800b09f
 800b02c:	0800b0b1 	.word	0x0800b0b1
 800b030:	0800b0b1 	.word	0x0800b0b1
 800b034:	0800b0b1 	.word	0x0800b0b1
 800b038:	0800b0b1 	.word	0x0800b0b1
 800b03c:	0800b0b1 	.word	0x0800b0b1
 800b040:	0800b0b1 	.word	0x0800b0b1
 800b044:	0800b0b1 	.word	0x0800b0b1
 800b048:	0800b0b7 	.word	0x0800b0b7
 800b04c:	0800b0b1 	.word	0x0800b0b1
 800b050:	0800b0b1 	.word	0x0800b0b1
 800b054:	0800b0b1 	.word	0x0800b0b1
 800b058:	0800b0b1 	.word	0x0800b0b1
 800b05c:	0800b0b1 	.word	0x0800b0b1
 800b060:	0800b0b1 	.word	0x0800b0b1
 800b064:	0800b0b1 	.word	0x0800b0b1
 800b068:	0800b0b7 	.word	0x0800b0b7
 800b06c:	0800b0b1 	.word	0x0800b0b1
 800b070:	0800b0b1 	.word	0x0800b0b1
 800b074:	0800b0b1 	.word	0x0800b0b1
 800b078:	0800b0b1 	.word	0x0800b0b1
 800b07c:	0800b0b1 	.word	0x0800b0b1
 800b080:	0800b0b1 	.word	0x0800b0b1
 800b084:	0800b0b1 	.word	0x0800b0b1
 800b088:	0800b0b7 	.word	0x0800b0b7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	3304      	adds	r3, #4
 800b090:	2101      	movs	r1, #1
 800b092:	4618      	mov	r0, r3
 800b094:	f000 fde4 	bl	800bc60 <RCCEx_PLL2_Config>
 800b098:	4603      	mov	r3, r0
 800b09a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b09c:	e00c      	b.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	3324      	adds	r3, #36	; 0x24
 800b0a2:	2101      	movs	r1, #1
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f000 fe8d 	bl	800bdc4 <RCCEx_PLL3_Config>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b0ae:	e003      	b.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	75fb      	strb	r3, [r7, #23]
      break;
 800b0b4:	e000      	b.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800b0b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b0b8:	7dfb      	ldrb	r3, [r7, #23]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d109      	bne.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b0be:	4b45      	ldr	r3, [pc, #276]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b0c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0c2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0ca:	4942      	ldr	r1, [pc, #264]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	654b      	str	r3, [r1, #84]	; 0x54
 800b0d0:	e001      	b.n	800b0d6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0d2:	7dfb      	ldrb	r3, [r7, #23]
 800b0d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f003 0302 	and.w	r3, r3, #2
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d037      	beq.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0e6:	2b05      	cmp	r3, #5
 800b0e8:	d820      	bhi.n	800b12c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800b0ea:	a201      	add	r2, pc, #4	; (adr r2, 800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800b0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f0:	0800b133 	.word	0x0800b133
 800b0f4:	0800b109 	.word	0x0800b109
 800b0f8:	0800b11b 	.word	0x0800b11b
 800b0fc:	0800b133 	.word	0x0800b133
 800b100:	0800b133 	.word	0x0800b133
 800b104:	0800b133 	.word	0x0800b133
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	3304      	adds	r3, #4
 800b10c:	2101      	movs	r1, #1
 800b10e:	4618      	mov	r0, r3
 800b110:	f000 fda6 	bl	800bc60 <RCCEx_PLL2_Config>
 800b114:	4603      	mov	r3, r0
 800b116:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b118:	e00c      	b.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	3324      	adds	r3, #36	; 0x24
 800b11e:	2101      	movs	r1, #1
 800b120:	4618      	mov	r0, r3
 800b122:	f000 fe4f 	bl	800bdc4 <RCCEx_PLL3_Config>
 800b126:	4603      	mov	r3, r0
 800b128:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b12a:	e003      	b.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b12c:	2301      	movs	r3, #1
 800b12e:	75fb      	strb	r3, [r7, #23]
      break;
 800b130:	e000      	b.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800b132:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b134:	7dfb      	ldrb	r3, [r7, #23]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d109      	bne.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b13a:	4b26      	ldr	r3, [pc, #152]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b13c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b13e:	f023 0207 	bic.w	r2, r3, #7
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b146:	4923      	ldr	r1, [pc, #140]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b148:	4313      	orrs	r3, r2
 800b14a:	654b      	str	r3, [r1, #84]	; 0x54
 800b14c:	e001      	b.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b14e:	7dfb      	ldrb	r3, [r7, #23]
 800b150:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f003 0304 	and.w	r3, r3, #4
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d040      	beq.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b164:	2b05      	cmp	r3, #5
 800b166:	d821      	bhi.n	800b1ac <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800b168:	a201      	add	r2, pc, #4	; (adr r2, 800b170 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800b16a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b16e:	bf00      	nop
 800b170:	0800b1b3 	.word	0x0800b1b3
 800b174:	0800b189 	.word	0x0800b189
 800b178:	0800b19b 	.word	0x0800b19b
 800b17c:	0800b1b3 	.word	0x0800b1b3
 800b180:	0800b1b3 	.word	0x0800b1b3
 800b184:	0800b1b3 	.word	0x0800b1b3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	3304      	adds	r3, #4
 800b18c:	2101      	movs	r1, #1
 800b18e:	4618      	mov	r0, r3
 800b190:	f000 fd66 	bl	800bc60 <RCCEx_PLL2_Config>
 800b194:	4603      	mov	r3, r0
 800b196:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b198:	e00c      	b.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	3324      	adds	r3, #36	; 0x24
 800b19e:	2101      	movs	r1, #1
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f000 fe0f 	bl	800bdc4 <RCCEx_PLL3_Config>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b1aa:	e003      	b.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	75fb      	strb	r3, [r7, #23]
      break;
 800b1b0:	e000      	b.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800b1b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b1b4:	7dfb      	ldrb	r3, [r7, #23]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d110      	bne.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b1ba:	4b06      	ldr	r3, [pc, #24]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b1bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1be:	f023 0207 	bic.w	r2, r3, #7
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1c8:	4902      	ldr	r1, [pc, #8]	; (800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	658b      	str	r3, [r1, #88]	; 0x58
 800b1ce:	e007      	b.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800b1d0:	58024800 	.word	0x58024800
 800b1d4:	58024400 	.word	0x58024400
 800b1d8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1dc:	7dfb      	ldrb	r3, [r7, #23]
 800b1de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f003 0320 	and.w	r3, r3, #32
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d04b      	beq.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b1f6:	d02e      	beq.n	800b256 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800b1f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b1fc:	d828      	bhi.n	800b250 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800b1fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b202:	d02a      	beq.n	800b25a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800b204:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b208:	d822      	bhi.n	800b250 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800b20a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b20e:	d026      	beq.n	800b25e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800b210:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b214:	d81c      	bhi.n	800b250 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800b216:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b21a:	d010      	beq.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800b21c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b220:	d816      	bhi.n	800b250 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800b222:	2b00      	cmp	r3, #0
 800b224:	d01d      	beq.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800b226:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b22a:	d111      	bne.n	800b250 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	3304      	adds	r3, #4
 800b230:	2100      	movs	r1, #0
 800b232:	4618      	mov	r0, r3
 800b234:	f000 fd14 	bl	800bc60 <RCCEx_PLL2_Config>
 800b238:	4603      	mov	r3, r0
 800b23a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b23c:	e012      	b.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	3324      	adds	r3, #36	; 0x24
 800b242:	2102      	movs	r1, #2
 800b244:	4618      	mov	r0, r3
 800b246:	f000 fdbd 	bl	800bdc4 <RCCEx_PLL3_Config>
 800b24a:	4603      	mov	r3, r0
 800b24c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b24e:	e009      	b.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b250:	2301      	movs	r3, #1
 800b252:	75fb      	strb	r3, [r7, #23]
      break;
 800b254:	e006      	b.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800b256:	bf00      	nop
 800b258:	e004      	b.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800b25a:	bf00      	nop
 800b25c:	e002      	b.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800b25e:	bf00      	nop
 800b260:	e000      	b.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800b262:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b264:	7dfb      	ldrb	r3, [r7, #23]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d10a      	bne.n	800b280 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b26a:	4bb2      	ldr	r3, [pc, #712]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b26c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b26e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b278:	49ae      	ldr	r1, [pc, #696]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b27a:	4313      	orrs	r3, r2
 800b27c:	654b      	str	r3, [r1, #84]	; 0x54
 800b27e:	e001      	b.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b280:	7dfb      	ldrb	r3, [r7, #23]
 800b282:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d04b      	beq.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b296:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b29a:	d02e      	beq.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800b29c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b2a0:	d828      	bhi.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800b2a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2a6:	d02a      	beq.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800b2a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2ac:	d822      	bhi.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800b2ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b2b2:	d026      	beq.n	800b302 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800b2b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b2b8:	d81c      	bhi.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800b2ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2be:	d010      	beq.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800b2c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2c4:	d816      	bhi.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d01d      	beq.n	800b306 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800b2ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2ce:	d111      	bne.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	3304      	adds	r3, #4
 800b2d4:	2100      	movs	r1, #0
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f000 fcc2 	bl	800bc60 <RCCEx_PLL2_Config>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b2e0:	e012      	b.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	3324      	adds	r3, #36	; 0x24
 800b2e6:	2102      	movs	r1, #2
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f000 fd6b 	bl	800bdc4 <RCCEx_PLL3_Config>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b2f2:	e009      	b.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	75fb      	strb	r3, [r7, #23]
      break;
 800b2f8:	e006      	b.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800b2fa:	bf00      	nop
 800b2fc:	e004      	b.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800b2fe:	bf00      	nop
 800b300:	e002      	b.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800b302:	bf00      	nop
 800b304:	e000      	b.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800b306:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b308:	7dfb      	ldrb	r3, [r7, #23]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d10a      	bne.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b30e:	4b89      	ldr	r3, [pc, #548]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b312:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b31c:	4985      	ldr	r1, [pc, #532]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b31e:	4313      	orrs	r3, r2
 800b320:	658b      	str	r3, [r1, #88]	; 0x58
 800b322:	e001      	b.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b324:	7dfb      	ldrb	r3, [r7, #23]
 800b326:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b330:	2b00      	cmp	r3, #0
 800b332:	d04b      	beq.n	800b3cc <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b33a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b33e:	d02e      	beq.n	800b39e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800b340:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b344:	d828      	bhi.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800b346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b34a:	d02a      	beq.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800b34c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b350:	d822      	bhi.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800b352:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b356:	d026      	beq.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800b358:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b35c:	d81c      	bhi.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800b35e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b362:	d010      	beq.n	800b386 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800b364:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b368:	d816      	bhi.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d01d      	beq.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800b36e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b372:	d111      	bne.n	800b398 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	3304      	adds	r3, #4
 800b378:	2100      	movs	r1, #0
 800b37a:	4618      	mov	r0, r3
 800b37c:	f000 fc70 	bl	800bc60 <RCCEx_PLL2_Config>
 800b380:	4603      	mov	r3, r0
 800b382:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b384:	e012      	b.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	3324      	adds	r3, #36	; 0x24
 800b38a:	2102      	movs	r1, #2
 800b38c:	4618      	mov	r0, r3
 800b38e:	f000 fd19 	bl	800bdc4 <RCCEx_PLL3_Config>
 800b392:	4603      	mov	r3, r0
 800b394:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b396:	e009      	b.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b398:	2301      	movs	r3, #1
 800b39a:	75fb      	strb	r3, [r7, #23]
      break;
 800b39c:	e006      	b.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800b39e:	bf00      	nop
 800b3a0:	e004      	b.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800b3a2:	bf00      	nop
 800b3a4:	e002      	b.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800b3a6:	bf00      	nop
 800b3a8:	e000      	b.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800b3aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b3ac:	7dfb      	ldrb	r3, [r7, #23]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d10a      	bne.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b3b2:	4b60      	ldr	r3, [pc, #384]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b3b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b3c0:	495c      	ldr	r1, [pc, #368]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	658b      	str	r3, [r1, #88]	; 0x58
 800b3c6:	e001      	b.n	800b3cc <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3c8:	7dfb      	ldrb	r3, [r7, #23]
 800b3ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f003 0308 	and.w	r3, r3, #8
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d018      	beq.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3e0:	d10a      	bne.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	3324      	adds	r3, #36	; 0x24
 800b3e6:	2102      	movs	r1, #2
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f000 fceb 	bl	800bdc4 <RCCEx_PLL3_Config>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d001      	beq.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b3f8:	4b4e      	ldr	r3, [pc, #312]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b3fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b404:	494b      	ldr	r1, [pc, #300]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b406:	4313      	orrs	r3, r2
 800b408:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f003 0310 	and.w	r3, r3, #16
 800b412:	2b00      	cmp	r3, #0
 800b414:	d01a      	beq.n	800b44c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b41c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b420:	d10a      	bne.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	3324      	adds	r3, #36	; 0x24
 800b426:	2102      	movs	r1, #2
 800b428:	4618      	mov	r0, r3
 800b42a:	f000 fccb 	bl	800bdc4 <RCCEx_PLL3_Config>
 800b42e:	4603      	mov	r3, r0
 800b430:	2b00      	cmp	r3, #0
 800b432:	d001      	beq.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800b434:	2301      	movs	r3, #1
 800b436:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b438:	4b3e      	ldr	r3, [pc, #248]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b43a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b43c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b446:	493b      	ldr	r1, [pc, #236]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b448:	4313      	orrs	r3, r2
 800b44a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b454:	2b00      	cmp	r3, #0
 800b456:	d034      	beq.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b45e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b462:	d01d      	beq.n	800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800b464:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b468:	d817      	bhi.n	800b49a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d003      	beq.n	800b476 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800b46e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b472:	d009      	beq.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b474:	e011      	b.n	800b49a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	3304      	adds	r3, #4
 800b47a:	2100      	movs	r1, #0
 800b47c:	4618      	mov	r0, r3
 800b47e:	f000 fbef 	bl	800bc60 <RCCEx_PLL2_Config>
 800b482:	4603      	mov	r3, r0
 800b484:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b486:	e00c      	b.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	3324      	adds	r3, #36	; 0x24
 800b48c:	2102      	movs	r1, #2
 800b48e:	4618      	mov	r0, r3
 800b490:	f000 fc98 	bl	800bdc4 <RCCEx_PLL3_Config>
 800b494:	4603      	mov	r3, r0
 800b496:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b498:	e003      	b.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b49a:	2301      	movs	r3, #1
 800b49c:	75fb      	strb	r3, [r7, #23]
      break;
 800b49e:	e000      	b.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800b4a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b4a2:	7dfb      	ldrb	r3, [r7, #23]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d10a      	bne.n	800b4be <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b4a8:	4b22      	ldr	r3, [pc, #136]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b4aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b4b6:	491f      	ldr	r1, [pc, #124]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	658b      	str	r3, [r1, #88]	; 0x58
 800b4bc:	e001      	b.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4be:	7dfb      	ldrb	r3, [r7, #23]
 800b4c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d036      	beq.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b4d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b4d8:	d01c      	beq.n	800b514 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800b4da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b4de:	d816      	bhi.n	800b50e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b4e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4e4:	d003      	beq.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800b4e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b4ea:	d007      	beq.n	800b4fc <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800b4ec:	e00f      	b.n	800b50e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4ee:	4b11      	ldr	r3, [pc, #68]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b4f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4f2:	4a10      	ldr	r2, [pc, #64]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b4f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b4fa:	e00c      	b.n	800b516 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	3324      	adds	r3, #36	; 0x24
 800b500:	2101      	movs	r1, #1
 800b502:	4618      	mov	r0, r3
 800b504:	f000 fc5e 	bl	800bdc4 <RCCEx_PLL3_Config>
 800b508:	4603      	mov	r3, r0
 800b50a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b50c:	e003      	b.n	800b516 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b50e:	2301      	movs	r3, #1
 800b510:	75fb      	strb	r3, [r7, #23]
      break;
 800b512:	e000      	b.n	800b516 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800b514:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b516:	7dfb      	ldrb	r3, [r7, #23]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d10d      	bne.n	800b538 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b51c:	4b05      	ldr	r3, [pc, #20]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b51e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b520:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b52a:	4902      	ldr	r1, [pc, #8]	; (800b534 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800b52c:	4313      	orrs	r3, r2
 800b52e:	654b      	str	r3, [r1, #84]	; 0x54
 800b530:	e004      	b.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800b532:	bf00      	nop
 800b534:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b538:	7dfb      	ldrb	r3, [r7, #23]
 800b53a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b544:	2b00      	cmp	r3, #0
 800b546:	d029      	beq.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d003      	beq.n	800b558 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800b550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b554:	d007      	beq.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800b556:	e00f      	b.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b558:	4b61      	ldr	r3, [pc, #388]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b55c:	4a60      	ldr	r2, [pc, #384]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b55e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b562:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b564:	e00b      	b.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	3304      	adds	r3, #4
 800b56a:	2102      	movs	r1, #2
 800b56c:	4618      	mov	r0, r3
 800b56e:	f000 fb77 	bl	800bc60 <RCCEx_PLL2_Config>
 800b572:	4603      	mov	r3, r0
 800b574:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b576:	e002      	b.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 800b578:	2301      	movs	r3, #1
 800b57a:	75fb      	strb	r3, [r7, #23]
      break;
 800b57c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b57e:	7dfb      	ldrb	r3, [r7, #23]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d109      	bne.n	800b598 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b584:	4b56      	ldr	r3, [pc, #344]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b588:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b590:	4953      	ldr	r1, [pc, #332]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b592:	4313      	orrs	r3, r2
 800b594:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b596:	e001      	b.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b598:	7dfb      	ldrb	r3, [r7, #23]
 800b59a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d00a      	beq.n	800b5be <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	3324      	adds	r3, #36	; 0x24
 800b5ac:	2102      	movs	r1, #2
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f000 fc08 	bl	800bdc4 <RCCEx_PLL3_Config>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d001      	beq.n	800b5be <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d030      	beq.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b5ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5d2:	d017      	beq.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b5d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5d8:	d811      	bhi.n	800b5fe <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800b5da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5de:	d013      	beq.n	800b608 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800b5e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5e4:	d80b      	bhi.n	800b5fe <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d010      	beq.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800b5ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5ee:	d106      	bne.n	800b5fe <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5f0:	4b3b      	ldr	r3, [pc, #236]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b5f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f4:	4a3a      	ldr	r2, [pc, #232]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b5f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b5fc:	e007      	b.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b5fe:	2301      	movs	r3, #1
 800b600:	75fb      	strb	r3, [r7, #23]
      break;
 800b602:	e004      	b.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800b604:	bf00      	nop
 800b606:	e002      	b.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800b608:	bf00      	nop
 800b60a:	e000      	b.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800b60c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b60e:	7dfb      	ldrb	r3, [r7, #23]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d109      	bne.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b614:	4b32      	ldr	r3, [pc, #200]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b618:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b620:	492f      	ldr	r1, [pc, #188]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b622:	4313      	orrs	r3, r2
 800b624:	654b      	str	r3, [r1, #84]	; 0x54
 800b626:	e001      	b.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b628:	7dfb      	ldrb	r3, [r7, #23]
 800b62a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b634:	2b00      	cmp	r3, #0
 800b636:	d008      	beq.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b638:	4b29      	ldr	r3, [pc, #164]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b63a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b63c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b644:	4926      	ldr	r1, [pc, #152]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b646:	4313      	orrs	r3, r2
 800b648:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b652:	2b00      	cmp	r3, #0
 800b654:	d008      	beq.n	800b668 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b656:	4b22      	ldr	r3, [pc, #136]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b65a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b662:	491f      	ldr	r1, [pc, #124]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b664:	4313      	orrs	r3, r2
 800b666:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b670:	2b00      	cmp	r3, #0
 800b672:	d00d      	beq.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b674:	4b1a      	ldr	r3, [pc, #104]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b676:	691b      	ldr	r3, [r3, #16]
 800b678:	4a19      	ldr	r2, [pc, #100]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b67a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b67e:	6113      	str	r3, [r2, #16]
 800b680:	4b17      	ldr	r3, [pc, #92]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b682:	691a      	ldr	r2, [r3, #16]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b68a:	4915      	ldr	r1, [pc, #84]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b68c:	4313      	orrs	r3, r2
 800b68e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	2b00      	cmp	r3, #0
 800b696:	da08      	bge.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b698:	4b11      	ldr	r3, [pc, #68]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b69a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b69c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6a4:	490e      	ldr	r1, [pc, #56]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b6a6:	4313      	orrs	r3, r2
 800b6a8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d009      	beq.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b6b6:	4b0a      	ldr	r3, [pc, #40]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b6b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6c4:	4906      	ldr	r1, [pc, #24]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800b6c6:	4313      	orrs	r3, r2
 800b6c8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800b6ca:	7dbb      	ldrb	r3, [r7, #22]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d101      	bne.n	800b6d4 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	e000      	b.n	800b6d6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800b6d4:	2301      	movs	r3, #1
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3718      	adds	r7, #24
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	58024400 	.word	0x58024400

0800b6e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b6e8:	f7ff f8a6 	bl	800a838 <HAL_RCC_GetHCLKFreq>
 800b6ec:	4602      	mov	r2, r0
 800b6ee:	4b06      	ldr	r3, [pc, #24]	; (800b708 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b6f0:	6a1b      	ldr	r3, [r3, #32]
 800b6f2:	091b      	lsrs	r3, r3, #4
 800b6f4:	f003 0307 	and.w	r3, r3, #7
 800b6f8:	4904      	ldr	r1, [pc, #16]	; (800b70c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b6fa:	5ccb      	ldrb	r3, [r1, r3]
 800b6fc:	f003 031f 	and.w	r3, r3, #31
 800b700:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b704:	4618      	mov	r0, r3
 800b706:	bd80      	pop	{r7, pc}
 800b708:	58024400 	.word	0x58024400
 800b70c:	08011874 	.word	0x08011874

0800b710 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b710:	b480      	push	{r7}
 800b712:	b089      	sub	sp, #36	; 0x24
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b718:	4ba1      	ldr	r3, [pc, #644]	; (800b9a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b71a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b71c:	f003 0303 	and.w	r3, r3, #3
 800b720:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b722:	4b9f      	ldr	r3, [pc, #636]	; (800b9a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b726:	0b1b      	lsrs	r3, r3, #12
 800b728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b72c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b72e:	4b9c      	ldr	r3, [pc, #624]	; (800b9a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b732:	091b      	lsrs	r3, r3, #4
 800b734:	f003 0301 	and.w	r3, r3, #1
 800b738:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b73a:	4b99      	ldr	r3, [pc, #612]	; (800b9a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b73c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b73e:	08db      	lsrs	r3, r3, #3
 800b740:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b744:	693a      	ldr	r2, [r7, #16]
 800b746:	fb02 f303 	mul.w	r3, r2, r3
 800b74a:	ee07 3a90 	vmov	s15, r3
 800b74e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b752:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	f000 8111 	beq.w	800b980 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b75e:	69bb      	ldr	r3, [r7, #24]
 800b760:	2b02      	cmp	r3, #2
 800b762:	f000 8083 	beq.w	800b86c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b766:	69bb      	ldr	r3, [r7, #24]
 800b768:	2b02      	cmp	r3, #2
 800b76a:	f200 80a1 	bhi.w	800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b76e:	69bb      	ldr	r3, [r7, #24]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d003      	beq.n	800b77c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b774:	69bb      	ldr	r3, [r7, #24]
 800b776:	2b01      	cmp	r3, #1
 800b778:	d056      	beq.n	800b828 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b77a:	e099      	b.n	800b8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b77c:	4b88      	ldr	r3, [pc, #544]	; (800b9a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f003 0320 	and.w	r3, r3, #32
 800b784:	2b00      	cmp	r3, #0
 800b786:	d02d      	beq.n	800b7e4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b788:	4b85      	ldr	r3, [pc, #532]	; (800b9a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	08db      	lsrs	r3, r3, #3
 800b78e:	f003 0303 	and.w	r3, r3, #3
 800b792:	4a84      	ldr	r2, [pc, #528]	; (800b9a4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b794:	fa22 f303 	lsr.w	r3, r2, r3
 800b798:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	ee07 3a90 	vmov	s15, r3
 800b7a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	ee07 3a90 	vmov	s15, r3
 800b7aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7b2:	4b7b      	ldr	r3, [pc, #492]	; (800b9a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7ba:	ee07 3a90 	vmov	s15, r3
 800b7be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b7ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7de:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b7e2:	e087      	b.n	800b8f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	ee07 3a90 	vmov	s15, r3
 800b7ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b9ac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b7f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7f6:	4b6a      	ldr	r3, [pc, #424]	; (800b9a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7fe:	ee07 3a90 	vmov	s15, r3
 800b802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b806:	ed97 6a03 	vldr	s12, [r7, #12]
 800b80a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b80e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b81a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b81e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b822:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b826:	e065      	b.n	800b8f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	ee07 3a90 	vmov	s15, r3
 800b82e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b832:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b83a:	4b59      	ldr	r3, [pc, #356]	; (800b9a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b83c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b83e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b842:	ee07 3a90 	vmov	s15, r3
 800b846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b84a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b84e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b85a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b85e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b862:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b866:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b86a:	e043      	b.n	800b8f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b86c:	697b      	ldr	r3, [r7, #20]
 800b86e:	ee07 3a90 	vmov	s15, r3
 800b872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b876:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b9b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b87a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b87e:	4b48      	ldr	r3, [pc, #288]	; (800b9a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b886:	ee07 3a90 	vmov	s15, r3
 800b88a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b88e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b892:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b89a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b89e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b8ae:	e021      	b.n	800b8f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	ee07 3a90 	vmov	s15, r3
 800b8b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b8be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8c2:	4b37      	ldr	r3, [pc, #220]	; (800b9a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8ca:	ee07 3a90 	vmov	s15, r3
 800b8ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b8da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b8f2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b8f4:	4b2a      	ldr	r3, [pc, #168]	; (800b9a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8f8:	0a5b      	lsrs	r3, r3, #9
 800b8fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8fe:	ee07 3a90 	vmov	s15, r3
 800b902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b906:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b90a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b90e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b912:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b916:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b91a:	ee17 2a90 	vmov	r2, s15
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b922:	4b1f      	ldr	r3, [pc, #124]	; (800b9a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b926:	0c1b      	lsrs	r3, r3, #16
 800b928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b92c:	ee07 3a90 	vmov	s15, r3
 800b930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b934:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b938:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b93c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b940:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b944:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b948:	ee17 2a90 	vmov	r2, s15
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b950:	4b13      	ldr	r3, [pc, #76]	; (800b9a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b954:	0e1b      	lsrs	r3, r3, #24
 800b956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b95a:	ee07 3a90 	vmov	s15, r3
 800b95e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b962:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b966:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b96a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b96e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b976:	ee17 2a90 	vmov	r2, s15
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b97e:	e008      	b.n	800b992 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2200      	movs	r2, #0
 800b984:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2200      	movs	r2, #0
 800b98a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2200      	movs	r2, #0
 800b990:	609a      	str	r2, [r3, #8]
}
 800b992:	bf00      	nop
 800b994:	3724      	adds	r7, #36	; 0x24
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr
 800b99e:	bf00      	nop
 800b9a0:	58024400 	.word	0x58024400
 800b9a4:	03d09000 	.word	0x03d09000
 800b9a8:	46000000 	.word	0x46000000
 800b9ac:	4c742400 	.word	0x4c742400
 800b9b0:	4a742400 	.word	0x4a742400
 800b9b4:	4af42400 	.word	0x4af42400

0800b9b8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b089      	sub	sp, #36	; 0x24
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b9c0:	4ba1      	ldr	r3, [pc, #644]	; (800bc48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9c4:	f003 0303 	and.w	r3, r3, #3
 800b9c8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b9ca:	4b9f      	ldr	r3, [pc, #636]	; (800bc48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9ce:	0d1b      	lsrs	r3, r3, #20
 800b9d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b9d4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b9d6:	4b9c      	ldr	r3, [pc, #624]	; (800bc48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9da:	0a1b      	lsrs	r3, r3, #8
 800b9dc:	f003 0301 	and.w	r3, r3, #1
 800b9e0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b9e2:	4b99      	ldr	r3, [pc, #612]	; (800bc48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9e6:	08db      	lsrs	r3, r3, #3
 800b9e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b9ec:	693a      	ldr	r2, [r7, #16]
 800b9ee:	fb02 f303 	mul.w	r3, r2, r3
 800b9f2:	ee07 3a90 	vmov	s15, r3
 800b9f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	f000 8111 	beq.w	800bc28 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ba06:	69bb      	ldr	r3, [r7, #24]
 800ba08:	2b02      	cmp	r3, #2
 800ba0a:	f000 8083 	beq.w	800bb14 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ba0e:	69bb      	ldr	r3, [r7, #24]
 800ba10:	2b02      	cmp	r3, #2
 800ba12:	f200 80a1 	bhi.w	800bb58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ba16:	69bb      	ldr	r3, [r7, #24]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d003      	beq.n	800ba24 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ba1c:	69bb      	ldr	r3, [r7, #24]
 800ba1e:	2b01      	cmp	r3, #1
 800ba20:	d056      	beq.n	800bad0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ba22:	e099      	b.n	800bb58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba24:	4b88      	ldr	r3, [pc, #544]	; (800bc48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f003 0320 	and.w	r3, r3, #32
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d02d      	beq.n	800ba8c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ba30:	4b85      	ldr	r3, [pc, #532]	; (800bc48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	08db      	lsrs	r3, r3, #3
 800ba36:	f003 0303 	and.w	r3, r3, #3
 800ba3a:	4a84      	ldr	r2, [pc, #528]	; (800bc4c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ba3c:	fa22 f303 	lsr.w	r3, r2, r3
 800ba40:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	ee07 3a90 	vmov	s15, r3
 800ba48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	ee07 3a90 	vmov	s15, r3
 800ba52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba5a:	4b7b      	ldr	r3, [pc, #492]	; (800bc48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba62:	ee07 3a90 	vmov	s15, r3
 800ba66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba6e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bc50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba86:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ba8a:	e087      	b.n	800bb9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	ee07 3a90 	vmov	s15, r3
 800ba92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba96:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bc54 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ba9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba9e:	4b6a      	ldr	r3, [pc, #424]	; (800bc48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800baa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800baa6:	ee07 3a90 	vmov	s15, r3
 800baaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baae:	ed97 6a03 	vldr	s12, [r7, #12]
 800bab2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bc50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800babe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bace:	e065      	b.n	800bb9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	ee07 3a90 	vmov	s15, r3
 800bad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bada:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bc58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bae2:	4b59      	ldr	r3, [pc, #356]	; (800bc48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800baea:	ee07 3a90 	vmov	s15, r3
 800baee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800baf6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bc50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bafa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bafe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb12:	e043      	b.n	800bb9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	ee07 3a90 	vmov	s15, r3
 800bb1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb1e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bc5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bb22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb26:	4b48      	ldr	r3, [pc, #288]	; (800bc48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb2e:	ee07 3a90 	vmov	s15, r3
 800bb32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb36:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb3a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bc50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb56:	e021      	b.n	800bb9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	ee07 3a90 	vmov	s15, r3
 800bb5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb62:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bc58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bb66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb6a:	4b37      	ldr	r3, [pc, #220]	; (800bc48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb72:	ee07 3a90 	vmov	s15, r3
 800bb76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb7e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bc50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb9a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800bb9c:	4b2a      	ldr	r3, [pc, #168]	; (800bc48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bba0:	0a5b      	lsrs	r3, r3, #9
 800bba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bba6:	ee07 3a90 	vmov	s15, r3
 800bbaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bbb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbb6:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbc2:	ee17 2a90 	vmov	r2, s15
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800bbca:	4b1f      	ldr	r3, [pc, #124]	; (800bc48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbce:	0c1b      	lsrs	r3, r3, #16
 800bbd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbd4:	ee07 3a90 	vmov	s15, r3
 800bbd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bbe0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbe4:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbf0:	ee17 2a90 	vmov	r2, s15
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800bbf8:	4b13      	ldr	r3, [pc, #76]	; (800bc48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbfc:	0e1b      	lsrs	r3, r3, #24
 800bbfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc02:	ee07 3a90 	vmov	s15, r3
 800bc06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc12:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc1e:	ee17 2a90 	vmov	r2, s15
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bc26:	e008      	b.n	800bc3a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2200      	movs	r2, #0
 800bc32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2200      	movs	r2, #0
 800bc38:	609a      	str	r2, [r3, #8]
}
 800bc3a:	bf00      	nop
 800bc3c:	3724      	adds	r7, #36	; 0x24
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc44:	4770      	bx	lr
 800bc46:	bf00      	nop
 800bc48:	58024400 	.word	0x58024400
 800bc4c:	03d09000 	.word	0x03d09000
 800bc50:	46000000 	.word	0x46000000
 800bc54:	4c742400 	.word	0x4c742400
 800bc58:	4a742400 	.word	0x4a742400
 800bc5c:	4af42400 	.word	0x4af42400

0800bc60 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b084      	sub	sp, #16
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bc6e:	4b53      	ldr	r3, [pc, #332]	; (800bdbc <RCCEx_PLL2_Config+0x15c>)
 800bc70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc72:	f003 0303 	and.w	r3, r3, #3
 800bc76:	2b03      	cmp	r3, #3
 800bc78:	d101      	bne.n	800bc7e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	e099      	b.n	800bdb2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bc7e:	4b4f      	ldr	r3, [pc, #316]	; (800bdbc <RCCEx_PLL2_Config+0x15c>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	4a4e      	ldr	r2, [pc, #312]	; (800bdbc <RCCEx_PLL2_Config+0x15c>)
 800bc84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bc88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc8a:	f7fa fda9 	bl	80067e0 <HAL_GetTick>
 800bc8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bc90:	e008      	b.n	800bca4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bc92:	f7fa fda5 	bl	80067e0 <HAL_GetTick>
 800bc96:	4602      	mov	r2, r0
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	1ad3      	subs	r3, r2, r3
 800bc9c:	2b02      	cmp	r3, #2
 800bc9e:	d901      	bls.n	800bca4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bca0:	2303      	movs	r3, #3
 800bca2:	e086      	b.n	800bdb2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bca4:	4b45      	ldr	r3, [pc, #276]	; (800bdbc <RCCEx_PLL2_Config+0x15c>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d1f0      	bne.n	800bc92 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bcb0:	4b42      	ldr	r3, [pc, #264]	; (800bdbc <RCCEx_PLL2_Config+0x15c>)
 800bcb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcb4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	031b      	lsls	r3, r3, #12
 800bcbe:	493f      	ldr	r1, [pc, #252]	; (800bdbc <RCCEx_PLL2_Config+0x15c>)
 800bcc0:	4313      	orrs	r3, r2
 800bcc2:	628b      	str	r3, [r1, #40]	; 0x28
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	685b      	ldr	r3, [r3, #4]
 800bcc8:	3b01      	subs	r3, #1
 800bcca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	689b      	ldr	r3, [r3, #8]
 800bcd2:	3b01      	subs	r3, #1
 800bcd4:	025b      	lsls	r3, r3, #9
 800bcd6:	b29b      	uxth	r3, r3
 800bcd8:	431a      	orrs	r2, r3
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	68db      	ldr	r3, [r3, #12]
 800bcde:	3b01      	subs	r3, #1
 800bce0:	041b      	lsls	r3, r3, #16
 800bce2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bce6:	431a      	orrs	r2, r3
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	691b      	ldr	r3, [r3, #16]
 800bcec:	3b01      	subs	r3, #1
 800bcee:	061b      	lsls	r3, r3, #24
 800bcf0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bcf4:	4931      	ldr	r1, [pc, #196]	; (800bdbc <RCCEx_PLL2_Config+0x15c>)
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bcfa:	4b30      	ldr	r3, [pc, #192]	; (800bdbc <RCCEx_PLL2_Config+0x15c>)
 800bcfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcfe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	695b      	ldr	r3, [r3, #20]
 800bd06:	492d      	ldr	r1, [pc, #180]	; (800bdbc <RCCEx_PLL2_Config+0x15c>)
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bd0c:	4b2b      	ldr	r3, [pc, #172]	; (800bdbc <RCCEx_PLL2_Config+0x15c>)
 800bd0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd10:	f023 0220 	bic.w	r2, r3, #32
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	699b      	ldr	r3, [r3, #24]
 800bd18:	4928      	ldr	r1, [pc, #160]	; (800bdbc <RCCEx_PLL2_Config+0x15c>)
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bd1e:	4b27      	ldr	r3, [pc, #156]	; (800bdbc <RCCEx_PLL2_Config+0x15c>)
 800bd20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd22:	4a26      	ldr	r2, [pc, #152]	; (800bdbc <RCCEx_PLL2_Config+0x15c>)
 800bd24:	f023 0310 	bic.w	r3, r3, #16
 800bd28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bd2a:	4b24      	ldr	r3, [pc, #144]	; (800bdbc <RCCEx_PLL2_Config+0x15c>)
 800bd2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd2e:	4b24      	ldr	r3, [pc, #144]	; (800bdc0 <RCCEx_PLL2_Config+0x160>)
 800bd30:	4013      	ands	r3, r2
 800bd32:	687a      	ldr	r2, [r7, #4]
 800bd34:	69d2      	ldr	r2, [r2, #28]
 800bd36:	00d2      	lsls	r2, r2, #3
 800bd38:	4920      	ldr	r1, [pc, #128]	; (800bdbc <RCCEx_PLL2_Config+0x15c>)
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bd3e:	4b1f      	ldr	r3, [pc, #124]	; (800bdbc <RCCEx_PLL2_Config+0x15c>)
 800bd40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd42:	4a1e      	ldr	r2, [pc, #120]	; (800bdbc <RCCEx_PLL2_Config+0x15c>)
 800bd44:	f043 0310 	orr.w	r3, r3, #16
 800bd48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d106      	bne.n	800bd5e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bd50:	4b1a      	ldr	r3, [pc, #104]	; (800bdbc <RCCEx_PLL2_Config+0x15c>)
 800bd52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd54:	4a19      	ldr	r2, [pc, #100]	; (800bdbc <RCCEx_PLL2_Config+0x15c>)
 800bd56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bd5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bd5c:	e00f      	b.n	800bd7e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	d106      	bne.n	800bd72 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bd64:	4b15      	ldr	r3, [pc, #84]	; (800bdbc <RCCEx_PLL2_Config+0x15c>)
 800bd66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd68:	4a14      	ldr	r2, [pc, #80]	; (800bdbc <RCCEx_PLL2_Config+0x15c>)
 800bd6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bd70:	e005      	b.n	800bd7e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bd72:	4b12      	ldr	r3, [pc, #72]	; (800bdbc <RCCEx_PLL2_Config+0x15c>)
 800bd74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd76:	4a11      	ldr	r2, [pc, #68]	; (800bdbc <RCCEx_PLL2_Config+0x15c>)
 800bd78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bd7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bd7e:	4b0f      	ldr	r3, [pc, #60]	; (800bdbc <RCCEx_PLL2_Config+0x15c>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4a0e      	ldr	r2, [pc, #56]	; (800bdbc <RCCEx_PLL2_Config+0x15c>)
 800bd84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bd88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd8a:	f7fa fd29 	bl	80067e0 <HAL_GetTick>
 800bd8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bd90:	e008      	b.n	800bda4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bd92:	f7fa fd25 	bl	80067e0 <HAL_GetTick>
 800bd96:	4602      	mov	r2, r0
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	1ad3      	subs	r3, r2, r3
 800bd9c:	2b02      	cmp	r3, #2
 800bd9e:	d901      	bls.n	800bda4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bda0:	2303      	movs	r3, #3
 800bda2:	e006      	b.n	800bdb2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bda4:	4b05      	ldr	r3, [pc, #20]	; (800bdbc <RCCEx_PLL2_Config+0x15c>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d0f0      	beq.n	800bd92 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bdb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3710      	adds	r7, #16
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
 800bdba:	bf00      	nop
 800bdbc:	58024400 	.word	0x58024400
 800bdc0:	ffff0007 	.word	0xffff0007

0800bdc4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b084      	sub	sp, #16
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
 800bdcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bdd2:	4b53      	ldr	r3, [pc, #332]	; (800bf20 <RCCEx_PLL3_Config+0x15c>)
 800bdd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdd6:	f003 0303 	and.w	r3, r3, #3
 800bdda:	2b03      	cmp	r3, #3
 800bddc:	d101      	bne.n	800bde2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bdde:	2301      	movs	r3, #1
 800bde0:	e099      	b.n	800bf16 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bde2:	4b4f      	ldr	r3, [pc, #316]	; (800bf20 <RCCEx_PLL3_Config+0x15c>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	4a4e      	ldr	r2, [pc, #312]	; (800bf20 <RCCEx_PLL3_Config+0x15c>)
 800bde8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bdec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bdee:	f7fa fcf7 	bl	80067e0 <HAL_GetTick>
 800bdf2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bdf4:	e008      	b.n	800be08 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800bdf6:	f7fa fcf3 	bl	80067e0 <HAL_GetTick>
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	1ad3      	subs	r3, r2, r3
 800be00:	2b02      	cmp	r3, #2
 800be02:	d901      	bls.n	800be08 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800be04:	2303      	movs	r3, #3
 800be06:	e086      	b.n	800bf16 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800be08:	4b45      	ldr	r3, [pc, #276]	; (800bf20 <RCCEx_PLL3_Config+0x15c>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be10:	2b00      	cmp	r3, #0
 800be12:	d1f0      	bne.n	800bdf6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800be14:	4b42      	ldr	r3, [pc, #264]	; (800bf20 <RCCEx_PLL3_Config+0x15c>)
 800be16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be18:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	051b      	lsls	r3, r3, #20
 800be22:	493f      	ldr	r1, [pc, #252]	; (800bf20 <RCCEx_PLL3_Config+0x15c>)
 800be24:	4313      	orrs	r3, r2
 800be26:	628b      	str	r3, [r1, #40]	; 0x28
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	3b01      	subs	r3, #1
 800be2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	689b      	ldr	r3, [r3, #8]
 800be36:	3b01      	subs	r3, #1
 800be38:	025b      	lsls	r3, r3, #9
 800be3a:	b29b      	uxth	r3, r3
 800be3c:	431a      	orrs	r2, r3
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	68db      	ldr	r3, [r3, #12]
 800be42:	3b01      	subs	r3, #1
 800be44:	041b      	lsls	r3, r3, #16
 800be46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800be4a:	431a      	orrs	r2, r3
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	691b      	ldr	r3, [r3, #16]
 800be50:	3b01      	subs	r3, #1
 800be52:	061b      	lsls	r3, r3, #24
 800be54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800be58:	4931      	ldr	r1, [pc, #196]	; (800bf20 <RCCEx_PLL3_Config+0x15c>)
 800be5a:	4313      	orrs	r3, r2
 800be5c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800be5e:	4b30      	ldr	r3, [pc, #192]	; (800bf20 <RCCEx_PLL3_Config+0x15c>)
 800be60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	695b      	ldr	r3, [r3, #20]
 800be6a:	492d      	ldr	r1, [pc, #180]	; (800bf20 <RCCEx_PLL3_Config+0x15c>)
 800be6c:	4313      	orrs	r3, r2
 800be6e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800be70:	4b2b      	ldr	r3, [pc, #172]	; (800bf20 <RCCEx_PLL3_Config+0x15c>)
 800be72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be74:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	699b      	ldr	r3, [r3, #24]
 800be7c:	4928      	ldr	r1, [pc, #160]	; (800bf20 <RCCEx_PLL3_Config+0x15c>)
 800be7e:	4313      	orrs	r3, r2
 800be80:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800be82:	4b27      	ldr	r3, [pc, #156]	; (800bf20 <RCCEx_PLL3_Config+0x15c>)
 800be84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be86:	4a26      	ldr	r2, [pc, #152]	; (800bf20 <RCCEx_PLL3_Config+0x15c>)
 800be88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800be8e:	4b24      	ldr	r3, [pc, #144]	; (800bf20 <RCCEx_PLL3_Config+0x15c>)
 800be90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be92:	4b24      	ldr	r3, [pc, #144]	; (800bf24 <RCCEx_PLL3_Config+0x160>)
 800be94:	4013      	ands	r3, r2
 800be96:	687a      	ldr	r2, [r7, #4]
 800be98:	69d2      	ldr	r2, [r2, #28]
 800be9a:	00d2      	lsls	r2, r2, #3
 800be9c:	4920      	ldr	r1, [pc, #128]	; (800bf20 <RCCEx_PLL3_Config+0x15c>)
 800be9e:	4313      	orrs	r3, r2
 800bea0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bea2:	4b1f      	ldr	r3, [pc, #124]	; (800bf20 <RCCEx_PLL3_Config+0x15c>)
 800bea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea6:	4a1e      	ldr	r2, [pc, #120]	; (800bf20 <RCCEx_PLL3_Config+0x15c>)
 800bea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800beac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d106      	bne.n	800bec2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800beb4:	4b1a      	ldr	r3, [pc, #104]	; (800bf20 <RCCEx_PLL3_Config+0x15c>)
 800beb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb8:	4a19      	ldr	r2, [pc, #100]	; (800bf20 <RCCEx_PLL3_Config+0x15c>)
 800beba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bebe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bec0:	e00f      	b.n	800bee2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	2b01      	cmp	r3, #1
 800bec6:	d106      	bne.n	800bed6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bec8:	4b15      	ldr	r3, [pc, #84]	; (800bf20 <RCCEx_PLL3_Config+0x15c>)
 800beca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800becc:	4a14      	ldr	r2, [pc, #80]	; (800bf20 <RCCEx_PLL3_Config+0x15c>)
 800bece:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bed2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bed4:	e005      	b.n	800bee2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bed6:	4b12      	ldr	r3, [pc, #72]	; (800bf20 <RCCEx_PLL3_Config+0x15c>)
 800bed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beda:	4a11      	ldr	r2, [pc, #68]	; (800bf20 <RCCEx_PLL3_Config+0x15c>)
 800bedc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bee0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bee2:	4b0f      	ldr	r3, [pc, #60]	; (800bf20 <RCCEx_PLL3_Config+0x15c>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	4a0e      	ldr	r2, [pc, #56]	; (800bf20 <RCCEx_PLL3_Config+0x15c>)
 800bee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800beec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800beee:	f7fa fc77 	bl	80067e0 <HAL_GetTick>
 800bef2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bef4:	e008      	b.n	800bf08 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800bef6:	f7fa fc73 	bl	80067e0 <HAL_GetTick>
 800befa:	4602      	mov	r2, r0
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	1ad3      	subs	r3, r2, r3
 800bf00:	2b02      	cmp	r3, #2
 800bf02:	d901      	bls.n	800bf08 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bf04:	2303      	movs	r3, #3
 800bf06:	e006      	b.n	800bf16 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bf08:	4b05      	ldr	r3, [pc, #20]	; (800bf20 <RCCEx_PLL3_Config+0x15c>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d0f0      	beq.n	800bef6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bf14:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	58024400 	.word	0x58024400
 800bf24:	ffff0007 	.word	0xffff0007

0800bf28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d101      	bne.n	800bf3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bf36:	2301      	movs	r3, #1
 800bf38:	e049      	b.n	800bfce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf40:	b2db      	uxtb	r3, r3
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d106      	bne.n	800bf54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f7f9 ff60 	bl	8005e14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2202      	movs	r2, #2
 800bf58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681a      	ldr	r2, [r3, #0]
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	3304      	adds	r3, #4
 800bf64:	4619      	mov	r1, r3
 800bf66:	4610      	mov	r0, r2
 800bf68:	f000 feb8 	bl	800ccdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2201      	movs	r2, #1
 800bf70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2201      	movs	r2, #1
 800bf78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2201      	movs	r2, #1
 800bf80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2201      	movs	r2, #1
 800bf88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2201      	movs	r2, #1
 800bf90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2201      	movs	r2, #1
 800bf98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2201      	movs	r2, #1
 800bfb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bfcc:	2300      	movs	r3, #0
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3708      	adds	r7, #8
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
	...

0800bfd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b085      	sub	sp, #20
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfe6:	b2db      	uxtb	r3, r3
 800bfe8:	2b01      	cmp	r3, #1
 800bfea:	d001      	beq.n	800bff0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bfec:	2301      	movs	r3, #1
 800bfee:	e05e      	b.n	800c0ae <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2202      	movs	r2, #2
 800bff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	68da      	ldr	r2, [r3, #12]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f042 0201 	orr.w	r2, r2, #1
 800c006:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	4a2b      	ldr	r2, [pc, #172]	; (800c0bc <HAL_TIM_Base_Start_IT+0xe4>)
 800c00e:	4293      	cmp	r3, r2
 800c010:	d02c      	beq.n	800c06c <HAL_TIM_Base_Start_IT+0x94>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c01a:	d027      	beq.n	800c06c <HAL_TIM_Base_Start_IT+0x94>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	4a27      	ldr	r2, [pc, #156]	; (800c0c0 <HAL_TIM_Base_Start_IT+0xe8>)
 800c022:	4293      	cmp	r3, r2
 800c024:	d022      	beq.n	800c06c <HAL_TIM_Base_Start_IT+0x94>
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	4a26      	ldr	r2, [pc, #152]	; (800c0c4 <HAL_TIM_Base_Start_IT+0xec>)
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d01d      	beq.n	800c06c <HAL_TIM_Base_Start_IT+0x94>
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4a24      	ldr	r2, [pc, #144]	; (800c0c8 <HAL_TIM_Base_Start_IT+0xf0>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d018      	beq.n	800c06c <HAL_TIM_Base_Start_IT+0x94>
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	4a23      	ldr	r2, [pc, #140]	; (800c0cc <HAL_TIM_Base_Start_IT+0xf4>)
 800c040:	4293      	cmp	r3, r2
 800c042:	d013      	beq.n	800c06c <HAL_TIM_Base_Start_IT+0x94>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	4a21      	ldr	r2, [pc, #132]	; (800c0d0 <HAL_TIM_Base_Start_IT+0xf8>)
 800c04a:	4293      	cmp	r3, r2
 800c04c:	d00e      	beq.n	800c06c <HAL_TIM_Base_Start_IT+0x94>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	4a20      	ldr	r2, [pc, #128]	; (800c0d4 <HAL_TIM_Base_Start_IT+0xfc>)
 800c054:	4293      	cmp	r3, r2
 800c056:	d009      	beq.n	800c06c <HAL_TIM_Base_Start_IT+0x94>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	4a1e      	ldr	r2, [pc, #120]	; (800c0d8 <HAL_TIM_Base_Start_IT+0x100>)
 800c05e:	4293      	cmp	r3, r2
 800c060:	d004      	beq.n	800c06c <HAL_TIM_Base_Start_IT+0x94>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	4a1d      	ldr	r2, [pc, #116]	; (800c0dc <HAL_TIM_Base_Start_IT+0x104>)
 800c068:	4293      	cmp	r3, r2
 800c06a:	d115      	bne.n	800c098 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	689a      	ldr	r2, [r3, #8]
 800c072:	4b1b      	ldr	r3, [pc, #108]	; (800c0e0 <HAL_TIM_Base_Start_IT+0x108>)
 800c074:	4013      	ands	r3, r2
 800c076:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	2b06      	cmp	r3, #6
 800c07c:	d015      	beq.n	800c0aa <HAL_TIM_Base_Start_IT+0xd2>
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c084:	d011      	beq.n	800c0aa <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	681a      	ldr	r2, [r3, #0]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f042 0201 	orr.w	r2, r2, #1
 800c094:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c096:	e008      	b.n	800c0aa <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	681a      	ldr	r2, [r3, #0]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	f042 0201 	orr.w	r2, r2, #1
 800c0a6:	601a      	str	r2, [r3, #0]
 800c0a8:	e000      	b.n	800c0ac <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c0ac:	2300      	movs	r3, #0
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3714      	adds	r7, #20
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr
 800c0ba:	bf00      	nop
 800c0bc:	40010000 	.word	0x40010000
 800c0c0:	40000400 	.word	0x40000400
 800c0c4:	40000800 	.word	0x40000800
 800c0c8:	40000c00 	.word	0x40000c00
 800c0cc:	40010400 	.word	0x40010400
 800c0d0:	40001800 	.word	0x40001800
 800c0d4:	40014000 	.word	0x40014000
 800c0d8:	4000e000 	.word	0x4000e000
 800c0dc:	4000e400 	.word	0x4000e400
 800c0e0:	00010007 	.word	0x00010007

0800c0e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b082      	sub	sp, #8
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d101      	bne.n	800c0f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	e049      	b.n	800c18a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c0fc:	b2db      	uxtb	r3, r3
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d106      	bne.n	800c110 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2200      	movs	r2, #0
 800c106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f7f9 fcd6 	bl	8005abc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2202      	movs	r2, #2
 800c114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681a      	ldr	r2, [r3, #0]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	3304      	adds	r3, #4
 800c120:	4619      	mov	r1, r3
 800c122:	4610      	mov	r0, r2
 800c124:	f000 fdda 	bl	800ccdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2201      	movs	r2, #1
 800c12c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2201      	movs	r2, #1
 800c134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2201      	movs	r2, #1
 800c13c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2201      	movs	r2, #1
 800c144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2201      	movs	r2, #1
 800c14c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2201      	movs	r2, #1
 800c154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2201      	movs	r2, #1
 800c15c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2201      	movs	r2, #1
 800c164:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2201      	movs	r2, #1
 800c16c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2201      	movs	r2, #1
 800c174:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2201      	movs	r2, #1
 800c17c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2201      	movs	r2, #1
 800c184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c188:	2300      	movs	r3, #0
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3708      	adds	r7, #8
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
	...

0800c194 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b084      	sub	sp, #16
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d109      	bne.n	800c1b8 <HAL_TIM_PWM_Start+0x24>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c1aa:	b2db      	uxtb	r3, r3
 800c1ac:	2b01      	cmp	r3, #1
 800c1ae:	bf14      	ite	ne
 800c1b0:	2301      	movne	r3, #1
 800c1b2:	2300      	moveq	r3, #0
 800c1b4:	b2db      	uxtb	r3, r3
 800c1b6:	e03c      	b.n	800c232 <HAL_TIM_PWM_Start+0x9e>
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	2b04      	cmp	r3, #4
 800c1bc:	d109      	bne.n	800c1d2 <HAL_TIM_PWM_Start+0x3e>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c1c4:	b2db      	uxtb	r3, r3
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	bf14      	ite	ne
 800c1ca:	2301      	movne	r3, #1
 800c1cc:	2300      	moveq	r3, #0
 800c1ce:	b2db      	uxtb	r3, r3
 800c1d0:	e02f      	b.n	800c232 <HAL_TIM_PWM_Start+0x9e>
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	2b08      	cmp	r3, #8
 800c1d6:	d109      	bne.n	800c1ec <HAL_TIM_PWM_Start+0x58>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c1de:	b2db      	uxtb	r3, r3
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	bf14      	ite	ne
 800c1e4:	2301      	movne	r3, #1
 800c1e6:	2300      	moveq	r3, #0
 800c1e8:	b2db      	uxtb	r3, r3
 800c1ea:	e022      	b.n	800c232 <HAL_TIM_PWM_Start+0x9e>
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	2b0c      	cmp	r3, #12
 800c1f0:	d109      	bne.n	800c206 <HAL_TIM_PWM_Start+0x72>
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1f8:	b2db      	uxtb	r3, r3
 800c1fa:	2b01      	cmp	r3, #1
 800c1fc:	bf14      	ite	ne
 800c1fe:	2301      	movne	r3, #1
 800c200:	2300      	moveq	r3, #0
 800c202:	b2db      	uxtb	r3, r3
 800c204:	e015      	b.n	800c232 <HAL_TIM_PWM_Start+0x9e>
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	2b10      	cmp	r3, #16
 800c20a:	d109      	bne.n	800c220 <HAL_TIM_PWM_Start+0x8c>
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c212:	b2db      	uxtb	r3, r3
 800c214:	2b01      	cmp	r3, #1
 800c216:	bf14      	ite	ne
 800c218:	2301      	movne	r3, #1
 800c21a:	2300      	moveq	r3, #0
 800c21c:	b2db      	uxtb	r3, r3
 800c21e:	e008      	b.n	800c232 <HAL_TIM_PWM_Start+0x9e>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c226:	b2db      	uxtb	r3, r3
 800c228:	2b01      	cmp	r3, #1
 800c22a:	bf14      	ite	ne
 800c22c:	2301      	movne	r3, #1
 800c22e:	2300      	moveq	r3, #0
 800c230:	b2db      	uxtb	r3, r3
 800c232:	2b00      	cmp	r3, #0
 800c234:	d001      	beq.n	800c23a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c236:	2301      	movs	r3, #1
 800c238:	e0ab      	b.n	800c392 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d104      	bne.n	800c24a <HAL_TIM_PWM_Start+0xb6>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2202      	movs	r2, #2
 800c244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c248:	e023      	b.n	800c292 <HAL_TIM_PWM_Start+0xfe>
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	2b04      	cmp	r3, #4
 800c24e:	d104      	bne.n	800c25a <HAL_TIM_PWM_Start+0xc6>
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2202      	movs	r2, #2
 800c254:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c258:	e01b      	b.n	800c292 <HAL_TIM_PWM_Start+0xfe>
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	2b08      	cmp	r3, #8
 800c25e:	d104      	bne.n	800c26a <HAL_TIM_PWM_Start+0xd6>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2202      	movs	r2, #2
 800c264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c268:	e013      	b.n	800c292 <HAL_TIM_PWM_Start+0xfe>
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	2b0c      	cmp	r3, #12
 800c26e:	d104      	bne.n	800c27a <HAL_TIM_PWM_Start+0xe6>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2202      	movs	r2, #2
 800c274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c278:	e00b      	b.n	800c292 <HAL_TIM_PWM_Start+0xfe>
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	2b10      	cmp	r3, #16
 800c27e:	d104      	bne.n	800c28a <HAL_TIM_PWM_Start+0xf6>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2202      	movs	r2, #2
 800c284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c288:	e003      	b.n	800c292 <HAL_TIM_PWM_Start+0xfe>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2202      	movs	r2, #2
 800c28e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	2201      	movs	r2, #1
 800c298:	6839      	ldr	r1, [r7, #0]
 800c29a:	4618      	mov	r0, r3
 800c29c:	f001 f938 	bl	800d510 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	4a3d      	ldr	r2, [pc, #244]	; (800c39c <HAL_TIM_PWM_Start+0x208>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d013      	beq.n	800c2d2 <HAL_TIM_PWM_Start+0x13e>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	4a3c      	ldr	r2, [pc, #240]	; (800c3a0 <HAL_TIM_PWM_Start+0x20c>)
 800c2b0:	4293      	cmp	r3, r2
 800c2b2:	d00e      	beq.n	800c2d2 <HAL_TIM_PWM_Start+0x13e>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	4a3a      	ldr	r2, [pc, #232]	; (800c3a4 <HAL_TIM_PWM_Start+0x210>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d009      	beq.n	800c2d2 <HAL_TIM_PWM_Start+0x13e>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	4a39      	ldr	r2, [pc, #228]	; (800c3a8 <HAL_TIM_PWM_Start+0x214>)
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	d004      	beq.n	800c2d2 <HAL_TIM_PWM_Start+0x13e>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4a37      	ldr	r2, [pc, #220]	; (800c3ac <HAL_TIM_PWM_Start+0x218>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d101      	bne.n	800c2d6 <HAL_TIM_PWM_Start+0x142>
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	e000      	b.n	800c2d8 <HAL_TIM_PWM_Start+0x144>
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d007      	beq.n	800c2ec <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c2ea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	4a2a      	ldr	r2, [pc, #168]	; (800c39c <HAL_TIM_PWM_Start+0x208>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d02c      	beq.n	800c350 <HAL_TIM_PWM_Start+0x1bc>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2fe:	d027      	beq.n	800c350 <HAL_TIM_PWM_Start+0x1bc>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	4a2a      	ldr	r2, [pc, #168]	; (800c3b0 <HAL_TIM_PWM_Start+0x21c>)
 800c306:	4293      	cmp	r3, r2
 800c308:	d022      	beq.n	800c350 <HAL_TIM_PWM_Start+0x1bc>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	4a29      	ldr	r2, [pc, #164]	; (800c3b4 <HAL_TIM_PWM_Start+0x220>)
 800c310:	4293      	cmp	r3, r2
 800c312:	d01d      	beq.n	800c350 <HAL_TIM_PWM_Start+0x1bc>
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	4a27      	ldr	r2, [pc, #156]	; (800c3b8 <HAL_TIM_PWM_Start+0x224>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d018      	beq.n	800c350 <HAL_TIM_PWM_Start+0x1bc>
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	4a1f      	ldr	r2, [pc, #124]	; (800c3a0 <HAL_TIM_PWM_Start+0x20c>)
 800c324:	4293      	cmp	r3, r2
 800c326:	d013      	beq.n	800c350 <HAL_TIM_PWM_Start+0x1bc>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	4a23      	ldr	r2, [pc, #140]	; (800c3bc <HAL_TIM_PWM_Start+0x228>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d00e      	beq.n	800c350 <HAL_TIM_PWM_Start+0x1bc>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	4a1b      	ldr	r2, [pc, #108]	; (800c3a4 <HAL_TIM_PWM_Start+0x210>)
 800c338:	4293      	cmp	r3, r2
 800c33a:	d009      	beq.n	800c350 <HAL_TIM_PWM_Start+0x1bc>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4a1f      	ldr	r2, [pc, #124]	; (800c3c0 <HAL_TIM_PWM_Start+0x22c>)
 800c342:	4293      	cmp	r3, r2
 800c344:	d004      	beq.n	800c350 <HAL_TIM_PWM_Start+0x1bc>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	4a1e      	ldr	r2, [pc, #120]	; (800c3c4 <HAL_TIM_PWM_Start+0x230>)
 800c34c:	4293      	cmp	r3, r2
 800c34e:	d115      	bne.n	800c37c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	689a      	ldr	r2, [r3, #8]
 800c356:	4b1c      	ldr	r3, [pc, #112]	; (800c3c8 <HAL_TIM_PWM_Start+0x234>)
 800c358:	4013      	ands	r3, r2
 800c35a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2b06      	cmp	r3, #6
 800c360:	d015      	beq.n	800c38e <HAL_TIM_PWM_Start+0x1fa>
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c368:	d011      	beq.n	800c38e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	681a      	ldr	r2, [r3, #0]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f042 0201 	orr.w	r2, r2, #1
 800c378:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c37a:	e008      	b.n	800c38e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	681a      	ldr	r2, [r3, #0]
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f042 0201 	orr.w	r2, r2, #1
 800c38a:	601a      	str	r2, [r3, #0]
 800c38c:	e000      	b.n	800c390 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c38e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c390:	2300      	movs	r3, #0
}
 800c392:	4618      	mov	r0, r3
 800c394:	3710      	adds	r7, #16
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}
 800c39a:	bf00      	nop
 800c39c:	40010000 	.word	0x40010000
 800c3a0:	40010400 	.word	0x40010400
 800c3a4:	40014000 	.word	0x40014000
 800c3a8:	40014400 	.word	0x40014400
 800c3ac:	40014800 	.word	0x40014800
 800c3b0:	40000400 	.word	0x40000400
 800c3b4:	40000800 	.word	0x40000800
 800c3b8:	40000c00 	.word	0x40000c00
 800c3bc:	40001800 	.word	0x40001800
 800c3c0:	4000e000 	.word	0x4000e000
 800c3c4:	4000e400 	.word	0x4000e400
 800c3c8:	00010007 	.word	0x00010007

0800c3cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b086      	sub	sp, #24
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d101      	bne.n	800c3e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c3dc:	2301      	movs	r3, #1
 800c3de:	e08f      	b.n	800c500 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3e6:	b2db      	uxtb	r3, r3
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d106      	bne.n	800c3fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f7f9 fbf7 	bl	8005be8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2202      	movs	r2, #2
 800c3fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	6899      	ldr	r1, [r3, #8]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681a      	ldr	r2, [r3, #0]
 800c40c:	4b3e      	ldr	r3, [pc, #248]	; (800c508 <HAL_TIM_Encoder_Init+0x13c>)
 800c40e:	400b      	ands	r3, r1
 800c410:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681a      	ldr	r2, [r3, #0]
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	3304      	adds	r3, #4
 800c41a:	4619      	mov	r1, r3
 800c41c:	4610      	mov	r0, r2
 800c41e:	f000 fc5d 	bl	800ccdc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	689b      	ldr	r3, [r3, #8]
 800c428:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	699b      	ldr	r3, [r3, #24]
 800c430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	6a1b      	ldr	r3, [r3, #32]
 800c438:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	697a      	ldr	r2, [r7, #20]
 800c440:	4313      	orrs	r3, r2
 800c442:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c444:	693a      	ldr	r2, [r7, #16]
 800c446:	4b31      	ldr	r3, [pc, #196]	; (800c50c <HAL_TIM_Encoder_Init+0x140>)
 800c448:	4013      	ands	r3, r2
 800c44a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	689a      	ldr	r2, [r3, #8]
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	699b      	ldr	r3, [r3, #24]
 800c454:	021b      	lsls	r3, r3, #8
 800c456:	4313      	orrs	r3, r2
 800c458:	693a      	ldr	r2, [r7, #16]
 800c45a:	4313      	orrs	r3, r2
 800c45c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c45e:	693a      	ldr	r2, [r7, #16]
 800c460:	4b2b      	ldr	r3, [pc, #172]	; (800c510 <HAL_TIM_Encoder_Init+0x144>)
 800c462:	4013      	ands	r3, r2
 800c464:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c466:	693a      	ldr	r2, [r7, #16]
 800c468:	4b2a      	ldr	r3, [pc, #168]	; (800c514 <HAL_TIM_Encoder_Init+0x148>)
 800c46a:	4013      	ands	r3, r2
 800c46c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	68da      	ldr	r2, [r3, #12]
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	69db      	ldr	r3, [r3, #28]
 800c476:	021b      	lsls	r3, r3, #8
 800c478:	4313      	orrs	r3, r2
 800c47a:	693a      	ldr	r2, [r7, #16]
 800c47c:	4313      	orrs	r3, r2
 800c47e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	691b      	ldr	r3, [r3, #16]
 800c484:	011a      	lsls	r2, r3, #4
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	6a1b      	ldr	r3, [r3, #32]
 800c48a:	031b      	lsls	r3, r3, #12
 800c48c:	4313      	orrs	r3, r2
 800c48e:	693a      	ldr	r2, [r7, #16]
 800c490:	4313      	orrs	r3, r2
 800c492:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c49a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c4a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	685a      	ldr	r2, [r3, #4]
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	695b      	ldr	r3, [r3, #20]
 800c4ac:	011b      	lsls	r3, r3, #4
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	68fa      	ldr	r2, [r7, #12]
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	697a      	ldr	r2, [r7, #20]
 800c4bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	693a      	ldr	r2, [r7, #16]
 800c4c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	68fa      	ldr	r2, [r7, #12]
 800c4cc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2201      	movs	r2, #1
 800c4d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2201      	movs	r2, #1
 800c4da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2201      	movs	r2, #1
 800c4e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2201      	movs	r2, #1
 800c4f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2201      	movs	r2, #1
 800c4fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c4fe:	2300      	movs	r3, #0
}
 800c500:	4618      	mov	r0, r3
 800c502:	3718      	adds	r7, #24
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}
 800c508:	fffebff8 	.word	0xfffebff8
 800c50c:	fffffcfc 	.word	0xfffffcfc
 800c510:	fffff3f3 	.word	0xfffff3f3
 800c514:	ffff0f0f 	.word	0xffff0f0f

0800c518 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b084      	sub	sp, #16
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c528:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c530:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c538:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c540:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d110      	bne.n	800c56a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c548:	7bfb      	ldrb	r3, [r7, #15]
 800c54a:	2b01      	cmp	r3, #1
 800c54c:	d102      	bne.n	800c554 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800c54e:	7b7b      	ldrb	r3, [r7, #13]
 800c550:	2b01      	cmp	r3, #1
 800c552:	d001      	beq.n	800c558 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800c554:	2301      	movs	r3, #1
 800c556:	e069      	b.n	800c62c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2202      	movs	r2, #2
 800c55c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	2202      	movs	r2, #2
 800c564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c568:	e031      	b.n	800c5ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	2b04      	cmp	r3, #4
 800c56e:	d110      	bne.n	800c592 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c570:	7bbb      	ldrb	r3, [r7, #14]
 800c572:	2b01      	cmp	r3, #1
 800c574:	d102      	bne.n	800c57c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c576:	7b3b      	ldrb	r3, [r7, #12]
 800c578:	2b01      	cmp	r3, #1
 800c57a:	d001      	beq.n	800c580 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800c57c:	2301      	movs	r3, #1
 800c57e:	e055      	b.n	800c62c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2202      	movs	r2, #2
 800c584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2202      	movs	r2, #2
 800c58c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c590:	e01d      	b.n	800c5ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c592:	7bfb      	ldrb	r3, [r7, #15]
 800c594:	2b01      	cmp	r3, #1
 800c596:	d108      	bne.n	800c5aa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c598:	7bbb      	ldrb	r3, [r7, #14]
 800c59a:	2b01      	cmp	r3, #1
 800c59c:	d105      	bne.n	800c5aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c59e:	7b7b      	ldrb	r3, [r7, #13]
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	d102      	bne.n	800c5aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c5a4:	7b3b      	ldrb	r3, [r7, #12]
 800c5a6:	2b01      	cmp	r3, #1
 800c5a8:	d001      	beq.n	800c5ae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	e03e      	b.n	800c62c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2202      	movs	r2, #2
 800c5b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2202      	movs	r2, #2
 800c5ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2202      	movs	r2, #2
 800c5c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2202      	movs	r2, #2
 800c5ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d003      	beq.n	800c5dc <HAL_TIM_Encoder_Start+0xc4>
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	2b04      	cmp	r3, #4
 800c5d8:	d008      	beq.n	800c5ec <HAL_TIM_Encoder_Start+0xd4>
 800c5da:	e00f      	b.n	800c5fc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	2201      	movs	r2, #1
 800c5e2:	2100      	movs	r1, #0
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f000 ff93 	bl	800d510 <TIM_CCxChannelCmd>
      break;
 800c5ea:	e016      	b.n	800c61a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	2104      	movs	r1, #4
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f000 ff8b 	bl	800d510 <TIM_CCxChannelCmd>
      break;
 800c5fa:	e00e      	b.n	800c61a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	2201      	movs	r2, #1
 800c602:	2100      	movs	r1, #0
 800c604:	4618      	mov	r0, r3
 800c606:	f000 ff83 	bl	800d510 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	2201      	movs	r2, #1
 800c610:	2104      	movs	r1, #4
 800c612:	4618      	mov	r0, r3
 800c614:	f000 ff7c 	bl	800d510 <TIM_CCxChannelCmd>
      break;
 800c618:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	681a      	ldr	r2, [r3, #0]
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f042 0201 	orr.w	r2, r2, #1
 800c628:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c62a:	2300      	movs	r3, #0
}
 800c62c:	4618      	mov	r0, r3
 800c62e:	3710      	adds	r7, #16
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}

0800c634 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b082      	sub	sp, #8
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	691b      	ldr	r3, [r3, #16]
 800c642:	f003 0302 	and.w	r3, r3, #2
 800c646:	2b02      	cmp	r3, #2
 800c648:	d122      	bne.n	800c690 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	68db      	ldr	r3, [r3, #12]
 800c650:	f003 0302 	and.w	r3, r3, #2
 800c654:	2b02      	cmp	r3, #2
 800c656:	d11b      	bne.n	800c690 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f06f 0202 	mvn.w	r2, #2
 800c660:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2201      	movs	r2, #1
 800c666:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	699b      	ldr	r3, [r3, #24]
 800c66e:	f003 0303 	and.w	r3, r3, #3
 800c672:	2b00      	cmp	r3, #0
 800c674:	d003      	beq.n	800c67e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f000 fb12 	bl	800cca0 <HAL_TIM_IC_CaptureCallback>
 800c67c:	e005      	b.n	800c68a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f000 fb04 	bl	800cc8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f000 fb15 	bl	800ccb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2200      	movs	r2, #0
 800c68e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	691b      	ldr	r3, [r3, #16]
 800c696:	f003 0304 	and.w	r3, r3, #4
 800c69a:	2b04      	cmp	r3, #4
 800c69c:	d122      	bne.n	800c6e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	68db      	ldr	r3, [r3, #12]
 800c6a4:	f003 0304 	and.w	r3, r3, #4
 800c6a8:	2b04      	cmp	r3, #4
 800c6aa:	d11b      	bne.n	800c6e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f06f 0204 	mvn.w	r2, #4
 800c6b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2202      	movs	r2, #2
 800c6ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	699b      	ldr	r3, [r3, #24]
 800c6c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d003      	beq.n	800c6d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f000 fae8 	bl	800cca0 <HAL_TIM_IC_CaptureCallback>
 800c6d0:	e005      	b.n	800c6de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f000 fada 	bl	800cc8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f000 faeb 	bl	800ccb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	691b      	ldr	r3, [r3, #16]
 800c6ea:	f003 0308 	and.w	r3, r3, #8
 800c6ee:	2b08      	cmp	r3, #8
 800c6f0:	d122      	bne.n	800c738 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	68db      	ldr	r3, [r3, #12]
 800c6f8:	f003 0308 	and.w	r3, r3, #8
 800c6fc:	2b08      	cmp	r3, #8
 800c6fe:	d11b      	bne.n	800c738 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f06f 0208 	mvn.w	r2, #8
 800c708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2204      	movs	r2, #4
 800c70e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	69db      	ldr	r3, [r3, #28]
 800c716:	f003 0303 	and.w	r3, r3, #3
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d003      	beq.n	800c726 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 fabe 	bl	800cca0 <HAL_TIM_IC_CaptureCallback>
 800c724:	e005      	b.n	800c732 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f000 fab0 	bl	800cc8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f000 fac1 	bl	800ccb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2200      	movs	r2, #0
 800c736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	691b      	ldr	r3, [r3, #16]
 800c73e:	f003 0310 	and.w	r3, r3, #16
 800c742:	2b10      	cmp	r3, #16
 800c744:	d122      	bne.n	800c78c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	68db      	ldr	r3, [r3, #12]
 800c74c:	f003 0310 	and.w	r3, r3, #16
 800c750:	2b10      	cmp	r3, #16
 800c752:	d11b      	bne.n	800c78c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f06f 0210 	mvn.w	r2, #16
 800c75c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2208      	movs	r2, #8
 800c762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	69db      	ldr	r3, [r3, #28]
 800c76a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d003      	beq.n	800c77a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f000 fa94 	bl	800cca0 <HAL_TIM_IC_CaptureCallback>
 800c778:	e005      	b.n	800c786 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 fa86 	bl	800cc8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f000 fa97 	bl	800ccb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2200      	movs	r2, #0
 800c78a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	691b      	ldr	r3, [r3, #16]
 800c792:	f003 0301 	and.w	r3, r3, #1
 800c796:	2b01      	cmp	r3, #1
 800c798:	d10e      	bne.n	800c7b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	68db      	ldr	r3, [r3, #12]
 800c7a0:	f003 0301 	and.w	r3, r3, #1
 800c7a4:	2b01      	cmp	r3, #1
 800c7a6:	d107      	bne.n	800c7b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	f06f 0201 	mvn.w	r2, #1
 800c7b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f7f5 fb78 	bl	8001ea8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	691b      	ldr	r3, [r3, #16]
 800c7be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7c2:	2b80      	cmp	r3, #128	; 0x80
 800c7c4:	d10e      	bne.n	800c7e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	68db      	ldr	r3, [r3, #12]
 800c7cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7d0:	2b80      	cmp	r3, #128	; 0x80
 800c7d2:	d107      	bne.n	800c7e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c7dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f001 f802 	bl	800d7e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	691b      	ldr	r3, [r3, #16]
 800c7ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7f2:	d10e      	bne.n	800c812 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	68db      	ldr	r3, [r3, #12]
 800c7fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7fe:	2b80      	cmp	r3, #128	; 0x80
 800c800:	d107      	bne.n	800c812 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c80a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f000 fff5 	bl	800d7fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	691b      	ldr	r3, [r3, #16]
 800c818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c81c:	2b40      	cmp	r3, #64	; 0x40
 800c81e:	d10e      	bne.n	800c83e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	68db      	ldr	r3, [r3, #12]
 800c826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c82a:	2b40      	cmp	r3, #64	; 0x40
 800c82c:	d107      	bne.n	800c83e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f000 fa45 	bl	800ccc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	691b      	ldr	r3, [r3, #16]
 800c844:	f003 0320 	and.w	r3, r3, #32
 800c848:	2b20      	cmp	r3, #32
 800c84a:	d10e      	bne.n	800c86a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	68db      	ldr	r3, [r3, #12]
 800c852:	f003 0320 	and.w	r3, r3, #32
 800c856:	2b20      	cmp	r3, #32
 800c858:	d107      	bne.n	800c86a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f06f 0220 	mvn.w	r2, #32
 800c862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f000 ffb5 	bl	800d7d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c86a:	bf00      	nop
 800c86c:	3708      	adds	r7, #8
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}
	...

0800c874 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b086      	sub	sp, #24
 800c878:	af00      	add	r7, sp, #0
 800c87a:	60f8      	str	r0, [r7, #12]
 800c87c:	60b9      	str	r1, [r7, #8]
 800c87e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c880:	2300      	movs	r3, #0
 800c882:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c88a:	2b01      	cmp	r3, #1
 800c88c:	d101      	bne.n	800c892 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c88e:	2302      	movs	r3, #2
 800c890:	e0ff      	b.n	800ca92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	2201      	movs	r2, #1
 800c896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2b14      	cmp	r3, #20
 800c89e:	f200 80f0 	bhi.w	800ca82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c8a2:	a201      	add	r2, pc, #4	; (adr r2, 800c8a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c8a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8a8:	0800c8fd 	.word	0x0800c8fd
 800c8ac:	0800ca83 	.word	0x0800ca83
 800c8b0:	0800ca83 	.word	0x0800ca83
 800c8b4:	0800ca83 	.word	0x0800ca83
 800c8b8:	0800c93d 	.word	0x0800c93d
 800c8bc:	0800ca83 	.word	0x0800ca83
 800c8c0:	0800ca83 	.word	0x0800ca83
 800c8c4:	0800ca83 	.word	0x0800ca83
 800c8c8:	0800c97f 	.word	0x0800c97f
 800c8cc:	0800ca83 	.word	0x0800ca83
 800c8d0:	0800ca83 	.word	0x0800ca83
 800c8d4:	0800ca83 	.word	0x0800ca83
 800c8d8:	0800c9bf 	.word	0x0800c9bf
 800c8dc:	0800ca83 	.word	0x0800ca83
 800c8e0:	0800ca83 	.word	0x0800ca83
 800c8e4:	0800ca83 	.word	0x0800ca83
 800c8e8:	0800ca01 	.word	0x0800ca01
 800c8ec:	0800ca83 	.word	0x0800ca83
 800c8f0:	0800ca83 	.word	0x0800ca83
 800c8f4:	0800ca83 	.word	0x0800ca83
 800c8f8:	0800ca41 	.word	0x0800ca41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	68b9      	ldr	r1, [r7, #8]
 800c902:	4618      	mov	r0, r3
 800c904:	f000 fa90 	bl	800ce28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	699a      	ldr	r2, [r3, #24]
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f042 0208 	orr.w	r2, r2, #8
 800c916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	699a      	ldr	r2, [r3, #24]
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f022 0204 	bic.w	r2, r2, #4
 800c926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	6999      	ldr	r1, [r3, #24]
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	691a      	ldr	r2, [r3, #16]
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	430a      	orrs	r2, r1
 800c938:	619a      	str	r2, [r3, #24]
      break;
 800c93a:	e0a5      	b.n	800ca88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	68b9      	ldr	r1, [r7, #8]
 800c942:	4618      	mov	r0, r3
 800c944:	f000 fb00 	bl	800cf48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	699a      	ldr	r2, [r3, #24]
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c956:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	699a      	ldr	r2, [r3, #24]
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c966:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	6999      	ldr	r1, [r3, #24]
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	691b      	ldr	r3, [r3, #16]
 800c972:	021a      	lsls	r2, r3, #8
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	430a      	orrs	r2, r1
 800c97a:	619a      	str	r2, [r3, #24]
      break;
 800c97c:	e084      	b.n	800ca88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	68b9      	ldr	r1, [r7, #8]
 800c984:	4618      	mov	r0, r3
 800c986:	f000 fb69 	bl	800d05c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	69da      	ldr	r2, [r3, #28]
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f042 0208 	orr.w	r2, r2, #8
 800c998:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	69da      	ldr	r2, [r3, #28]
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f022 0204 	bic.w	r2, r2, #4
 800c9a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	69d9      	ldr	r1, [r3, #28]
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	691a      	ldr	r2, [r3, #16]
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	430a      	orrs	r2, r1
 800c9ba:	61da      	str	r2, [r3, #28]
      break;
 800c9bc:	e064      	b.n	800ca88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	68b9      	ldr	r1, [r7, #8]
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f000 fbd1 	bl	800d16c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	69da      	ldr	r2, [r3, #28]
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c9d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	69da      	ldr	r2, [r3, #28]
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c9e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	69d9      	ldr	r1, [r3, #28]
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	691b      	ldr	r3, [r3, #16]
 800c9f4:	021a      	lsls	r2, r3, #8
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	430a      	orrs	r2, r1
 800c9fc:	61da      	str	r2, [r3, #28]
      break;
 800c9fe:	e043      	b.n	800ca88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	68b9      	ldr	r1, [r7, #8]
 800ca06:	4618      	mov	r0, r3
 800ca08:	f000 fc1a 	bl	800d240 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f042 0208 	orr.w	r2, r2, #8
 800ca1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	f022 0204 	bic.w	r2, r2, #4
 800ca2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	691a      	ldr	r2, [r3, #16]
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	430a      	orrs	r2, r1
 800ca3c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ca3e:	e023      	b.n	800ca88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	68b9      	ldr	r1, [r7, #8]
 800ca46:	4618      	mov	r0, r3
 800ca48:	f000 fc5e 	bl	800d308 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ca5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ca6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	691b      	ldr	r3, [r3, #16]
 800ca76:	021a      	lsls	r2, r3, #8
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	430a      	orrs	r2, r1
 800ca7e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ca80:	e002      	b.n	800ca88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ca82:	2301      	movs	r3, #1
 800ca84:	75fb      	strb	r3, [r7, #23]
      break;
 800ca86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ca90:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3718      	adds	r7, #24
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}
 800ca9a:	bf00      	nop

0800ca9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b084      	sub	sp, #16
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800caa6:	2300      	movs	r3, #0
 800caa8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cab0:	2b01      	cmp	r3, #1
 800cab2:	d101      	bne.n	800cab8 <HAL_TIM_ConfigClockSource+0x1c>
 800cab4:	2302      	movs	r3, #2
 800cab6:	e0dc      	b.n	800cc72 <HAL_TIM_ConfigClockSource+0x1d6>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2201      	movs	r2, #1
 800cabc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2202      	movs	r2, #2
 800cac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	689b      	ldr	r3, [r3, #8]
 800cace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cad0:	68ba      	ldr	r2, [r7, #8]
 800cad2:	4b6a      	ldr	r3, [pc, #424]	; (800cc7c <HAL_TIM_ConfigClockSource+0x1e0>)
 800cad4:	4013      	ands	r3, r2
 800cad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cade:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	68ba      	ldr	r2, [r7, #8]
 800cae6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	4a64      	ldr	r2, [pc, #400]	; (800cc80 <HAL_TIM_ConfigClockSource+0x1e4>)
 800caee:	4293      	cmp	r3, r2
 800caf0:	f000 80a9 	beq.w	800cc46 <HAL_TIM_ConfigClockSource+0x1aa>
 800caf4:	4a62      	ldr	r2, [pc, #392]	; (800cc80 <HAL_TIM_ConfigClockSource+0x1e4>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	f200 80ae 	bhi.w	800cc58 <HAL_TIM_ConfigClockSource+0x1bc>
 800cafc:	4a61      	ldr	r2, [pc, #388]	; (800cc84 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	f000 80a1 	beq.w	800cc46 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb04:	4a5f      	ldr	r2, [pc, #380]	; (800cc84 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cb06:	4293      	cmp	r3, r2
 800cb08:	f200 80a6 	bhi.w	800cc58 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb0c:	4a5e      	ldr	r2, [pc, #376]	; (800cc88 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	f000 8099 	beq.w	800cc46 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb14:	4a5c      	ldr	r2, [pc, #368]	; (800cc88 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cb16:	4293      	cmp	r3, r2
 800cb18:	f200 809e 	bhi.w	800cc58 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb1c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cb20:	f000 8091 	beq.w	800cc46 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb24:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800cb28:	f200 8096 	bhi.w	800cc58 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb30:	f000 8089 	beq.w	800cc46 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cb38:	f200 808e 	bhi.w	800cc58 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb40:	d03e      	beq.n	800cbc0 <HAL_TIM_ConfigClockSource+0x124>
 800cb42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb46:	f200 8087 	bhi.w	800cc58 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb4e:	f000 8086 	beq.w	800cc5e <HAL_TIM_ConfigClockSource+0x1c2>
 800cb52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cb56:	d87f      	bhi.n	800cc58 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb58:	2b70      	cmp	r3, #112	; 0x70
 800cb5a:	d01a      	beq.n	800cb92 <HAL_TIM_ConfigClockSource+0xf6>
 800cb5c:	2b70      	cmp	r3, #112	; 0x70
 800cb5e:	d87b      	bhi.n	800cc58 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb60:	2b60      	cmp	r3, #96	; 0x60
 800cb62:	d050      	beq.n	800cc06 <HAL_TIM_ConfigClockSource+0x16a>
 800cb64:	2b60      	cmp	r3, #96	; 0x60
 800cb66:	d877      	bhi.n	800cc58 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb68:	2b50      	cmp	r3, #80	; 0x50
 800cb6a:	d03c      	beq.n	800cbe6 <HAL_TIM_ConfigClockSource+0x14a>
 800cb6c:	2b50      	cmp	r3, #80	; 0x50
 800cb6e:	d873      	bhi.n	800cc58 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb70:	2b40      	cmp	r3, #64	; 0x40
 800cb72:	d058      	beq.n	800cc26 <HAL_TIM_ConfigClockSource+0x18a>
 800cb74:	2b40      	cmp	r3, #64	; 0x40
 800cb76:	d86f      	bhi.n	800cc58 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb78:	2b30      	cmp	r3, #48	; 0x30
 800cb7a:	d064      	beq.n	800cc46 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb7c:	2b30      	cmp	r3, #48	; 0x30
 800cb7e:	d86b      	bhi.n	800cc58 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb80:	2b20      	cmp	r3, #32
 800cb82:	d060      	beq.n	800cc46 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb84:	2b20      	cmp	r3, #32
 800cb86:	d867      	bhi.n	800cc58 <HAL_TIM_ConfigClockSource+0x1bc>
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d05c      	beq.n	800cc46 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb8c:	2b10      	cmp	r3, #16
 800cb8e:	d05a      	beq.n	800cc46 <HAL_TIM_ConfigClockSource+0x1aa>
 800cb90:	e062      	b.n	800cc58 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6818      	ldr	r0, [r3, #0]
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	6899      	ldr	r1, [r3, #8]
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	685a      	ldr	r2, [r3, #4]
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	68db      	ldr	r3, [r3, #12]
 800cba2:	f000 fc95 	bl	800d4d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	689b      	ldr	r3, [r3, #8]
 800cbac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cbb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	68ba      	ldr	r2, [r7, #8]
 800cbbc:	609a      	str	r2, [r3, #8]
      break;
 800cbbe:	e04f      	b.n	800cc60 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6818      	ldr	r0, [r3, #0]
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	6899      	ldr	r1, [r3, #8]
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	685a      	ldr	r2, [r3, #4]
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	68db      	ldr	r3, [r3, #12]
 800cbd0:	f000 fc7e 	bl	800d4d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	689a      	ldr	r2, [r3, #8]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cbe2:	609a      	str	r2, [r3, #8]
      break;
 800cbe4:	e03c      	b.n	800cc60 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6818      	ldr	r0, [r3, #0]
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	6859      	ldr	r1, [r3, #4]
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	68db      	ldr	r3, [r3, #12]
 800cbf2:	461a      	mov	r2, r3
 800cbf4:	f000 fbee 	bl	800d3d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	2150      	movs	r1, #80	; 0x50
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f000 fc48 	bl	800d494 <TIM_ITRx_SetConfig>
      break;
 800cc04:	e02c      	b.n	800cc60 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6818      	ldr	r0, [r3, #0]
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	6859      	ldr	r1, [r3, #4]
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	68db      	ldr	r3, [r3, #12]
 800cc12:	461a      	mov	r2, r3
 800cc14:	f000 fc0d 	bl	800d432 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	2160      	movs	r1, #96	; 0x60
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f000 fc38 	bl	800d494 <TIM_ITRx_SetConfig>
      break;
 800cc24:	e01c      	b.n	800cc60 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6818      	ldr	r0, [r3, #0]
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	6859      	ldr	r1, [r3, #4]
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	68db      	ldr	r3, [r3, #12]
 800cc32:	461a      	mov	r2, r3
 800cc34:	f000 fbce 	bl	800d3d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	2140      	movs	r1, #64	; 0x40
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f000 fc28 	bl	800d494 <TIM_ITRx_SetConfig>
      break;
 800cc44:	e00c      	b.n	800cc60 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681a      	ldr	r2, [r3, #0]
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	4619      	mov	r1, r3
 800cc50:	4610      	mov	r0, r2
 800cc52:	f000 fc1f 	bl	800d494 <TIM_ITRx_SetConfig>
      break;
 800cc56:	e003      	b.n	800cc60 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800cc58:	2301      	movs	r3, #1
 800cc5a:	73fb      	strb	r3, [r7, #15]
      break;
 800cc5c:	e000      	b.n	800cc60 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800cc5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2201      	movs	r2, #1
 800cc64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cc70:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3710      	adds	r7, #16
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
 800cc7a:	bf00      	nop
 800cc7c:	ffceff88 	.word	0xffceff88
 800cc80:	00100040 	.word	0x00100040
 800cc84:	00100030 	.word	0x00100030
 800cc88:	00100020 	.word	0x00100020

0800cc8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b083      	sub	sp, #12
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cc94:	bf00      	nop
 800cc96:	370c      	adds	r7, #12
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cca0:	b480      	push	{r7}
 800cca2:	b083      	sub	sp, #12
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cca8:	bf00      	nop
 800ccaa:	370c      	adds	r7, #12
 800ccac:	46bd      	mov	sp, r7
 800ccae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb2:	4770      	bx	lr

0800ccb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b083      	sub	sp, #12
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ccbc:	bf00      	nop
 800ccbe:	370c      	adds	r7, #12
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc6:	4770      	bx	lr

0800ccc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b083      	sub	sp, #12
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ccd0:	bf00      	nop
 800ccd2:	370c      	adds	r7, #12
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr

0800ccdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ccdc:	b480      	push	{r7}
 800ccde:	b085      	sub	sp, #20
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
 800cce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	4a44      	ldr	r2, [pc, #272]	; (800ce00 <TIM_Base_SetConfig+0x124>)
 800ccf0:	4293      	cmp	r3, r2
 800ccf2:	d013      	beq.n	800cd1c <TIM_Base_SetConfig+0x40>
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ccfa:	d00f      	beq.n	800cd1c <TIM_Base_SetConfig+0x40>
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	4a41      	ldr	r2, [pc, #260]	; (800ce04 <TIM_Base_SetConfig+0x128>)
 800cd00:	4293      	cmp	r3, r2
 800cd02:	d00b      	beq.n	800cd1c <TIM_Base_SetConfig+0x40>
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	4a40      	ldr	r2, [pc, #256]	; (800ce08 <TIM_Base_SetConfig+0x12c>)
 800cd08:	4293      	cmp	r3, r2
 800cd0a:	d007      	beq.n	800cd1c <TIM_Base_SetConfig+0x40>
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	4a3f      	ldr	r2, [pc, #252]	; (800ce0c <TIM_Base_SetConfig+0x130>)
 800cd10:	4293      	cmp	r3, r2
 800cd12:	d003      	beq.n	800cd1c <TIM_Base_SetConfig+0x40>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	4a3e      	ldr	r2, [pc, #248]	; (800ce10 <TIM_Base_SetConfig+0x134>)
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d108      	bne.n	800cd2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	685b      	ldr	r3, [r3, #4]
 800cd28:	68fa      	ldr	r2, [r7, #12]
 800cd2a:	4313      	orrs	r3, r2
 800cd2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	4a33      	ldr	r2, [pc, #204]	; (800ce00 <TIM_Base_SetConfig+0x124>)
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d027      	beq.n	800cd86 <TIM_Base_SetConfig+0xaa>
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd3c:	d023      	beq.n	800cd86 <TIM_Base_SetConfig+0xaa>
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	4a30      	ldr	r2, [pc, #192]	; (800ce04 <TIM_Base_SetConfig+0x128>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d01f      	beq.n	800cd86 <TIM_Base_SetConfig+0xaa>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	4a2f      	ldr	r2, [pc, #188]	; (800ce08 <TIM_Base_SetConfig+0x12c>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d01b      	beq.n	800cd86 <TIM_Base_SetConfig+0xaa>
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	4a2e      	ldr	r2, [pc, #184]	; (800ce0c <TIM_Base_SetConfig+0x130>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d017      	beq.n	800cd86 <TIM_Base_SetConfig+0xaa>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	4a2d      	ldr	r2, [pc, #180]	; (800ce10 <TIM_Base_SetConfig+0x134>)
 800cd5a:	4293      	cmp	r3, r2
 800cd5c:	d013      	beq.n	800cd86 <TIM_Base_SetConfig+0xaa>
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	4a2c      	ldr	r2, [pc, #176]	; (800ce14 <TIM_Base_SetConfig+0x138>)
 800cd62:	4293      	cmp	r3, r2
 800cd64:	d00f      	beq.n	800cd86 <TIM_Base_SetConfig+0xaa>
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	4a2b      	ldr	r2, [pc, #172]	; (800ce18 <TIM_Base_SetConfig+0x13c>)
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d00b      	beq.n	800cd86 <TIM_Base_SetConfig+0xaa>
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	4a2a      	ldr	r2, [pc, #168]	; (800ce1c <TIM_Base_SetConfig+0x140>)
 800cd72:	4293      	cmp	r3, r2
 800cd74:	d007      	beq.n	800cd86 <TIM_Base_SetConfig+0xaa>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	4a29      	ldr	r2, [pc, #164]	; (800ce20 <TIM_Base_SetConfig+0x144>)
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	d003      	beq.n	800cd86 <TIM_Base_SetConfig+0xaa>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	4a28      	ldr	r2, [pc, #160]	; (800ce24 <TIM_Base_SetConfig+0x148>)
 800cd82:	4293      	cmp	r3, r2
 800cd84:	d108      	bne.n	800cd98 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	68db      	ldr	r3, [r3, #12]
 800cd92:	68fa      	ldr	r2, [r7, #12]
 800cd94:	4313      	orrs	r3, r2
 800cd96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	695b      	ldr	r3, [r3, #20]
 800cda2:	4313      	orrs	r3, r2
 800cda4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	68fa      	ldr	r2, [r7, #12]
 800cdaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	689a      	ldr	r2, [r3, #8]
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	681a      	ldr	r2, [r3, #0]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	4a10      	ldr	r2, [pc, #64]	; (800ce00 <TIM_Base_SetConfig+0x124>)
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	d00f      	beq.n	800cde4 <TIM_Base_SetConfig+0x108>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	4a12      	ldr	r2, [pc, #72]	; (800ce10 <TIM_Base_SetConfig+0x134>)
 800cdc8:	4293      	cmp	r3, r2
 800cdca:	d00b      	beq.n	800cde4 <TIM_Base_SetConfig+0x108>
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	4a11      	ldr	r2, [pc, #68]	; (800ce14 <TIM_Base_SetConfig+0x138>)
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	d007      	beq.n	800cde4 <TIM_Base_SetConfig+0x108>
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	4a10      	ldr	r2, [pc, #64]	; (800ce18 <TIM_Base_SetConfig+0x13c>)
 800cdd8:	4293      	cmp	r3, r2
 800cdda:	d003      	beq.n	800cde4 <TIM_Base_SetConfig+0x108>
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	4a0f      	ldr	r2, [pc, #60]	; (800ce1c <TIM_Base_SetConfig+0x140>)
 800cde0:	4293      	cmp	r3, r2
 800cde2:	d103      	bne.n	800cdec <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	691a      	ldr	r2, [r3, #16]
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2201      	movs	r2, #1
 800cdf0:	615a      	str	r2, [r3, #20]
}
 800cdf2:	bf00      	nop
 800cdf4:	3714      	adds	r7, #20
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfc:	4770      	bx	lr
 800cdfe:	bf00      	nop
 800ce00:	40010000 	.word	0x40010000
 800ce04:	40000400 	.word	0x40000400
 800ce08:	40000800 	.word	0x40000800
 800ce0c:	40000c00 	.word	0x40000c00
 800ce10:	40010400 	.word	0x40010400
 800ce14:	40014000 	.word	0x40014000
 800ce18:	40014400 	.word	0x40014400
 800ce1c:	40014800 	.word	0x40014800
 800ce20:	4000e000 	.word	0x4000e000
 800ce24:	4000e400 	.word	0x4000e400

0800ce28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ce28:	b480      	push	{r7}
 800ce2a:	b087      	sub	sp, #28
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6a1b      	ldr	r3, [r3, #32]
 800ce36:	f023 0201 	bic.w	r2, r3, #1
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6a1b      	ldr	r3, [r3, #32]
 800ce42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	685b      	ldr	r3, [r3, #4]
 800ce48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	699b      	ldr	r3, [r3, #24]
 800ce4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ce50:	68fa      	ldr	r2, [r7, #12]
 800ce52:	4b37      	ldr	r3, [pc, #220]	; (800cf30 <TIM_OC1_SetConfig+0x108>)
 800ce54:	4013      	ands	r3, r2
 800ce56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	f023 0303 	bic.w	r3, r3, #3
 800ce5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	68fa      	ldr	r2, [r7, #12]
 800ce66:	4313      	orrs	r3, r2
 800ce68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	f023 0302 	bic.w	r3, r3, #2
 800ce70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	689b      	ldr	r3, [r3, #8]
 800ce76:	697a      	ldr	r2, [r7, #20]
 800ce78:	4313      	orrs	r3, r2
 800ce7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	4a2d      	ldr	r2, [pc, #180]	; (800cf34 <TIM_OC1_SetConfig+0x10c>)
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d00f      	beq.n	800cea4 <TIM_OC1_SetConfig+0x7c>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	4a2c      	ldr	r2, [pc, #176]	; (800cf38 <TIM_OC1_SetConfig+0x110>)
 800ce88:	4293      	cmp	r3, r2
 800ce8a:	d00b      	beq.n	800cea4 <TIM_OC1_SetConfig+0x7c>
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	4a2b      	ldr	r2, [pc, #172]	; (800cf3c <TIM_OC1_SetConfig+0x114>)
 800ce90:	4293      	cmp	r3, r2
 800ce92:	d007      	beq.n	800cea4 <TIM_OC1_SetConfig+0x7c>
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	4a2a      	ldr	r2, [pc, #168]	; (800cf40 <TIM_OC1_SetConfig+0x118>)
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	d003      	beq.n	800cea4 <TIM_OC1_SetConfig+0x7c>
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	4a29      	ldr	r2, [pc, #164]	; (800cf44 <TIM_OC1_SetConfig+0x11c>)
 800cea0:	4293      	cmp	r3, r2
 800cea2:	d10c      	bne.n	800cebe <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cea4:	697b      	ldr	r3, [r7, #20]
 800cea6:	f023 0308 	bic.w	r3, r3, #8
 800ceaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	68db      	ldr	r3, [r3, #12]
 800ceb0:	697a      	ldr	r2, [r7, #20]
 800ceb2:	4313      	orrs	r3, r2
 800ceb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	f023 0304 	bic.w	r3, r3, #4
 800cebc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	4a1c      	ldr	r2, [pc, #112]	; (800cf34 <TIM_OC1_SetConfig+0x10c>)
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d00f      	beq.n	800cee6 <TIM_OC1_SetConfig+0xbe>
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	4a1b      	ldr	r2, [pc, #108]	; (800cf38 <TIM_OC1_SetConfig+0x110>)
 800ceca:	4293      	cmp	r3, r2
 800cecc:	d00b      	beq.n	800cee6 <TIM_OC1_SetConfig+0xbe>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	4a1a      	ldr	r2, [pc, #104]	; (800cf3c <TIM_OC1_SetConfig+0x114>)
 800ced2:	4293      	cmp	r3, r2
 800ced4:	d007      	beq.n	800cee6 <TIM_OC1_SetConfig+0xbe>
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	4a19      	ldr	r2, [pc, #100]	; (800cf40 <TIM_OC1_SetConfig+0x118>)
 800ceda:	4293      	cmp	r3, r2
 800cedc:	d003      	beq.n	800cee6 <TIM_OC1_SetConfig+0xbe>
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	4a18      	ldr	r2, [pc, #96]	; (800cf44 <TIM_OC1_SetConfig+0x11c>)
 800cee2:	4293      	cmp	r3, r2
 800cee4:	d111      	bne.n	800cf0a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ceec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cef4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	695b      	ldr	r3, [r3, #20]
 800cefa:	693a      	ldr	r2, [r7, #16]
 800cefc:	4313      	orrs	r3, r2
 800cefe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	699b      	ldr	r3, [r3, #24]
 800cf04:	693a      	ldr	r2, [r7, #16]
 800cf06:	4313      	orrs	r3, r2
 800cf08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	693a      	ldr	r2, [r7, #16]
 800cf0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	68fa      	ldr	r2, [r7, #12]
 800cf14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	685a      	ldr	r2, [r3, #4]
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	697a      	ldr	r2, [r7, #20]
 800cf22:	621a      	str	r2, [r3, #32]
}
 800cf24:	bf00      	nop
 800cf26:	371c      	adds	r7, #28
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2e:	4770      	bx	lr
 800cf30:	fffeff8f 	.word	0xfffeff8f
 800cf34:	40010000 	.word	0x40010000
 800cf38:	40010400 	.word	0x40010400
 800cf3c:	40014000 	.word	0x40014000
 800cf40:	40014400 	.word	0x40014400
 800cf44:	40014800 	.word	0x40014800

0800cf48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cf48:	b480      	push	{r7}
 800cf4a:	b087      	sub	sp, #28
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6a1b      	ldr	r3, [r3, #32]
 800cf56:	f023 0210 	bic.w	r2, r3, #16
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	6a1b      	ldr	r3, [r3, #32]
 800cf62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	685b      	ldr	r3, [r3, #4]
 800cf68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	699b      	ldr	r3, [r3, #24]
 800cf6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cf70:	68fa      	ldr	r2, [r7, #12]
 800cf72:	4b34      	ldr	r3, [pc, #208]	; (800d044 <TIM_OC2_SetConfig+0xfc>)
 800cf74:	4013      	ands	r3, r2
 800cf76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cf80:	683b      	ldr	r3, [r7, #0]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	021b      	lsls	r3, r3, #8
 800cf86:	68fa      	ldr	r2, [r7, #12]
 800cf88:	4313      	orrs	r3, r2
 800cf8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	f023 0320 	bic.w	r3, r3, #32
 800cf92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	689b      	ldr	r3, [r3, #8]
 800cf98:	011b      	lsls	r3, r3, #4
 800cf9a:	697a      	ldr	r2, [r7, #20]
 800cf9c:	4313      	orrs	r3, r2
 800cf9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	4a29      	ldr	r2, [pc, #164]	; (800d048 <TIM_OC2_SetConfig+0x100>)
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	d003      	beq.n	800cfb0 <TIM_OC2_SetConfig+0x68>
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	4a28      	ldr	r2, [pc, #160]	; (800d04c <TIM_OC2_SetConfig+0x104>)
 800cfac:	4293      	cmp	r3, r2
 800cfae:	d10d      	bne.n	800cfcc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cfb0:	697b      	ldr	r3, [r7, #20]
 800cfb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cfb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	68db      	ldr	r3, [r3, #12]
 800cfbc:	011b      	lsls	r3, r3, #4
 800cfbe:	697a      	ldr	r2, [r7, #20]
 800cfc0:	4313      	orrs	r3, r2
 800cfc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cfca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	4a1e      	ldr	r2, [pc, #120]	; (800d048 <TIM_OC2_SetConfig+0x100>)
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	d00f      	beq.n	800cff4 <TIM_OC2_SetConfig+0xac>
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	4a1d      	ldr	r2, [pc, #116]	; (800d04c <TIM_OC2_SetConfig+0x104>)
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	d00b      	beq.n	800cff4 <TIM_OC2_SetConfig+0xac>
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	4a1c      	ldr	r2, [pc, #112]	; (800d050 <TIM_OC2_SetConfig+0x108>)
 800cfe0:	4293      	cmp	r3, r2
 800cfe2:	d007      	beq.n	800cff4 <TIM_OC2_SetConfig+0xac>
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	4a1b      	ldr	r2, [pc, #108]	; (800d054 <TIM_OC2_SetConfig+0x10c>)
 800cfe8:	4293      	cmp	r3, r2
 800cfea:	d003      	beq.n	800cff4 <TIM_OC2_SetConfig+0xac>
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	4a1a      	ldr	r2, [pc, #104]	; (800d058 <TIM_OC2_SetConfig+0x110>)
 800cff0:	4293      	cmp	r3, r2
 800cff2:	d113      	bne.n	800d01c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cffa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d002:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	695b      	ldr	r3, [r3, #20]
 800d008:	009b      	lsls	r3, r3, #2
 800d00a:	693a      	ldr	r2, [r7, #16]
 800d00c:	4313      	orrs	r3, r2
 800d00e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d010:	683b      	ldr	r3, [r7, #0]
 800d012:	699b      	ldr	r3, [r3, #24]
 800d014:	009b      	lsls	r3, r3, #2
 800d016:	693a      	ldr	r2, [r7, #16]
 800d018:	4313      	orrs	r3, r2
 800d01a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	693a      	ldr	r2, [r7, #16]
 800d020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	68fa      	ldr	r2, [r7, #12]
 800d026:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	685a      	ldr	r2, [r3, #4]
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	697a      	ldr	r2, [r7, #20]
 800d034:	621a      	str	r2, [r3, #32]
}
 800d036:	bf00      	nop
 800d038:	371c      	adds	r7, #28
 800d03a:	46bd      	mov	sp, r7
 800d03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d040:	4770      	bx	lr
 800d042:	bf00      	nop
 800d044:	feff8fff 	.word	0xfeff8fff
 800d048:	40010000 	.word	0x40010000
 800d04c:	40010400 	.word	0x40010400
 800d050:	40014000 	.word	0x40014000
 800d054:	40014400 	.word	0x40014400
 800d058:	40014800 	.word	0x40014800

0800d05c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b087      	sub	sp, #28
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6a1b      	ldr	r3, [r3, #32]
 800d06a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6a1b      	ldr	r3, [r3, #32]
 800d076:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	685b      	ldr	r3, [r3, #4]
 800d07c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	69db      	ldr	r3, [r3, #28]
 800d082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d084:	68fa      	ldr	r2, [r7, #12]
 800d086:	4b33      	ldr	r3, [pc, #204]	; (800d154 <TIM_OC3_SetConfig+0xf8>)
 800d088:	4013      	ands	r3, r2
 800d08a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	f023 0303 	bic.w	r3, r3, #3
 800d092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	68fa      	ldr	r2, [r7, #12]
 800d09a:	4313      	orrs	r3, r2
 800d09c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d0a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	689b      	ldr	r3, [r3, #8]
 800d0aa:	021b      	lsls	r3, r3, #8
 800d0ac:	697a      	ldr	r2, [r7, #20]
 800d0ae:	4313      	orrs	r3, r2
 800d0b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	4a28      	ldr	r2, [pc, #160]	; (800d158 <TIM_OC3_SetConfig+0xfc>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d003      	beq.n	800d0c2 <TIM_OC3_SetConfig+0x66>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	4a27      	ldr	r2, [pc, #156]	; (800d15c <TIM_OC3_SetConfig+0x100>)
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	d10d      	bne.n	800d0de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d0c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	68db      	ldr	r3, [r3, #12]
 800d0ce:	021b      	lsls	r3, r3, #8
 800d0d0:	697a      	ldr	r2, [r7, #20]
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d0dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	4a1d      	ldr	r2, [pc, #116]	; (800d158 <TIM_OC3_SetConfig+0xfc>)
 800d0e2:	4293      	cmp	r3, r2
 800d0e4:	d00f      	beq.n	800d106 <TIM_OC3_SetConfig+0xaa>
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	4a1c      	ldr	r2, [pc, #112]	; (800d15c <TIM_OC3_SetConfig+0x100>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d00b      	beq.n	800d106 <TIM_OC3_SetConfig+0xaa>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	4a1b      	ldr	r2, [pc, #108]	; (800d160 <TIM_OC3_SetConfig+0x104>)
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	d007      	beq.n	800d106 <TIM_OC3_SetConfig+0xaa>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	4a1a      	ldr	r2, [pc, #104]	; (800d164 <TIM_OC3_SetConfig+0x108>)
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	d003      	beq.n	800d106 <TIM_OC3_SetConfig+0xaa>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	4a19      	ldr	r2, [pc, #100]	; (800d168 <TIM_OC3_SetConfig+0x10c>)
 800d102:	4293      	cmp	r3, r2
 800d104:	d113      	bne.n	800d12e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d106:	693b      	ldr	r3, [r7, #16]
 800d108:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d10c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d10e:	693b      	ldr	r3, [r7, #16]
 800d110:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d114:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	695b      	ldr	r3, [r3, #20]
 800d11a:	011b      	lsls	r3, r3, #4
 800d11c:	693a      	ldr	r2, [r7, #16]
 800d11e:	4313      	orrs	r3, r2
 800d120:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	699b      	ldr	r3, [r3, #24]
 800d126:	011b      	lsls	r3, r3, #4
 800d128:	693a      	ldr	r2, [r7, #16]
 800d12a:	4313      	orrs	r3, r2
 800d12c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	693a      	ldr	r2, [r7, #16]
 800d132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	68fa      	ldr	r2, [r7, #12]
 800d138:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	685a      	ldr	r2, [r3, #4]
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	697a      	ldr	r2, [r7, #20]
 800d146:	621a      	str	r2, [r3, #32]
}
 800d148:	bf00      	nop
 800d14a:	371c      	adds	r7, #28
 800d14c:	46bd      	mov	sp, r7
 800d14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d152:	4770      	bx	lr
 800d154:	fffeff8f 	.word	0xfffeff8f
 800d158:	40010000 	.word	0x40010000
 800d15c:	40010400 	.word	0x40010400
 800d160:	40014000 	.word	0x40014000
 800d164:	40014400 	.word	0x40014400
 800d168:	40014800 	.word	0x40014800

0800d16c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d16c:	b480      	push	{r7}
 800d16e:	b087      	sub	sp, #28
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6a1b      	ldr	r3, [r3, #32]
 800d17a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	6a1b      	ldr	r3, [r3, #32]
 800d186:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	685b      	ldr	r3, [r3, #4]
 800d18c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	69db      	ldr	r3, [r3, #28]
 800d192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d194:	68fa      	ldr	r2, [r7, #12]
 800d196:	4b24      	ldr	r3, [pc, #144]	; (800d228 <TIM_OC4_SetConfig+0xbc>)
 800d198:	4013      	ands	r3, r2
 800d19a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d1a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	021b      	lsls	r3, r3, #8
 800d1aa:	68fa      	ldr	r2, [r7, #12]
 800d1ac:	4313      	orrs	r3, r2
 800d1ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d1b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	689b      	ldr	r3, [r3, #8]
 800d1bc:	031b      	lsls	r3, r3, #12
 800d1be:	693a      	ldr	r2, [r7, #16]
 800d1c0:	4313      	orrs	r3, r2
 800d1c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	4a19      	ldr	r2, [pc, #100]	; (800d22c <TIM_OC4_SetConfig+0xc0>)
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d00f      	beq.n	800d1ec <TIM_OC4_SetConfig+0x80>
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	4a18      	ldr	r2, [pc, #96]	; (800d230 <TIM_OC4_SetConfig+0xc4>)
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	d00b      	beq.n	800d1ec <TIM_OC4_SetConfig+0x80>
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	4a17      	ldr	r2, [pc, #92]	; (800d234 <TIM_OC4_SetConfig+0xc8>)
 800d1d8:	4293      	cmp	r3, r2
 800d1da:	d007      	beq.n	800d1ec <TIM_OC4_SetConfig+0x80>
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	4a16      	ldr	r2, [pc, #88]	; (800d238 <TIM_OC4_SetConfig+0xcc>)
 800d1e0:	4293      	cmp	r3, r2
 800d1e2:	d003      	beq.n	800d1ec <TIM_OC4_SetConfig+0x80>
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	4a15      	ldr	r2, [pc, #84]	; (800d23c <TIM_OC4_SetConfig+0xd0>)
 800d1e8:	4293      	cmp	r3, r2
 800d1ea:	d109      	bne.n	800d200 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d1f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	695b      	ldr	r3, [r3, #20]
 800d1f8:	019b      	lsls	r3, r3, #6
 800d1fa:	697a      	ldr	r2, [r7, #20]
 800d1fc:	4313      	orrs	r3, r2
 800d1fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	697a      	ldr	r2, [r7, #20]
 800d204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	68fa      	ldr	r2, [r7, #12]
 800d20a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	685a      	ldr	r2, [r3, #4]
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	693a      	ldr	r2, [r7, #16]
 800d218:	621a      	str	r2, [r3, #32]
}
 800d21a:	bf00      	nop
 800d21c:	371c      	adds	r7, #28
 800d21e:	46bd      	mov	sp, r7
 800d220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d224:	4770      	bx	lr
 800d226:	bf00      	nop
 800d228:	feff8fff 	.word	0xfeff8fff
 800d22c:	40010000 	.word	0x40010000
 800d230:	40010400 	.word	0x40010400
 800d234:	40014000 	.word	0x40014000
 800d238:	40014400 	.word	0x40014400
 800d23c:	40014800 	.word	0x40014800

0800d240 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d240:	b480      	push	{r7}
 800d242:	b087      	sub	sp, #28
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6a1b      	ldr	r3, [r3, #32]
 800d24e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	6a1b      	ldr	r3, [r3, #32]
 800d25a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	685b      	ldr	r3, [r3, #4]
 800d260:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d268:	68fa      	ldr	r2, [r7, #12]
 800d26a:	4b21      	ldr	r3, [pc, #132]	; (800d2f0 <TIM_OC5_SetConfig+0xb0>)
 800d26c:	4013      	ands	r3, r2
 800d26e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	68fa      	ldr	r2, [r7, #12]
 800d276:	4313      	orrs	r3, r2
 800d278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800d280:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	689b      	ldr	r3, [r3, #8]
 800d286:	041b      	lsls	r3, r3, #16
 800d288:	693a      	ldr	r2, [r7, #16]
 800d28a:	4313      	orrs	r3, r2
 800d28c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	4a18      	ldr	r2, [pc, #96]	; (800d2f4 <TIM_OC5_SetConfig+0xb4>)
 800d292:	4293      	cmp	r3, r2
 800d294:	d00f      	beq.n	800d2b6 <TIM_OC5_SetConfig+0x76>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	4a17      	ldr	r2, [pc, #92]	; (800d2f8 <TIM_OC5_SetConfig+0xb8>)
 800d29a:	4293      	cmp	r3, r2
 800d29c:	d00b      	beq.n	800d2b6 <TIM_OC5_SetConfig+0x76>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	4a16      	ldr	r2, [pc, #88]	; (800d2fc <TIM_OC5_SetConfig+0xbc>)
 800d2a2:	4293      	cmp	r3, r2
 800d2a4:	d007      	beq.n	800d2b6 <TIM_OC5_SetConfig+0x76>
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	4a15      	ldr	r2, [pc, #84]	; (800d300 <TIM_OC5_SetConfig+0xc0>)
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d003      	beq.n	800d2b6 <TIM_OC5_SetConfig+0x76>
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	4a14      	ldr	r2, [pc, #80]	; (800d304 <TIM_OC5_SetConfig+0xc4>)
 800d2b2:	4293      	cmp	r3, r2
 800d2b4:	d109      	bne.n	800d2ca <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d2bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	695b      	ldr	r3, [r3, #20]
 800d2c2:	021b      	lsls	r3, r3, #8
 800d2c4:	697a      	ldr	r2, [r7, #20]
 800d2c6:	4313      	orrs	r3, r2
 800d2c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	697a      	ldr	r2, [r7, #20]
 800d2ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	68fa      	ldr	r2, [r7, #12]
 800d2d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	685a      	ldr	r2, [r3, #4]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	693a      	ldr	r2, [r7, #16]
 800d2e2:	621a      	str	r2, [r3, #32]
}
 800d2e4:	bf00      	nop
 800d2e6:	371c      	adds	r7, #28
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ee:	4770      	bx	lr
 800d2f0:	fffeff8f 	.word	0xfffeff8f
 800d2f4:	40010000 	.word	0x40010000
 800d2f8:	40010400 	.word	0x40010400
 800d2fc:	40014000 	.word	0x40014000
 800d300:	40014400 	.word	0x40014400
 800d304:	40014800 	.word	0x40014800

0800d308 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d308:	b480      	push	{r7}
 800d30a:	b087      	sub	sp, #28
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6a1b      	ldr	r3, [r3, #32]
 800d316:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6a1b      	ldr	r3, [r3, #32]
 800d322:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d32e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d330:	68fa      	ldr	r2, [r7, #12]
 800d332:	4b22      	ldr	r3, [pc, #136]	; (800d3bc <TIM_OC6_SetConfig+0xb4>)
 800d334:	4013      	ands	r3, r2
 800d336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	021b      	lsls	r3, r3, #8
 800d33e:	68fa      	ldr	r2, [r7, #12]
 800d340:	4313      	orrs	r3, r2
 800d342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d34a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	689b      	ldr	r3, [r3, #8]
 800d350:	051b      	lsls	r3, r3, #20
 800d352:	693a      	ldr	r2, [r7, #16]
 800d354:	4313      	orrs	r3, r2
 800d356:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	4a19      	ldr	r2, [pc, #100]	; (800d3c0 <TIM_OC6_SetConfig+0xb8>)
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d00f      	beq.n	800d380 <TIM_OC6_SetConfig+0x78>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	4a18      	ldr	r2, [pc, #96]	; (800d3c4 <TIM_OC6_SetConfig+0xbc>)
 800d364:	4293      	cmp	r3, r2
 800d366:	d00b      	beq.n	800d380 <TIM_OC6_SetConfig+0x78>
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	4a17      	ldr	r2, [pc, #92]	; (800d3c8 <TIM_OC6_SetConfig+0xc0>)
 800d36c:	4293      	cmp	r3, r2
 800d36e:	d007      	beq.n	800d380 <TIM_OC6_SetConfig+0x78>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	4a16      	ldr	r2, [pc, #88]	; (800d3cc <TIM_OC6_SetConfig+0xc4>)
 800d374:	4293      	cmp	r3, r2
 800d376:	d003      	beq.n	800d380 <TIM_OC6_SetConfig+0x78>
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	4a15      	ldr	r2, [pc, #84]	; (800d3d0 <TIM_OC6_SetConfig+0xc8>)
 800d37c:	4293      	cmp	r3, r2
 800d37e:	d109      	bne.n	800d394 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d386:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	695b      	ldr	r3, [r3, #20]
 800d38c:	029b      	lsls	r3, r3, #10
 800d38e:	697a      	ldr	r2, [r7, #20]
 800d390:	4313      	orrs	r3, r2
 800d392:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	697a      	ldr	r2, [r7, #20]
 800d398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	68fa      	ldr	r2, [r7, #12]
 800d39e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	685a      	ldr	r2, [r3, #4]
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	693a      	ldr	r2, [r7, #16]
 800d3ac:	621a      	str	r2, [r3, #32]
}
 800d3ae:	bf00      	nop
 800d3b0:	371c      	adds	r7, #28
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b8:	4770      	bx	lr
 800d3ba:	bf00      	nop
 800d3bc:	feff8fff 	.word	0xfeff8fff
 800d3c0:	40010000 	.word	0x40010000
 800d3c4:	40010400 	.word	0x40010400
 800d3c8:	40014000 	.word	0x40014000
 800d3cc:	40014400 	.word	0x40014400
 800d3d0:	40014800 	.word	0x40014800

0800d3d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b087      	sub	sp, #28
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	60f8      	str	r0, [r7, #12]
 800d3dc:	60b9      	str	r1, [r7, #8]
 800d3de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	6a1b      	ldr	r3, [r3, #32]
 800d3e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	6a1b      	ldr	r3, [r3, #32]
 800d3ea:	f023 0201 	bic.w	r2, r3, #1
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	699b      	ldr	r3, [r3, #24]
 800d3f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d3fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	011b      	lsls	r3, r3, #4
 800d404:	693a      	ldr	r2, [r7, #16]
 800d406:	4313      	orrs	r3, r2
 800d408:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	f023 030a 	bic.w	r3, r3, #10
 800d410:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d412:	697a      	ldr	r2, [r7, #20]
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	4313      	orrs	r3, r2
 800d418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	693a      	ldr	r2, [r7, #16]
 800d41e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	697a      	ldr	r2, [r7, #20]
 800d424:	621a      	str	r2, [r3, #32]
}
 800d426:	bf00      	nop
 800d428:	371c      	adds	r7, #28
 800d42a:	46bd      	mov	sp, r7
 800d42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d430:	4770      	bx	lr

0800d432 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d432:	b480      	push	{r7}
 800d434:	b087      	sub	sp, #28
 800d436:	af00      	add	r7, sp, #0
 800d438:	60f8      	str	r0, [r7, #12]
 800d43a:	60b9      	str	r1, [r7, #8]
 800d43c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	6a1b      	ldr	r3, [r3, #32]
 800d442:	f023 0210 	bic.w	r2, r3, #16
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	699b      	ldr	r3, [r3, #24]
 800d44e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	6a1b      	ldr	r3, [r3, #32]
 800d454:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d456:	697b      	ldr	r3, [r7, #20]
 800d458:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d45c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	031b      	lsls	r3, r3, #12
 800d462:	697a      	ldr	r2, [r7, #20]
 800d464:	4313      	orrs	r3, r2
 800d466:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d468:	693b      	ldr	r3, [r7, #16]
 800d46a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d46e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	011b      	lsls	r3, r3, #4
 800d474:	693a      	ldr	r2, [r7, #16]
 800d476:	4313      	orrs	r3, r2
 800d478:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	697a      	ldr	r2, [r7, #20]
 800d47e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	693a      	ldr	r2, [r7, #16]
 800d484:	621a      	str	r2, [r3, #32]
}
 800d486:	bf00      	nop
 800d488:	371c      	adds	r7, #28
 800d48a:	46bd      	mov	sp, r7
 800d48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d490:	4770      	bx	lr
	...

0800d494 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d494:	b480      	push	{r7}
 800d496:	b085      	sub	sp, #20
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	689b      	ldr	r3, [r3, #8]
 800d4a2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d4a4:	68fa      	ldr	r2, [r7, #12]
 800d4a6:	4b09      	ldr	r3, [pc, #36]	; (800d4cc <TIM_ITRx_SetConfig+0x38>)
 800d4a8:	4013      	ands	r3, r2
 800d4aa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d4ac:	683a      	ldr	r2, [r7, #0]
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	4313      	orrs	r3, r2
 800d4b2:	f043 0307 	orr.w	r3, r3, #7
 800d4b6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	68fa      	ldr	r2, [r7, #12]
 800d4bc:	609a      	str	r2, [r3, #8]
}
 800d4be:	bf00      	nop
 800d4c0:	3714      	adds	r7, #20
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c8:	4770      	bx	lr
 800d4ca:	bf00      	nop
 800d4cc:	ffcfff8f 	.word	0xffcfff8f

0800d4d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	b087      	sub	sp, #28
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	60f8      	str	r0, [r7, #12]
 800d4d8:	60b9      	str	r1, [r7, #8]
 800d4da:	607a      	str	r2, [r7, #4]
 800d4dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	689b      	ldr	r3, [r3, #8]
 800d4e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d4e4:	697b      	ldr	r3, [r7, #20]
 800d4e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d4ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	021a      	lsls	r2, r3, #8
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	431a      	orrs	r2, r3
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	4313      	orrs	r3, r2
 800d4f8:	697a      	ldr	r2, [r7, #20]
 800d4fa:	4313      	orrs	r3, r2
 800d4fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	697a      	ldr	r2, [r7, #20]
 800d502:	609a      	str	r2, [r3, #8]
}
 800d504:	bf00      	nop
 800d506:	371c      	adds	r7, #28
 800d508:	46bd      	mov	sp, r7
 800d50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50e:	4770      	bx	lr

0800d510 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d510:	b480      	push	{r7}
 800d512:	b087      	sub	sp, #28
 800d514:	af00      	add	r7, sp, #0
 800d516:	60f8      	str	r0, [r7, #12]
 800d518:	60b9      	str	r1, [r7, #8]
 800d51a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	f003 031f 	and.w	r3, r3, #31
 800d522:	2201      	movs	r2, #1
 800d524:	fa02 f303 	lsl.w	r3, r2, r3
 800d528:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	6a1a      	ldr	r2, [r3, #32]
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	43db      	mvns	r3, r3
 800d532:	401a      	ands	r2, r3
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	6a1a      	ldr	r2, [r3, #32]
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	f003 031f 	and.w	r3, r3, #31
 800d542:	6879      	ldr	r1, [r7, #4]
 800d544:	fa01 f303 	lsl.w	r3, r1, r3
 800d548:	431a      	orrs	r2, r3
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	621a      	str	r2, [r3, #32]
}
 800d54e:	bf00      	nop
 800d550:	371c      	adds	r7, #28
 800d552:	46bd      	mov	sp, r7
 800d554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d558:	4770      	bx	lr
	...

0800d55c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d55c:	b480      	push	{r7}
 800d55e:	b085      	sub	sp, #20
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
 800d564:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d56c:	2b01      	cmp	r3, #1
 800d56e:	d101      	bne.n	800d574 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d570:	2302      	movs	r3, #2
 800d572:	e077      	b.n	800d664 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2201      	movs	r2, #1
 800d578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2202      	movs	r2, #2
 800d580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	685b      	ldr	r3, [r3, #4]
 800d58a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	689b      	ldr	r3, [r3, #8]
 800d592:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	4a35      	ldr	r2, [pc, #212]	; (800d670 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d59a:	4293      	cmp	r3, r2
 800d59c:	d004      	beq.n	800d5a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	4a34      	ldr	r2, [pc, #208]	; (800d674 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	d108      	bne.n	800d5ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800d5ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	685b      	ldr	r3, [r3, #4]
 800d5b4:	68fa      	ldr	r2, [r7, #12]
 800d5b6:	4313      	orrs	r3, r2
 800d5b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	68fa      	ldr	r2, [r7, #12]
 800d5c8:	4313      	orrs	r3, r2
 800d5ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	68fa      	ldr	r2, [r7, #12]
 800d5d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	4a25      	ldr	r2, [pc, #148]	; (800d670 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800d5da:	4293      	cmp	r3, r2
 800d5dc:	d02c      	beq.n	800d638 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d5e6:	d027      	beq.n	800d638 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	4a22      	ldr	r2, [pc, #136]	; (800d678 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800d5ee:	4293      	cmp	r3, r2
 800d5f0:	d022      	beq.n	800d638 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	4a21      	ldr	r2, [pc, #132]	; (800d67c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800d5f8:	4293      	cmp	r3, r2
 800d5fa:	d01d      	beq.n	800d638 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	4a1f      	ldr	r2, [pc, #124]	; (800d680 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800d602:	4293      	cmp	r3, r2
 800d604:	d018      	beq.n	800d638 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	4a1a      	ldr	r2, [pc, #104]	; (800d674 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800d60c:	4293      	cmp	r3, r2
 800d60e:	d013      	beq.n	800d638 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	4a1b      	ldr	r2, [pc, #108]	; (800d684 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800d616:	4293      	cmp	r3, r2
 800d618:	d00e      	beq.n	800d638 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	4a1a      	ldr	r2, [pc, #104]	; (800d688 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800d620:	4293      	cmp	r3, r2
 800d622:	d009      	beq.n	800d638 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	4a18      	ldr	r2, [pc, #96]	; (800d68c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800d62a:	4293      	cmp	r3, r2
 800d62c:	d004      	beq.n	800d638 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	4a17      	ldr	r2, [pc, #92]	; (800d690 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800d634:	4293      	cmp	r3, r2
 800d636:	d10c      	bne.n	800d652 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d63e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	689b      	ldr	r3, [r3, #8]
 800d644:	68ba      	ldr	r2, [r7, #8]
 800d646:	4313      	orrs	r3, r2
 800d648:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	68ba      	ldr	r2, [r7, #8]
 800d650:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2201      	movs	r2, #1
 800d656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2200      	movs	r2, #0
 800d65e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d662:	2300      	movs	r3, #0
}
 800d664:	4618      	mov	r0, r3
 800d666:	3714      	adds	r7, #20
 800d668:	46bd      	mov	sp, r7
 800d66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66e:	4770      	bx	lr
 800d670:	40010000 	.word	0x40010000
 800d674:	40010400 	.word	0x40010400
 800d678:	40000400 	.word	0x40000400
 800d67c:	40000800 	.word	0x40000800
 800d680:	40000c00 	.word	0x40000c00
 800d684:	40001800 	.word	0x40001800
 800d688:	40014000 	.word	0x40014000
 800d68c:	4000e000 	.word	0x4000e000
 800d690:	4000e400 	.word	0x4000e400

0800d694 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d694:	b480      	push	{r7}
 800d696:	b085      	sub	sp, #20
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
 800d69c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d6a8:	2b01      	cmp	r3, #1
 800d6aa:	d101      	bne.n	800d6b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d6ac:	2302      	movs	r3, #2
 800d6ae:	e087      	b.n	800d7c0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	68db      	ldr	r3, [r3, #12]
 800d6c2:	4313      	orrs	r3, r2
 800d6c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	689b      	ldr	r3, [r3, #8]
 800d6d0:	4313      	orrs	r3, r2
 800d6d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	685b      	ldr	r3, [r3, #4]
 800d6de:	4313      	orrs	r3, r2
 800d6e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	4313      	orrs	r3, r2
 800d6ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	691b      	ldr	r3, [r3, #16]
 800d6fa:	4313      	orrs	r3, r2
 800d6fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	695b      	ldr	r3, [r3, #20]
 800d708:	4313      	orrs	r3, r2
 800d70a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d716:	4313      	orrs	r3, r2
 800d718:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800d720:	683b      	ldr	r3, [r7, #0]
 800d722:	699b      	ldr	r3, [r3, #24]
 800d724:	041b      	lsls	r3, r3, #16
 800d726:	4313      	orrs	r3, r2
 800d728:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	4a27      	ldr	r2, [pc, #156]	; (800d7cc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800d730:	4293      	cmp	r3, r2
 800d732:	d004      	beq.n	800d73e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4a25      	ldr	r2, [pc, #148]	; (800d7d0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800d73a:	4293      	cmp	r3, r2
 800d73c:	d106      	bne.n	800d74c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	69db      	ldr	r3, [r3, #28]
 800d748:	4313      	orrs	r3, r2
 800d74a:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	4a1e      	ldr	r2, [pc, #120]	; (800d7cc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800d752:	4293      	cmp	r3, r2
 800d754:	d004      	beq.n	800d760 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	4a1d      	ldr	r2, [pc, #116]	; (800d7d0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800d75c:	4293      	cmp	r3, r2
 800d75e:	d126      	bne.n	800d7ae <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d76a:	051b      	lsls	r3, r3, #20
 800d76c:	4313      	orrs	r3, r2
 800d76e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	6a1b      	ldr	r3, [r3, #32]
 800d77a:	4313      	orrs	r3, r2
 800d77c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d788:	4313      	orrs	r3, r2
 800d78a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	4a0e      	ldr	r2, [pc, #56]	; (800d7cc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800d792:	4293      	cmp	r3, r2
 800d794:	d004      	beq.n	800d7a0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	4a0d      	ldr	r2, [pc, #52]	; (800d7d0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800d79c:	4293      	cmp	r3, r2
 800d79e:	d106      	bne.n	800d7ae <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7aa:	4313      	orrs	r3, r2
 800d7ac:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	68fa      	ldr	r2, [r7, #12]
 800d7b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d7be:	2300      	movs	r3, #0
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	3714      	adds	r7, #20
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ca:	4770      	bx	lr
 800d7cc:	40010000 	.word	0x40010000
 800d7d0:	40010400 	.word	0x40010400

0800d7d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b083      	sub	sp, #12
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d7dc:	bf00      	nop
 800d7de:	370c      	adds	r7, #12
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e6:	4770      	bx	lr

0800d7e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b083      	sub	sp, #12
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d7f0:	bf00      	nop
 800d7f2:	370c      	adds	r7, #12
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr

0800d7fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b083      	sub	sp, #12
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d804:	bf00      	nop
 800d806:	370c      	adds	r7, #12
 800d808:	46bd      	mov	sp, r7
 800d80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80e:	4770      	bx	lr

0800d810 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b082      	sub	sp, #8
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d101      	bne.n	800d822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d81e:	2301      	movs	r3, #1
 800d820:	e042      	b.n	800d8a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d106      	bne.n	800d83a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2200      	movs	r2, #0
 800d830:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f7f8 fc87 	bl	8006148 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2224      	movs	r2, #36	; 0x24
 800d83e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	681a      	ldr	r2, [r3, #0]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	f022 0201 	bic.w	r2, r2, #1
 800d850:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f000 fcdc 	bl	800e210 <UART_SetConfig>
 800d858:	4603      	mov	r3, r0
 800d85a:	2b01      	cmp	r3, #1
 800d85c:	d101      	bne.n	800d862 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d85e:	2301      	movs	r3, #1
 800d860:	e022      	b.n	800d8a8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d866:	2b00      	cmp	r3, #0
 800d868:	d002      	beq.n	800d870 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f001 fb2e 	bl	800eecc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	685a      	ldr	r2, [r3, #4]
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d87e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	689a      	ldr	r2, [r3, #8]
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d88e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	681a      	ldr	r2, [r3, #0]
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f042 0201 	orr.w	r2, r2, #1
 800d89e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f001 fbb5 	bl	800f010 <UART_CheckIdleState>
 800d8a6:	4603      	mov	r3, r0
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3708      	adds	r7, #8
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b08a      	sub	sp, #40	; 0x28
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	60f8      	str	r0, [r7, #12]
 800d8b8:	60b9      	str	r1, [r7, #8]
 800d8ba:	4613      	mov	r3, r2
 800d8bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d8c4:	2b20      	cmp	r3, #32
 800d8c6:	d17a      	bne.n	800d9be <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d002      	beq.n	800d8d4 <HAL_UART_Transmit_DMA+0x24>
 800d8ce:	88fb      	ldrh	r3, [r7, #6]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d101      	bne.n	800d8d8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	e073      	b.n	800d9c0 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d8de:	2b01      	cmp	r3, #1
 800d8e0:	d101      	bne.n	800d8e6 <HAL_UART_Transmit_DMA+0x36>
 800d8e2:	2302      	movs	r3, #2
 800d8e4:	e06c      	b.n	800d9c0 <HAL_UART_Transmit_DMA+0x110>
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	2201      	movs	r2, #1
 800d8ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	68ba      	ldr	r2, [r7, #8]
 800d8f2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	88fa      	ldrh	r2, [r7, #6]
 800d8f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	88fa      	ldrh	r2, [r7, #6]
 800d900:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	2200      	movs	r2, #0
 800d908:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	2221      	movs	r2, #33	; 0x21
 800d910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d02c      	beq.n	800d976 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d920:	4a29      	ldr	r2, [pc, #164]	; (800d9c8 <HAL_UART_Transmit_DMA+0x118>)
 800d922:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d928:	4a28      	ldr	r2, [pc, #160]	; (800d9cc <HAL_UART_Transmit_DMA+0x11c>)
 800d92a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d930:	4a27      	ldr	r2, [pc, #156]	; (800d9d0 <HAL_UART_Transmit_DMA+0x120>)
 800d932:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d938:	2200      	movs	r2, #0
 800d93a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d944:	4619      	mov	r1, r3
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	3328      	adds	r3, #40	; 0x28
 800d94c:	461a      	mov	r2, r3
 800d94e:	88fb      	ldrh	r3, [r7, #6]
 800d950:	f7f9 fbbc 	bl	80070cc <HAL_DMA_Start_IT>
 800d954:	4603      	mov	r3, r0
 800d956:	2b00      	cmp	r3, #0
 800d958:	d00d      	beq.n	800d976 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	2210      	movs	r2, #16
 800d95e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	2200      	movs	r2, #0
 800d966:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	2220      	movs	r2, #32
 800d96e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800d972:	2301      	movs	r3, #1
 800d974:	e024      	b.n	800d9c0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	2240      	movs	r2, #64	; 0x40
 800d97c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	2200      	movs	r2, #0
 800d982:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	3308      	adds	r3, #8
 800d98c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	e853 3f00 	ldrex	r3, [r3]
 800d994:	613b      	str	r3, [r7, #16]
   return(result);
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d99c:	627b      	str	r3, [r7, #36]	; 0x24
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	3308      	adds	r3, #8
 800d9a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9a6:	623a      	str	r2, [r7, #32]
 800d9a8:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9aa:	69f9      	ldr	r1, [r7, #28]
 800d9ac:	6a3a      	ldr	r2, [r7, #32]
 800d9ae:	e841 2300 	strex	r3, r2, [r1]
 800d9b2:	61bb      	str	r3, [r7, #24]
   return(result);
 800d9b4:	69bb      	ldr	r3, [r7, #24]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d1e5      	bne.n	800d986 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	e000      	b.n	800d9c0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800d9be:	2302      	movs	r3, #2
  }
}
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	3728      	adds	r7, #40	; 0x28
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}
 800d9c8:	0800f4d9 	.word	0x0800f4d9
 800d9cc:	0800f56f 	.word	0x0800f56f
 800d9d0:	0800f6e5 	.word	0x0800f6e5

0800d9d4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b08a      	sub	sp, #40	; 0x28
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	60f8      	str	r0, [r7, #12]
 800d9dc:	60b9      	str	r1, [r7, #8]
 800d9de:	4613      	mov	r3, r2
 800d9e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d9e8:	2b20      	cmp	r3, #32
 800d9ea:	d142      	bne.n	800da72 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d002      	beq.n	800d9f8 <HAL_UART_Receive_DMA+0x24>
 800d9f2:	88fb      	ldrh	r3, [r7, #6]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d101      	bne.n	800d9fc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	e03b      	b.n	800da74 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800da02:	2b01      	cmp	r3, #1
 800da04:	d101      	bne.n	800da0a <HAL_UART_Receive_DMA+0x36>
 800da06:	2302      	movs	r3, #2
 800da08:	e034      	b.n	800da74 <HAL_UART_Receive_DMA+0xa0>
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	2201      	movs	r2, #1
 800da0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	2200      	movs	r2, #0
 800da16:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	4a17      	ldr	r2, [pc, #92]	; (800da7c <HAL_UART_Receive_DMA+0xa8>)
 800da1e:	4293      	cmp	r3, r2
 800da20:	d01f      	beq.n	800da62 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	685b      	ldr	r3, [r3, #4]
 800da28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d018      	beq.n	800da62 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	e853 3f00 	ldrex	r3, [r3]
 800da3c:	613b      	str	r3, [r7, #16]
   return(result);
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800da44:	627b      	str	r3, [r7, #36]	; 0x24
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	461a      	mov	r2, r3
 800da4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4e:	623b      	str	r3, [r7, #32]
 800da50:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da52:	69f9      	ldr	r1, [r7, #28]
 800da54:	6a3a      	ldr	r2, [r7, #32]
 800da56:	e841 2300 	strex	r3, r2, [r1]
 800da5a:	61bb      	str	r3, [r7, #24]
   return(result);
 800da5c:	69bb      	ldr	r3, [r7, #24]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d1e6      	bne.n	800da30 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800da62:	88fb      	ldrh	r3, [r7, #6]
 800da64:	461a      	mov	r2, r3
 800da66:	68b9      	ldr	r1, [r7, #8]
 800da68:	68f8      	ldr	r0, [r7, #12]
 800da6a:	f001 fbe5 	bl	800f238 <UART_Start_Receive_DMA>
 800da6e:	4603      	mov	r3, r0
 800da70:	e000      	b.n	800da74 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800da72:	2302      	movs	r3, #2
  }
}
 800da74:	4618      	mov	r0, r3
 800da76:	3728      	adds	r7, #40	; 0x28
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}
 800da7c:	58000c00 	.word	0x58000c00

0800da80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b0ba      	sub	sp, #232	; 0xe8
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	69db      	ldr	r3, [r3, #28]
 800da8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	689b      	ldr	r3, [r3, #8]
 800daa2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800daa6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800daaa:	f640 030f 	movw	r3, #2063	; 0x80f
 800daae:	4013      	ands	r3, r2
 800dab0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800dab4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d11b      	bne.n	800daf4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dabc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dac0:	f003 0320 	and.w	r3, r3, #32
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d015      	beq.n	800daf4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dacc:	f003 0320 	and.w	r3, r3, #32
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d105      	bne.n	800dae0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d009      	beq.n	800daf4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	f000 835a 	beq.w	800e19e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	4798      	blx	r3
      }
      return;
 800daf2:	e354      	b.n	800e19e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800daf4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	f000 811f 	beq.w	800dd3c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800dafe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800db02:	4b8b      	ldr	r3, [pc, #556]	; (800dd30 <HAL_UART_IRQHandler+0x2b0>)
 800db04:	4013      	ands	r3, r2
 800db06:	2b00      	cmp	r3, #0
 800db08:	d106      	bne.n	800db18 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800db0a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800db0e:	4b89      	ldr	r3, [pc, #548]	; (800dd34 <HAL_UART_IRQHandler+0x2b4>)
 800db10:	4013      	ands	r3, r2
 800db12:	2b00      	cmp	r3, #0
 800db14:	f000 8112 	beq.w	800dd3c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800db18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db1c:	f003 0301 	and.w	r3, r3, #1
 800db20:	2b00      	cmp	r3, #0
 800db22:	d011      	beq.n	800db48 <HAL_UART_IRQHandler+0xc8>
 800db24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d00b      	beq.n	800db48 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	2201      	movs	r2, #1
 800db36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db3e:	f043 0201 	orr.w	r2, r3, #1
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800db48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db4c:	f003 0302 	and.w	r3, r3, #2
 800db50:	2b00      	cmp	r3, #0
 800db52:	d011      	beq.n	800db78 <HAL_UART_IRQHandler+0xf8>
 800db54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db58:	f003 0301 	and.w	r3, r3, #1
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d00b      	beq.n	800db78 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	2202      	movs	r2, #2
 800db66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db6e:	f043 0204 	orr.w	r2, r3, #4
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800db78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db7c:	f003 0304 	and.w	r3, r3, #4
 800db80:	2b00      	cmp	r3, #0
 800db82:	d011      	beq.n	800dba8 <HAL_UART_IRQHandler+0x128>
 800db84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db88:	f003 0301 	and.w	r3, r3, #1
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d00b      	beq.n	800dba8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	2204      	movs	r2, #4
 800db96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db9e:	f043 0202 	orr.w	r2, r3, #2
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800dba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dbac:	f003 0308 	and.w	r3, r3, #8
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d017      	beq.n	800dbe4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dbb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dbb8:	f003 0320 	and.w	r3, r3, #32
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d105      	bne.n	800dbcc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800dbc0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800dbc4:	4b5a      	ldr	r3, [pc, #360]	; (800dd30 <HAL_UART_IRQHandler+0x2b0>)
 800dbc6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d00b      	beq.n	800dbe4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	2208      	movs	r2, #8
 800dbd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dbda:	f043 0208 	orr.w	r2, r3, #8
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800dbe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dbe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d012      	beq.n	800dc16 <HAL_UART_IRQHandler+0x196>
 800dbf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dbf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d00c      	beq.n	800dc16 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dc04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc0c:	f043 0220 	orr.w	r2, r3, #32
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	f000 82c0 	beq.w	800e1a2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800dc22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dc26:	f003 0320 	and.w	r3, r3, #32
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d013      	beq.n	800dc56 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800dc2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dc32:	f003 0320 	and.w	r3, r3, #32
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d105      	bne.n	800dc46 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800dc3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dc3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d007      	beq.n	800dc56 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d003      	beq.n	800dc56 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	689b      	ldr	r3, [r3, #8]
 800dc66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc6a:	2b40      	cmp	r3, #64	; 0x40
 800dc6c:	d005      	beq.n	800dc7a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800dc6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800dc72:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d04f      	beq.n	800dd1a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f001 fbc6 	bl	800f40c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	689b      	ldr	r3, [r3, #8]
 800dc86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc8a:	2b40      	cmp	r3, #64	; 0x40
 800dc8c:	d141      	bne.n	800dd12 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	3308      	adds	r3, #8
 800dc94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800dc9c:	e853 3f00 	ldrex	r3, [r3]
 800dca0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800dca4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800dca8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dcac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	3308      	adds	r3, #8
 800dcb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800dcba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800dcbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800dcc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800dcca:	e841 2300 	strex	r3, r2, [r1]
 800dcce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800dcd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d1d9      	bne.n	800dc8e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d013      	beq.n	800dd0a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dce6:	4a14      	ldr	r2, [pc, #80]	; (800dd38 <HAL_UART_IRQHandler+0x2b8>)
 800dce8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f7f9 ff74 	bl	8007bdc <HAL_DMA_Abort_IT>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d017      	beq.n	800dd2a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd00:	687a      	ldr	r2, [r7, #4]
 800dd02:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800dd04:	4610      	mov	r0, r2
 800dd06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd08:	e00f      	b.n	800dd2a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f000 fa6a 	bl	800e1e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd10:	e00b      	b.n	800dd2a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f000 fa66 	bl	800e1e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd18:	e007      	b.n	800dd2a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dd1a:	6878      	ldr	r0, [r7, #4]
 800dd1c:	f000 fa62 	bl	800e1e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2200      	movs	r2, #0
 800dd24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800dd28:	e23b      	b.n	800e1a2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd2a:	bf00      	nop
    return;
 800dd2c:	e239      	b.n	800e1a2 <HAL_UART_IRQHandler+0x722>
 800dd2e:	bf00      	nop
 800dd30:	10000001 	.word	0x10000001
 800dd34:	04000120 	.word	0x04000120
 800dd38:	0800f765 	.word	0x0800f765

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd40:	2b01      	cmp	r3, #1
 800dd42:	f040 81ce 	bne.w	800e0e2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800dd46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dd4a:	f003 0310 	and.w	r3, r3, #16
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	f000 81c7 	beq.w	800e0e2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800dd54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dd58:	f003 0310 	and.w	r3, r3, #16
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	f000 81c0 	beq.w	800e0e2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	2210      	movs	r2, #16
 800dd68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	689b      	ldr	r3, [r3, #8]
 800dd70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd74:	2b40      	cmp	r3, #64	; 0x40
 800dd76:	f040 813b 	bne.w	800dff0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	4a8b      	ldr	r2, [pc, #556]	; (800dfb0 <HAL_UART_IRQHandler+0x530>)
 800dd82:	4293      	cmp	r3, r2
 800dd84:	d059      	beq.n	800de3a <HAL_UART_IRQHandler+0x3ba>
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	4a89      	ldr	r2, [pc, #548]	; (800dfb4 <HAL_UART_IRQHandler+0x534>)
 800dd8e:	4293      	cmp	r3, r2
 800dd90:	d053      	beq.n	800de3a <HAL_UART_IRQHandler+0x3ba>
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	4a87      	ldr	r2, [pc, #540]	; (800dfb8 <HAL_UART_IRQHandler+0x538>)
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	d04d      	beq.n	800de3a <HAL_UART_IRQHandler+0x3ba>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	4a85      	ldr	r2, [pc, #532]	; (800dfbc <HAL_UART_IRQHandler+0x53c>)
 800dda6:	4293      	cmp	r3, r2
 800dda8:	d047      	beq.n	800de3a <HAL_UART_IRQHandler+0x3ba>
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	4a83      	ldr	r2, [pc, #524]	; (800dfc0 <HAL_UART_IRQHandler+0x540>)
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	d041      	beq.n	800de3a <HAL_UART_IRQHandler+0x3ba>
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	4a81      	ldr	r2, [pc, #516]	; (800dfc4 <HAL_UART_IRQHandler+0x544>)
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	d03b      	beq.n	800de3a <HAL_UART_IRQHandler+0x3ba>
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	4a7f      	ldr	r2, [pc, #508]	; (800dfc8 <HAL_UART_IRQHandler+0x548>)
 800ddca:	4293      	cmp	r3, r2
 800ddcc:	d035      	beq.n	800de3a <HAL_UART_IRQHandler+0x3ba>
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	4a7d      	ldr	r2, [pc, #500]	; (800dfcc <HAL_UART_IRQHandler+0x54c>)
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d02f      	beq.n	800de3a <HAL_UART_IRQHandler+0x3ba>
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	4a7b      	ldr	r2, [pc, #492]	; (800dfd0 <HAL_UART_IRQHandler+0x550>)
 800dde2:	4293      	cmp	r3, r2
 800dde4:	d029      	beq.n	800de3a <HAL_UART_IRQHandler+0x3ba>
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	4a79      	ldr	r2, [pc, #484]	; (800dfd4 <HAL_UART_IRQHandler+0x554>)
 800ddee:	4293      	cmp	r3, r2
 800ddf0:	d023      	beq.n	800de3a <HAL_UART_IRQHandler+0x3ba>
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	4a77      	ldr	r2, [pc, #476]	; (800dfd8 <HAL_UART_IRQHandler+0x558>)
 800ddfa:	4293      	cmp	r3, r2
 800ddfc:	d01d      	beq.n	800de3a <HAL_UART_IRQHandler+0x3ba>
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	4a75      	ldr	r2, [pc, #468]	; (800dfdc <HAL_UART_IRQHandler+0x55c>)
 800de06:	4293      	cmp	r3, r2
 800de08:	d017      	beq.n	800de3a <HAL_UART_IRQHandler+0x3ba>
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	4a73      	ldr	r2, [pc, #460]	; (800dfe0 <HAL_UART_IRQHandler+0x560>)
 800de12:	4293      	cmp	r3, r2
 800de14:	d011      	beq.n	800de3a <HAL_UART_IRQHandler+0x3ba>
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	4a71      	ldr	r2, [pc, #452]	; (800dfe4 <HAL_UART_IRQHandler+0x564>)
 800de1e:	4293      	cmp	r3, r2
 800de20:	d00b      	beq.n	800de3a <HAL_UART_IRQHandler+0x3ba>
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	4a6f      	ldr	r2, [pc, #444]	; (800dfe8 <HAL_UART_IRQHandler+0x568>)
 800de2a:	4293      	cmp	r3, r2
 800de2c:	d005      	beq.n	800de3a <HAL_UART_IRQHandler+0x3ba>
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	4a6d      	ldr	r2, [pc, #436]	; (800dfec <HAL_UART_IRQHandler+0x56c>)
 800de36:	4293      	cmp	r3, r2
 800de38:	d105      	bne.n	800de46 <HAL_UART_IRQHandler+0x3c6>
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	685b      	ldr	r3, [r3, #4]
 800de42:	b29b      	uxth	r3, r3
 800de44:	e004      	b.n	800de50 <HAL_UART_IRQHandler+0x3d0>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	685b      	ldr	r3, [r3, #4]
 800de4e:	b29b      	uxth	r3, r3
 800de50:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800de54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800de58:	2b00      	cmp	r3, #0
 800de5a:	f000 81a4 	beq.w	800e1a6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800de64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800de68:	429a      	cmp	r2, r3
 800de6a:	f080 819c 	bcs.w	800e1a6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800de74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800de7c:	69db      	ldr	r3, [r3, #28]
 800de7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de82:	f000 8086 	beq.w	800df92 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800de92:	e853 3f00 	ldrex	r3, [r3]
 800de96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800de9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800de9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dea2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	461a      	mov	r2, r3
 800deac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800deb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800deb4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deb8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800debc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dec0:	e841 2300 	strex	r3, r2, [r1]
 800dec4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800dec8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800decc:	2b00      	cmp	r3, #0
 800dece:	d1da      	bne.n	800de86 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	3308      	adds	r3, #8
 800ded6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ded8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800deda:	e853 3f00 	ldrex	r3, [r3]
 800dede:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800dee0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dee2:	f023 0301 	bic.w	r3, r3, #1
 800dee6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	3308      	adds	r3, #8
 800def0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800def4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800def8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800defa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800defc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800df00:	e841 2300 	strex	r3, r2, [r1]
 800df04:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800df06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d1e1      	bne.n	800ded0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	3308      	adds	r3, #8
 800df12:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df16:	e853 3f00 	ldrex	r3, [r3]
 800df1a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800df1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	3308      	adds	r3, #8
 800df2c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800df30:	66fa      	str	r2, [r7, #108]	; 0x6c
 800df32:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df34:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800df36:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800df38:	e841 2300 	strex	r3, r2, [r1]
 800df3c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800df3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800df40:	2b00      	cmp	r3, #0
 800df42:	d1e3      	bne.n	800df0c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2220      	movs	r2, #32
 800df48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2200      	movs	r2, #0
 800df50:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df5a:	e853 3f00 	ldrex	r3, [r3]
 800df5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800df60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df62:	f023 0310 	bic.w	r3, r3, #16
 800df66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	461a      	mov	r2, r3
 800df70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800df74:	65bb      	str	r3, [r7, #88]	; 0x58
 800df76:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800df7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800df7c:	e841 2300 	strex	r3, r2, [r1]
 800df80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800df82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df84:	2b00      	cmp	r3, #0
 800df86:	d1e4      	bne.n	800df52 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df8c:	4618      	mov	r0, r3
 800df8e:	f7f9 fb07 	bl	80075a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800df9e:	b29b      	uxth	r3, r3
 800dfa0:	1ad3      	subs	r3, r2, r3
 800dfa2:	b29b      	uxth	r3, r3
 800dfa4:	4619      	mov	r1, r3
 800dfa6:	6878      	ldr	r0, [r7, #4]
 800dfa8:	f000 f926 	bl	800e1f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800dfac:	e0fb      	b.n	800e1a6 <HAL_UART_IRQHandler+0x726>
 800dfae:	bf00      	nop
 800dfb0:	40020010 	.word	0x40020010
 800dfb4:	40020028 	.word	0x40020028
 800dfb8:	40020040 	.word	0x40020040
 800dfbc:	40020058 	.word	0x40020058
 800dfc0:	40020070 	.word	0x40020070
 800dfc4:	40020088 	.word	0x40020088
 800dfc8:	400200a0 	.word	0x400200a0
 800dfcc:	400200b8 	.word	0x400200b8
 800dfd0:	40020410 	.word	0x40020410
 800dfd4:	40020428 	.word	0x40020428
 800dfd8:	40020440 	.word	0x40020440
 800dfdc:	40020458 	.word	0x40020458
 800dfe0:	40020470 	.word	0x40020470
 800dfe4:	40020488 	.word	0x40020488
 800dfe8:	400204a0 	.word	0x400204a0
 800dfec:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dffc:	b29b      	uxth	r3, r3
 800dffe:	1ad3      	subs	r3, r2, r3
 800e000:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e00a:	b29b      	uxth	r3, r3
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	f000 80cc 	beq.w	800e1aa <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800e012:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e016:	2b00      	cmp	r3, #0
 800e018:	f000 80c7 	beq.w	800e1aa <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e024:	e853 3f00 	ldrex	r3, [r3]
 800e028:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e02a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e02c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e030:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	461a      	mov	r2, r3
 800e03a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e03e:	647b      	str	r3, [r7, #68]	; 0x44
 800e040:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e042:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e044:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e046:	e841 2300 	strex	r3, r2, [r1]
 800e04a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e04c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d1e4      	bne.n	800e01c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	3308      	adds	r3, #8
 800e058:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e05c:	e853 3f00 	ldrex	r3, [r3]
 800e060:	623b      	str	r3, [r7, #32]
   return(result);
 800e062:	6a3a      	ldr	r2, [r7, #32]
 800e064:	4b54      	ldr	r3, [pc, #336]	; (800e1b8 <HAL_UART_IRQHandler+0x738>)
 800e066:	4013      	ands	r3, r2
 800e068:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	3308      	adds	r3, #8
 800e072:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e076:	633a      	str	r2, [r7, #48]	; 0x30
 800e078:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e07a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e07c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e07e:	e841 2300 	strex	r3, r2, [r1]
 800e082:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e086:	2b00      	cmp	r3, #0
 800e088:	d1e3      	bne.n	800e052 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2220      	movs	r2, #32
 800e08e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2200      	movs	r2, #0
 800e096:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	2200      	movs	r2, #0
 800e09c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0a4:	693b      	ldr	r3, [r7, #16]
 800e0a6:	e853 3f00 	ldrex	r3, [r3]
 800e0aa:	60fb      	str	r3, [r7, #12]
   return(result);
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	f023 0310 	bic.w	r3, r3, #16
 800e0b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	461a      	mov	r2, r3
 800e0bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e0c0:	61fb      	str	r3, [r7, #28]
 800e0c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0c4:	69b9      	ldr	r1, [r7, #24]
 800e0c6:	69fa      	ldr	r2, [r7, #28]
 800e0c8:	e841 2300 	strex	r3, r2, [r1]
 800e0cc:	617b      	str	r3, [r7, #20]
   return(result);
 800e0ce:	697b      	ldr	r3, [r7, #20]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d1e4      	bne.n	800e09e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e0d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e0d8:	4619      	mov	r1, r3
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f000 f88c 	bl	800e1f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e0e0:	e063      	b.n	800e1aa <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e0e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e0e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d00e      	beq.n	800e10c <HAL_UART_IRQHandler+0x68c>
 800e0ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e0f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d008      	beq.n	800e10c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e102:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f001 fb6e 	bl	800f7e6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e10a:	e051      	b.n	800e1b0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e10c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e114:	2b00      	cmp	r3, #0
 800e116:	d014      	beq.n	800e142 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e11c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e120:	2b00      	cmp	r3, #0
 800e122:	d105      	bne.n	800e130 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e124:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e128:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d008      	beq.n	800e142 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e134:	2b00      	cmp	r3, #0
 800e136:	d03a      	beq.n	800e1ae <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	4798      	blx	r3
    }
    return;
 800e140:	e035      	b.n	800e1ae <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d009      	beq.n	800e162 <HAL_UART_IRQHandler+0x6e2>
 800e14e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e156:	2b00      	cmp	r3, #0
 800e158:	d003      	beq.n	800e162 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f001 fb18 	bl	800f790 <UART_EndTransmit_IT>
    return;
 800e160:	e026      	b.n	800e1b0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800e162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e166:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d009      	beq.n	800e182 <HAL_UART_IRQHandler+0x702>
 800e16e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e172:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e176:	2b00      	cmp	r3, #0
 800e178:	d003      	beq.n	800e182 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	f001 fb47 	bl	800f80e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e180:	e016      	b.n	800e1b0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800e182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e186:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d010      	beq.n	800e1b0 <HAL_UART_IRQHandler+0x730>
 800e18e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e192:	2b00      	cmp	r3, #0
 800e194:	da0c      	bge.n	800e1b0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f001 fb2f 	bl	800f7fa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e19c:	e008      	b.n	800e1b0 <HAL_UART_IRQHandler+0x730>
      return;
 800e19e:	bf00      	nop
 800e1a0:	e006      	b.n	800e1b0 <HAL_UART_IRQHandler+0x730>
    return;
 800e1a2:	bf00      	nop
 800e1a4:	e004      	b.n	800e1b0 <HAL_UART_IRQHandler+0x730>
      return;
 800e1a6:	bf00      	nop
 800e1a8:	e002      	b.n	800e1b0 <HAL_UART_IRQHandler+0x730>
      return;
 800e1aa:	bf00      	nop
 800e1ac:	e000      	b.n	800e1b0 <HAL_UART_IRQHandler+0x730>
    return;
 800e1ae:	bf00      	nop
  }
}
 800e1b0:	37e8      	adds	r7, #232	; 0xe8
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}
 800e1b6:	bf00      	nop
 800e1b8:	effffffe 	.word	0xeffffffe

0800e1bc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e1bc:	b480      	push	{r7}
 800e1be:	b083      	sub	sp, #12
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e1c4:	bf00      	nop
 800e1c6:	370c      	adds	r7, #12
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ce:	4770      	bx	lr

0800e1d0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e1d0:	b480      	push	{r7}
 800e1d2:	b083      	sub	sp, #12
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e1d8:	bf00      	nop
 800e1da:	370c      	adds	r7, #12
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e2:	4770      	bx	lr

0800e1e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b083      	sub	sp, #12
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e1ec:	bf00      	nop
 800e1ee:	370c      	adds	r7, #12
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f6:	4770      	bx	lr

0800e1f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e1f8:	b480      	push	{r7}
 800e1fa:	b083      	sub	sp, #12
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
 800e200:	460b      	mov	r3, r1
 800e202:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e204:	bf00      	nop
 800e206:	370c      	adds	r7, #12
 800e208:	46bd      	mov	sp, r7
 800e20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20e:	4770      	bx	lr

0800e210 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e210:	b5b0      	push	{r4, r5, r7, lr}
 800e212:	b08e      	sub	sp, #56	; 0x38
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e218:	2300      	movs	r3, #0
 800e21a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	689a      	ldr	r2, [r3, #8]
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	691b      	ldr	r3, [r3, #16]
 800e226:	431a      	orrs	r2, r3
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	695b      	ldr	r3, [r3, #20]
 800e22c:	431a      	orrs	r2, r3
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	69db      	ldr	r3, [r3, #28]
 800e232:	4313      	orrs	r3, r2
 800e234:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	681a      	ldr	r2, [r3, #0]
 800e23c:	4bbf      	ldr	r3, [pc, #764]	; (800e53c <UART_SetConfig+0x32c>)
 800e23e:	4013      	ands	r3, r2
 800e240:	687a      	ldr	r2, [r7, #4]
 800e242:	6812      	ldr	r2, [r2, #0]
 800e244:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e246:	430b      	orrs	r3, r1
 800e248:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	685b      	ldr	r3, [r3, #4]
 800e250:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	68da      	ldr	r2, [r3, #12]
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	430a      	orrs	r2, r1
 800e25e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	699b      	ldr	r3, [r3, #24]
 800e264:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	4ab5      	ldr	r2, [pc, #724]	; (800e540 <UART_SetConfig+0x330>)
 800e26c:	4293      	cmp	r3, r2
 800e26e:	d004      	beq.n	800e27a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	6a1b      	ldr	r3, [r3, #32]
 800e274:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e276:	4313      	orrs	r3, r2
 800e278:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	689a      	ldr	r2, [r3, #8]
 800e280:	4bb0      	ldr	r3, [pc, #704]	; (800e544 <UART_SetConfig+0x334>)
 800e282:	4013      	ands	r3, r2
 800e284:	687a      	ldr	r2, [r7, #4]
 800e286:	6812      	ldr	r2, [r2, #0]
 800e288:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e28a:	430b      	orrs	r3, r1
 800e28c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e294:	f023 010f 	bic.w	r1, r3, #15
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	430a      	orrs	r2, r1
 800e2a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	4aa7      	ldr	r2, [pc, #668]	; (800e548 <UART_SetConfig+0x338>)
 800e2aa:	4293      	cmp	r3, r2
 800e2ac:	d176      	bne.n	800e39c <UART_SetConfig+0x18c>
 800e2ae:	4ba7      	ldr	r3, [pc, #668]	; (800e54c <UART_SetConfig+0x33c>)
 800e2b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e2b6:	2b28      	cmp	r3, #40	; 0x28
 800e2b8:	d86c      	bhi.n	800e394 <UART_SetConfig+0x184>
 800e2ba:	a201      	add	r2, pc, #4	; (adr r2, 800e2c0 <UART_SetConfig+0xb0>)
 800e2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2c0:	0800e365 	.word	0x0800e365
 800e2c4:	0800e395 	.word	0x0800e395
 800e2c8:	0800e395 	.word	0x0800e395
 800e2cc:	0800e395 	.word	0x0800e395
 800e2d0:	0800e395 	.word	0x0800e395
 800e2d4:	0800e395 	.word	0x0800e395
 800e2d8:	0800e395 	.word	0x0800e395
 800e2dc:	0800e395 	.word	0x0800e395
 800e2e0:	0800e36d 	.word	0x0800e36d
 800e2e4:	0800e395 	.word	0x0800e395
 800e2e8:	0800e395 	.word	0x0800e395
 800e2ec:	0800e395 	.word	0x0800e395
 800e2f0:	0800e395 	.word	0x0800e395
 800e2f4:	0800e395 	.word	0x0800e395
 800e2f8:	0800e395 	.word	0x0800e395
 800e2fc:	0800e395 	.word	0x0800e395
 800e300:	0800e375 	.word	0x0800e375
 800e304:	0800e395 	.word	0x0800e395
 800e308:	0800e395 	.word	0x0800e395
 800e30c:	0800e395 	.word	0x0800e395
 800e310:	0800e395 	.word	0x0800e395
 800e314:	0800e395 	.word	0x0800e395
 800e318:	0800e395 	.word	0x0800e395
 800e31c:	0800e395 	.word	0x0800e395
 800e320:	0800e37d 	.word	0x0800e37d
 800e324:	0800e395 	.word	0x0800e395
 800e328:	0800e395 	.word	0x0800e395
 800e32c:	0800e395 	.word	0x0800e395
 800e330:	0800e395 	.word	0x0800e395
 800e334:	0800e395 	.word	0x0800e395
 800e338:	0800e395 	.word	0x0800e395
 800e33c:	0800e395 	.word	0x0800e395
 800e340:	0800e385 	.word	0x0800e385
 800e344:	0800e395 	.word	0x0800e395
 800e348:	0800e395 	.word	0x0800e395
 800e34c:	0800e395 	.word	0x0800e395
 800e350:	0800e395 	.word	0x0800e395
 800e354:	0800e395 	.word	0x0800e395
 800e358:	0800e395 	.word	0x0800e395
 800e35c:	0800e395 	.word	0x0800e395
 800e360:	0800e38d 	.word	0x0800e38d
 800e364:	2301      	movs	r3, #1
 800e366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e36a:	e326      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e36c:	2304      	movs	r3, #4
 800e36e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e372:	e322      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e374:	2308      	movs	r3, #8
 800e376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e37a:	e31e      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e37c:	2310      	movs	r3, #16
 800e37e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e382:	e31a      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e384:	2320      	movs	r3, #32
 800e386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e38a:	e316      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e38c:	2340      	movs	r3, #64	; 0x40
 800e38e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e392:	e312      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e394:	2380      	movs	r3, #128	; 0x80
 800e396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e39a:	e30e      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	4a6b      	ldr	r2, [pc, #428]	; (800e550 <UART_SetConfig+0x340>)
 800e3a2:	4293      	cmp	r3, r2
 800e3a4:	d130      	bne.n	800e408 <UART_SetConfig+0x1f8>
 800e3a6:	4b69      	ldr	r3, [pc, #420]	; (800e54c <UART_SetConfig+0x33c>)
 800e3a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3aa:	f003 0307 	and.w	r3, r3, #7
 800e3ae:	2b05      	cmp	r3, #5
 800e3b0:	d826      	bhi.n	800e400 <UART_SetConfig+0x1f0>
 800e3b2:	a201      	add	r2, pc, #4	; (adr r2, 800e3b8 <UART_SetConfig+0x1a8>)
 800e3b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3b8:	0800e3d1 	.word	0x0800e3d1
 800e3bc:	0800e3d9 	.word	0x0800e3d9
 800e3c0:	0800e3e1 	.word	0x0800e3e1
 800e3c4:	0800e3e9 	.word	0x0800e3e9
 800e3c8:	0800e3f1 	.word	0x0800e3f1
 800e3cc:	0800e3f9 	.word	0x0800e3f9
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3d6:	e2f0      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e3d8:	2304      	movs	r3, #4
 800e3da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3de:	e2ec      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e3e0:	2308      	movs	r3, #8
 800e3e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3e6:	e2e8      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e3e8:	2310      	movs	r3, #16
 800e3ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3ee:	e2e4      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e3f0:	2320      	movs	r3, #32
 800e3f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3f6:	e2e0      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e3f8:	2340      	movs	r3, #64	; 0x40
 800e3fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e3fe:	e2dc      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e400:	2380      	movs	r3, #128	; 0x80
 800e402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e406:	e2d8      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	4a51      	ldr	r2, [pc, #324]	; (800e554 <UART_SetConfig+0x344>)
 800e40e:	4293      	cmp	r3, r2
 800e410:	d130      	bne.n	800e474 <UART_SetConfig+0x264>
 800e412:	4b4e      	ldr	r3, [pc, #312]	; (800e54c <UART_SetConfig+0x33c>)
 800e414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e416:	f003 0307 	and.w	r3, r3, #7
 800e41a:	2b05      	cmp	r3, #5
 800e41c:	d826      	bhi.n	800e46c <UART_SetConfig+0x25c>
 800e41e:	a201      	add	r2, pc, #4	; (adr r2, 800e424 <UART_SetConfig+0x214>)
 800e420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e424:	0800e43d 	.word	0x0800e43d
 800e428:	0800e445 	.word	0x0800e445
 800e42c:	0800e44d 	.word	0x0800e44d
 800e430:	0800e455 	.word	0x0800e455
 800e434:	0800e45d 	.word	0x0800e45d
 800e438:	0800e465 	.word	0x0800e465
 800e43c:	2300      	movs	r3, #0
 800e43e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e442:	e2ba      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e444:	2304      	movs	r3, #4
 800e446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e44a:	e2b6      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e44c:	2308      	movs	r3, #8
 800e44e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e452:	e2b2      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e454:	2310      	movs	r3, #16
 800e456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e45a:	e2ae      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e45c:	2320      	movs	r3, #32
 800e45e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e462:	e2aa      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e464:	2340      	movs	r3, #64	; 0x40
 800e466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e46a:	e2a6      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e46c:	2380      	movs	r3, #128	; 0x80
 800e46e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e472:	e2a2      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	4a37      	ldr	r2, [pc, #220]	; (800e558 <UART_SetConfig+0x348>)
 800e47a:	4293      	cmp	r3, r2
 800e47c:	d130      	bne.n	800e4e0 <UART_SetConfig+0x2d0>
 800e47e:	4b33      	ldr	r3, [pc, #204]	; (800e54c <UART_SetConfig+0x33c>)
 800e480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e482:	f003 0307 	and.w	r3, r3, #7
 800e486:	2b05      	cmp	r3, #5
 800e488:	d826      	bhi.n	800e4d8 <UART_SetConfig+0x2c8>
 800e48a:	a201      	add	r2, pc, #4	; (adr r2, 800e490 <UART_SetConfig+0x280>)
 800e48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e490:	0800e4a9 	.word	0x0800e4a9
 800e494:	0800e4b1 	.word	0x0800e4b1
 800e498:	0800e4b9 	.word	0x0800e4b9
 800e49c:	0800e4c1 	.word	0x0800e4c1
 800e4a0:	0800e4c9 	.word	0x0800e4c9
 800e4a4:	0800e4d1 	.word	0x0800e4d1
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e4ae:	e284      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e4b0:	2304      	movs	r3, #4
 800e4b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e4b6:	e280      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e4b8:	2308      	movs	r3, #8
 800e4ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e4be:	e27c      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e4c0:	2310      	movs	r3, #16
 800e4c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e4c6:	e278      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e4c8:	2320      	movs	r3, #32
 800e4ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e4ce:	e274      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e4d0:	2340      	movs	r3, #64	; 0x40
 800e4d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e4d6:	e270      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e4d8:	2380      	movs	r3, #128	; 0x80
 800e4da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e4de:	e26c      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	4a1d      	ldr	r2, [pc, #116]	; (800e55c <UART_SetConfig+0x34c>)
 800e4e6:	4293      	cmp	r3, r2
 800e4e8:	d142      	bne.n	800e570 <UART_SetConfig+0x360>
 800e4ea:	4b18      	ldr	r3, [pc, #96]	; (800e54c <UART_SetConfig+0x33c>)
 800e4ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4ee:	f003 0307 	and.w	r3, r3, #7
 800e4f2:	2b05      	cmp	r3, #5
 800e4f4:	d838      	bhi.n	800e568 <UART_SetConfig+0x358>
 800e4f6:	a201      	add	r2, pc, #4	; (adr r2, 800e4fc <UART_SetConfig+0x2ec>)
 800e4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4fc:	0800e515 	.word	0x0800e515
 800e500:	0800e51d 	.word	0x0800e51d
 800e504:	0800e525 	.word	0x0800e525
 800e508:	0800e52d 	.word	0x0800e52d
 800e50c:	0800e535 	.word	0x0800e535
 800e510:	0800e561 	.word	0x0800e561
 800e514:	2300      	movs	r3, #0
 800e516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e51a:	e24e      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e51c:	2304      	movs	r3, #4
 800e51e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e522:	e24a      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e524:	2308      	movs	r3, #8
 800e526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e52a:	e246      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e52c:	2310      	movs	r3, #16
 800e52e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e532:	e242      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e534:	2320      	movs	r3, #32
 800e536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e53a:	e23e      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e53c:	cfff69f3 	.word	0xcfff69f3
 800e540:	58000c00 	.word	0x58000c00
 800e544:	11fff4ff 	.word	0x11fff4ff
 800e548:	40011000 	.word	0x40011000
 800e54c:	58024400 	.word	0x58024400
 800e550:	40004400 	.word	0x40004400
 800e554:	40004800 	.word	0x40004800
 800e558:	40004c00 	.word	0x40004c00
 800e55c:	40005000 	.word	0x40005000
 800e560:	2340      	movs	r3, #64	; 0x40
 800e562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e566:	e228      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e568:	2380      	movs	r3, #128	; 0x80
 800e56a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e56e:	e224      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	4ab1      	ldr	r2, [pc, #708]	; (800e83c <UART_SetConfig+0x62c>)
 800e576:	4293      	cmp	r3, r2
 800e578:	d176      	bne.n	800e668 <UART_SetConfig+0x458>
 800e57a:	4bb1      	ldr	r3, [pc, #708]	; (800e840 <UART_SetConfig+0x630>)
 800e57c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e57e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e582:	2b28      	cmp	r3, #40	; 0x28
 800e584:	d86c      	bhi.n	800e660 <UART_SetConfig+0x450>
 800e586:	a201      	add	r2, pc, #4	; (adr r2, 800e58c <UART_SetConfig+0x37c>)
 800e588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e58c:	0800e631 	.word	0x0800e631
 800e590:	0800e661 	.word	0x0800e661
 800e594:	0800e661 	.word	0x0800e661
 800e598:	0800e661 	.word	0x0800e661
 800e59c:	0800e661 	.word	0x0800e661
 800e5a0:	0800e661 	.word	0x0800e661
 800e5a4:	0800e661 	.word	0x0800e661
 800e5a8:	0800e661 	.word	0x0800e661
 800e5ac:	0800e639 	.word	0x0800e639
 800e5b0:	0800e661 	.word	0x0800e661
 800e5b4:	0800e661 	.word	0x0800e661
 800e5b8:	0800e661 	.word	0x0800e661
 800e5bc:	0800e661 	.word	0x0800e661
 800e5c0:	0800e661 	.word	0x0800e661
 800e5c4:	0800e661 	.word	0x0800e661
 800e5c8:	0800e661 	.word	0x0800e661
 800e5cc:	0800e641 	.word	0x0800e641
 800e5d0:	0800e661 	.word	0x0800e661
 800e5d4:	0800e661 	.word	0x0800e661
 800e5d8:	0800e661 	.word	0x0800e661
 800e5dc:	0800e661 	.word	0x0800e661
 800e5e0:	0800e661 	.word	0x0800e661
 800e5e4:	0800e661 	.word	0x0800e661
 800e5e8:	0800e661 	.word	0x0800e661
 800e5ec:	0800e649 	.word	0x0800e649
 800e5f0:	0800e661 	.word	0x0800e661
 800e5f4:	0800e661 	.word	0x0800e661
 800e5f8:	0800e661 	.word	0x0800e661
 800e5fc:	0800e661 	.word	0x0800e661
 800e600:	0800e661 	.word	0x0800e661
 800e604:	0800e661 	.word	0x0800e661
 800e608:	0800e661 	.word	0x0800e661
 800e60c:	0800e651 	.word	0x0800e651
 800e610:	0800e661 	.word	0x0800e661
 800e614:	0800e661 	.word	0x0800e661
 800e618:	0800e661 	.word	0x0800e661
 800e61c:	0800e661 	.word	0x0800e661
 800e620:	0800e661 	.word	0x0800e661
 800e624:	0800e661 	.word	0x0800e661
 800e628:	0800e661 	.word	0x0800e661
 800e62c:	0800e659 	.word	0x0800e659
 800e630:	2301      	movs	r3, #1
 800e632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e636:	e1c0      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e638:	2304      	movs	r3, #4
 800e63a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e63e:	e1bc      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e640:	2308      	movs	r3, #8
 800e642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e646:	e1b8      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e648:	2310      	movs	r3, #16
 800e64a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e64e:	e1b4      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e650:	2320      	movs	r3, #32
 800e652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e656:	e1b0      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e658:	2340      	movs	r3, #64	; 0x40
 800e65a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e65e:	e1ac      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e660:	2380      	movs	r3, #128	; 0x80
 800e662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e666:	e1a8      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	4a75      	ldr	r2, [pc, #468]	; (800e844 <UART_SetConfig+0x634>)
 800e66e:	4293      	cmp	r3, r2
 800e670:	d130      	bne.n	800e6d4 <UART_SetConfig+0x4c4>
 800e672:	4b73      	ldr	r3, [pc, #460]	; (800e840 <UART_SetConfig+0x630>)
 800e674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e676:	f003 0307 	and.w	r3, r3, #7
 800e67a:	2b05      	cmp	r3, #5
 800e67c:	d826      	bhi.n	800e6cc <UART_SetConfig+0x4bc>
 800e67e:	a201      	add	r2, pc, #4	; (adr r2, 800e684 <UART_SetConfig+0x474>)
 800e680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e684:	0800e69d 	.word	0x0800e69d
 800e688:	0800e6a5 	.word	0x0800e6a5
 800e68c:	0800e6ad 	.word	0x0800e6ad
 800e690:	0800e6b5 	.word	0x0800e6b5
 800e694:	0800e6bd 	.word	0x0800e6bd
 800e698:	0800e6c5 	.word	0x0800e6c5
 800e69c:	2300      	movs	r3, #0
 800e69e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6a2:	e18a      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e6a4:	2304      	movs	r3, #4
 800e6a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6aa:	e186      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e6ac:	2308      	movs	r3, #8
 800e6ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6b2:	e182      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e6b4:	2310      	movs	r3, #16
 800e6b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6ba:	e17e      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e6bc:	2320      	movs	r3, #32
 800e6be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6c2:	e17a      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e6c4:	2340      	movs	r3, #64	; 0x40
 800e6c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6ca:	e176      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e6cc:	2380      	movs	r3, #128	; 0x80
 800e6ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e6d2:	e172      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	4a5b      	ldr	r2, [pc, #364]	; (800e848 <UART_SetConfig+0x638>)
 800e6da:	4293      	cmp	r3, r2
 800e6dc:	d130      	bne.n	800e740 <UART_SetConfig+0x530>
 800e6de:	4b58      	ldr	r3, [pc, #352]	; (800e840 <UART_SetConfig+0x630>)
 800e6e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6e2:	f003 0307 	and.w	r3, r3, #7
 800e6e6:	2b05      	cmp	r3, #5
 800e6e8:	d826      	bhi.n	800e738 <UART_SetConfig+0x528>
 800e6ea:	a201      	add	r2, pc, #4	; (adr r2, 800e6f0 <UART_SetConfig+0x4e0>)
 800e6ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6f0:	0800e709 	.word	0x0800e709
 800e6f4:	0800e711 	.word	0x0800e711
 800e6f8:	0800e719 	.word	0x0800e719
 800e6fc:	0800e721 	.word	0x0800e721
 800e700:	0800e729 	.word	0x0800e729
 800e704:	0800e731 	.word	0x0800e731
 800e708:	2300      	movs	r3, #0
 800e70a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e70e:	e154      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e710:	2304      	movs	r3, #4
 800e712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e716:	e150      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e718:	2308      	movs	r3, #8
 800e71a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e71e:	e14c      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e720:	2310      	movs	r3, #16
 800e722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e726:	e148      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e728:	2320      	movs	r3, #32
 800e72a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e72e:	e144      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e730:	2340      	movs	r3, #64	; 0x40
 800e732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e736:	e140      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e738:	2380      	movs	r3, #128	; 0x80
 800e73a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e73e:	e13c      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	4a41      	ldr	r2, [pc, #260]	; (800e84c <UART_SetConfig+0x63c>)
 800e746:	4293      	cmp	r3, r2
 800e748:	f040 8082 	bne.w	800e850 <UART_SetConfig+0x640>
 800e74c:	4b3c      	ldr	r3, [pc, #240]	; (800e840 <UART_SetConfig+0x630>)
 800e74e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e750:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e754:	2b28      	cmp	r3, #40	; 0x28
 800e756:	d86d      	bhi.n	800e834 <UART_SetConfig+0x624>
 800e758:	a201      	add	r2, pc, #4	; (adr r2, 800e760 <UART_SetConfig+0x550>)
 800e75a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e75e:	bf00      	nop
 800e760:	0800e805 	.word	0x0800e805
 800e764:	0800e835 	.word	0x0800e835
 800e768:	0800e835 	.word	0x0800e835
 800e76c:	0800e835 	.word	0x0800e835
 800e770:	0800e835 	.word	0x0800e835
 800e774:	0800e835 	.word	0x0800e835
 800e778:	0800e835 	.word	0x0800e835
 800e77c:	0800e835 	.word	0x0800e835
 800e780:	0800e80d 	.word	0x0800e80d
 800e784:	0800e835 	.word	0x0800e835
 800e788:	0800e835 	.word	0x0800e835
 800e78c:	0800e835 	.word	0x0800e835
 800e790:	0800e835 	.word	0x0800e835
 800e794:	0800e835 	.word	0x0800e835
 800e798:	0800e835 	.word	0x0800e835
 800e79c:	0800e835 	.word	0x0800e835
 800e7a0:	0800e815 	.word	0x0800e815
 800e7a4:	0800e835 	.word	0x0800e835
 800e7a8:	0800e835 	.word	0x0800e835
 800e7ac:	0800e835 	.word	0x0800e835
 800e7b0:	0800e835 	.word	0x0800e835
 800e7b4:	0800e835 	.word	0x0800e835
 800e7b8:	0800e835 	.word	0x0800e835
 800e7bc:	0800e835 	.word	0x0800e835
 800e7c0:	0800e81d 	.word	0x0800e81d
 800e7c4:	0800e835 	.word	0x0800e835
 800e7c8:	0800e835 	.word	0x0800e835
 800e7cc:	0800e835 	.word	0x0800e835
 800e7d0:	0800e835 	.word	0x0800e835
 800e7d4:	0800e835 	.word	0x0800e835
 800e7d8:	0800e835 	.word	0x0800e835
 800e7dc:	0800e835 	.word	0x0800e835
 800e7e0:	0800e825 	.word	0x0800e825
 800e7e4:	0800e835 	.word	0x0800e835
 800e7e8:	0800e835 	.word	0x0800e835
 800e7ec:	0800e835 	.word	0x0800e835
 800e7f0:	0800e835 	.word	0x0800e835
 800e7f4:	0800e835 	.word	0x0800e835
 800e7f8:	0800e835 	.word	0x0800e835
 800e7fc:	0800e835 	.word	0x0800e835
 800e800:	0800e82d 	.word	0x0800e82d
 800e804:	2301      	movs	r3, #1
 800e806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e80a:	e0d6      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e80c:	2304      	movs	r3, #4
 800e80e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e812:	e0d2      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e814:	2308      	movs	r3, #8
 800e816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e81a:	e0ce      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e81c:	2310      	movs	r3, #16
 800e81e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e822:	e0ca      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e824:	2320      	movs	r3, #32
 800e826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e82a:	e0c6      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e82c:	2340      	movs	r3, #64	; 0x40
 800e82e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e832:	e0c2      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e834:	2380      	movs	r3, #128	; 0x80
 800e836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e83a:	e0be      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e83c:	40011400 	.word	0x40011400
 800e840:	58024400 	.word	0x58024400
 800e844:	40007800 	.word	0x40007800
 800e848:	40007c00 	.word	0x40007c00
 800e84c:	40011800 	.word	0x40011800
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	4aad      	ldr	r2, [pc, #692]	; (800eb0c <UART_SetConfig+0x8fc>)
 800e856:	4293      	cmp	r3, r2
 800e858:	d176      	bne.n	800e948 <UART_SetConfig+0x738>
 800e85a:	4bad      	ldr	r3, [pc, #692]	; (800eb10 <UART_SetConfig+0x900>)
 800e85c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e85e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e862:	2b28      	cmp	r3, #40	; 0x28
 800e864:	d86c      	bhi.n	800e940 <UART_SetConfig+0x730>
 800e866:	a201      	add	r2, pc, #4	; (adr r2, 800e86c <UART_SetConfig+0x65c>)
 800e868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e86c:	0800e911 	.word	0x0800e911
 800e870:	0800e941 	.word	0x0800e941
 800e874:	0800e941 	.word	0x0800e941
 800e878:	0800e941 	.word	0x0800e941
 800e87c:	0800e941 	.word	0x0800e941
 800e880:	0800e941 	.word	0x0800e941
 800e884:	0800e941 	.word	0x0800e941
 800e888:	0800e941 	.word	0x0800e941
 800e88c:	0800e919 	.word	0x0800e919
 800e890:	0800e941 	.word	0x0800e941
 800e894:	0800e941 	.word	0x0800e941
 800e898:	0800e941 	.word	0x0800e941
 800e89c:	0800e941 	.word	0x0800e941
 800e8a0:	0800e941 	.word	0x0800e941
 800e8a4:	0800e941 	.word	0x0800e941
 800e8a8:	0800e941 	.word	0x0800e941
 800e8ac:	0800e921 	.word	0x0800e921
 800e8b0:	0800e941 	.word	0x0800e941
 800e8b4:	0800e941 	.word	0x0800e941
 800e8b8:	0800e941 	.word	0x0800e941
 800e8bc:	0800e941 	.word	0x0800e941
 800e8c0:	0800e941 	.word	0x0800e941
 800e8c4:	0800e941 	.word	0x0800e941
 800e8c8:	0800e941 	.word	0x0800e941
 800e8cc:	0800e929 	.word	0x0800e929
 800e8d0:	0800e941 	.word	0x0800e941
 800e8d4:	0800e941 	.word	0x0800e941
 800e8d8:	0800e941 	.word	0x0800e941
 800e8dc:	0800e941 	.word	0x0800e941
 800e8e0:	0800e941 	.word	0x0800e941
 800e8e4:	0800e941 	.word	0x0800e941
 800e8e8:	0800e941 	.word	0x0800e941
 800e8ec:	0800e931 	.word	0x0800e931
 800e8f0:	0800e941 	.word	0x0800e941
 800e8f4:	0800e941 	.word	0x0800e941
 800e8f8:	0800e941 	.word	0x0800e941
 800e8fc:	0800e941 	.word	0x0800e941
 800e900:	0800e941 	.word	0x0800e941
 800e904:	0800e941 	.word	0x0800e941
 800e908:	0800e941 	.word	0x0800e941
 800e90c:	0800e939 	.word	0x0800e939
 800e910:	2301      	movs	r3, #1
 800e912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e916:	e050      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e918:	2304      	movs	r3, #4
 800e91a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e91e:	e04c      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e920:	2308      	movs	r3, #8
 800e922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e926:	e048      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e928:	2310      	movs	r3, #16
 800e92a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e92e:	e044      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e930:	2320      	movs	r3, #32
 800e932:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e936:	e040      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e938:	2340      	movs	r3, #64	; 0x40
 800e93a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e93e:	e03c      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e940:	2380      	movs	r3, #128	; 0x80
 800e942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e946:	e038      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	4a71      	ldr	r2, [pc, #452]	; (800eb14 <UART_SetConfig+0x904>)
 800e94e:	4293      	cmp	r3, r2
 800e950:	d130      	bne.n	800e9b4 <UART_SetConfig+0x7a4>
 800e952:	4b6f      	ldr	r3, [pc, #444]	; (800eb10 <UART_SetConfig+0x900>)
 800e954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e956:	f003 0307 	and.w	r3, r3, #7
 800e95a:	2b05      	cmp	r3, #5
 800e95c:	d826      	bhi.n	800e9ac <UART_SetConfig+0x79c>
 800e95e:	a201      	add	r2, pc, #4	; (adr r2, 800e964 <UART_SetConfig+0x754>)
 800e960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e964:	0800e97d 	.word	0x0800e97d
 800e968:	0800e985 	.word	0x0800e985
 800e96c:	0800e98d 	.word	0x0800e98d
 800e970:	0800e995 	.word	0x0800e995
 800e974:	0800e99d 	.word	0x0800e99d
 800e978:	0800e9a5 	.word	0x0800e9a5
 800e97c:	2302      	movs	r3, #2
 800e97e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e982:	e01a      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e984:	2304      	movs	r3, #4
 800e986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e98a:	e016      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e98c:	2308      	movs	r3, #8
 800e98e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e992:	e012      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e994:	2310      	movs	r3, #16
 800e996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e99a:	e00e      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e99c:	2320      	movs	r3, #32
 800e99e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9a2:	e00a      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e9a4:	2340      	movs	r3, #64	; 0x40
 800e9a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9aa:	e006      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e9ac:	2380      	movs	r3, #128	; 0x80
 800e9ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e9b2:	e002      	b.n	800e9ba <UART_SetConfig+0x7aa>
 800e9b4:	2380      	movs	r3, #128	; 0x80
 800e9b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	4a55      	ldr	r2, [pc, #340]	; (800eb14 <UART_SetConfig+0x904>)
 800e9c0:	4293      	cmp	r3, r2
 800e9c2:	f040 80f0 	bne.w	800eba6 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e9c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e9ca:	2b20      	cmp	r3, #32
 800e9cc:	dc46      	bgt.n	800ea5c <UART_SetConfig+0x84c>
 800e9ce:	2b02      	cmp	r3, #2
 800e9d0:	db75      	blt.n	800eabe <UART_SetConfig+0x8ae>
 800e9d2:	3b02      	subs	r3, #2
 800e9d4:	2b1e      	cmp	r3, #30
 800e9d6:	d872      	bhi.n	800eabe <UART_SetConfig+0x8ae>
 800e9d8:	a201      	add	r2, pc, #4	; (adr r2, 800e9e0 <UART_SetConfig+0x7d0>)
 800e9da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9de:	bf00      	nop
 800e9e0:	0800ea63 	.word	0x0800ea63
 800e9e4:	0800eabf 	.word	0x0800eabf
 800e9e8:	0800ea6b 	.word	0x0800ea6b
 800e9ec:	0800eabf 	.word	0x0800eabf
 800e9f0:	0800eabf 	.word	0x0800eabf
 800e9f4:	0800eabf 	.word	0x0800eabf
 800e9f8:	0800ea7b 	.word	0x0800ea7b
 800e9fc:	0800eabf 	.word	0x0800eabf
 800ea00:	0800eabf 	.word	0x0800eabf
 800ea04:	0800eabf 	.word	0x0800eabf
 800ea08:	0800eabf 	.word	0x0800eabf
 800ea0c:	0800eabf 	.word	0x0800eabf
 800ea10:	0800eabf 	.word	0x0800eabf
 800ea14:	0800eabf 	.word	0x0800eabf
 800ea18:	0800ea8b 	.word	0x0800ea8b
 800ea1c:	0800eabf 	.word	0x0800eabf
 800ea20:	0800eabf 	.word	0x0800eabf
 800ea24:	0800eabf 	.word	0x0800eabf
 800ea28:	0800eabf 	.word	0x0800eabf
 800ea2c:	0800eabf 	.word	0x0800eabf
 800ea30:	0800eabf 	.word	0x0800eabf
 800ea34:	0800eabf 	.word	0x0800eabf
 800ea38:	0800eabf 	.word	0x0800eabf
 800ea3c:	0800eabf 	.word	0x0800eabf
 800ea40:	0800eabf 	.word	0x0800eabf
 800ea44:	0800eabf 	.word	0x0800eabf
 800ea48:	0800eabf 	.word	0x0800eabf
 800ea4c:	0800eabf 	.word	0x0800eabf
 800ea50:	0800eabf 	.word	0x0800eabf
 800ea54:	0800eabf 	.word	0x0800eabf
 800ea58:	0800eab1 	.word	0x0800eab1
 800ea5c:	2b40      	cmp	r3, #64	; 0x40
 800ea5e:	d02a      	beq.n	800eab6 <UART_SetConfig+0x8a6>
 800ea60:	e02d      	b.n	800eabe <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ea62:	f7fc fe3f 	bl	800b6e4 <HAL_RCCEx_GetD3PCLK1Freq>
 800ea66:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ea68:	e02f      	b.n	800eaca <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea6a:	f107 0314 	add.w	r3, r7, #20
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f7fc fe4e 	bl	800b710 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ea74:	69bb      	ldr	r3, [r7, #24]
 800ea76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ea78:	e027      	b.n	800eaca <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ea7a:	f107 0308 	add.w	r3, r7, #8
 800ea7e:	4618      	mov	r0, r3
 800ea80:	f7fc ff9a 	bl	800b9b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ea88:	e01f      	b.n	800eaca <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ea8a:	4b21      	ldr	r3, [pc, #132]	; (800eb10 <UART_SetConfig+0x900>)
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	f003 0320 	and.w	r3, r3, #32
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d009      	beq.n	800eaaa <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ea96:	4b1e      	ldr	r3, [pc, #120]	; (800eb10 <UART_SetConfig+0x900>)
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	08db      	lsrs	r3, r3, #3
 800ea9c:	f003 0303 	and.w	r3, r3, #3
 800eaa0:	4a1d      	ldr	r2, [pc, #116]	; (800eb18 <UART_SetConfig+0x908>)
 800eaa2:	fa22 f303 	lsr.w	r3, r2, r3
 800eaa6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eaa8:	e00f      	b.n	800eaca <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800eaaa:	4b1b      	ldr	r3, [pc, #108]	; (800eb18 <UART_SetConfig+0x908>)
 800eaac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800eaae:	e00c      	b.n	800eaca <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eab0:	4b1a      	ldr	r3, [pc, #104]	; (800eb1c <UART_SetConfig+0x90c>)
 800eab2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800eab4:	e009      	b.n	800eaca <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eaba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800eabc:	e005      	b.n	800eaca <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800eabe:	2300      	movs	r3, #0
 800eac0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800eac2:	2301      	movs	r3, #1
 800eac4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800eac8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800eaca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eacc:	2b00      	cmp	r3, #0
 800eace:	f000 81e6 	beq.w	800ee9e <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ead6:	4a12      	ldr	r2, [pc, #72]	; (800eb20 <UART_SetConfig+0x910>)
 800ead8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eadc:	461a      	mov	r2, r3
 800eade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eae0:	fbb3 f3f2 	udiv	r3, r3, r2
 800eae4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	685a      	ldr	r2, [r3, #4]
 800eaea:	4613      	mov	r3, r2
 800eaec:	005b      	lsls	r3, r3, #1
 800eaee:	4413      	add	r3, r2
 800eaf0:	6a3a      	ldr	r2, [r7, #32]
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d305      	bcc.n	800eb02 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	685b      	ldr	r3, [r3, #4]
 800eafa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eafc:	6a3a      	ldr	r2, [r7, #32]
 800eafe:	429a      	cmp	r2, r3
 800eb00:	d910      	bls.n	800eb24 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800eb02:	2301      	movs	r3, #1
 800eb04:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800eb08:	e1c9      	b.n	800ee9e <UART_SetConfig+0xc8e>
 800eb0a:	bf00      	nop
 800eb0c:	40011c00 	.word	0x40011c00
 800eb10:	58024400 	.word	0x58024400
 800eb14:	58000c00 	.word	0x58000c00
 800eb18:	03d09000 	.word	0x03d09000
 800eb1c:	003d0900 	.word	0x003d0900
 800eb20:	0801188c 	.word	0x0801188c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eb24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb26:	4618      	mov	r0, r3
 800eb28:	f04f 0100 	mov.w	r1, #0
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb30:	4ac1      	ldr	r2, [pc, #772]	; (800ee38 <UART_SetConfig+0xc28>)
 800eb32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb36:	b29a      	uxth	r2, r3
 800eb38:	f04f 0300 	mov.w	r3, #0
 800eb3c:	f7f1 fbf0 	bl	8000320 <__aeabi_uldivmod>
 800eb40:	4602      	mov	r2, r0
 800eb42:	460b      	mov	r3, r1
 800eb44:	4610      	mov	r0, r2
 800eb46:	4619      	mov	r1, r3
 800eb48:	f04f 0200 	mov.w	r2, #0
 800eb4c:	f04f 0300 	mov.w	r3, #0
 800eb50:	020b      	lsls	r3, r1, #8
 800eb52:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800eb56:	0202      	lsls	r2, r0, #8
 800eb58:	6879      	ldr	r1, [r7, #4]
 800eb5a:	6849      	ldr	r1, [r1, #4]
 800eb5c:	0849      	lsrs	r1, r1, #1
 800eb5e:	4608      	mov	r0, r1
 800eb60:	f04f 0100 	mov.w	r1, #0
 800eb64:	1814      	adds	r4, r2, r0
 800eb66:	eb43 0501 	adc.w	r5, r3, r1
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	685b      	ldr	r3, [r3, #4]
 800eb6e:	461a      	mov	r2, r3
 800eb70:	f04f 0300 	mov.w	r3, #0
 800eb74:	4620      	mov	r0, r4
 800eb76:	4629      	mov	r1, r5
 800eb78:	f7f1 fbd2 	bl	8000320 <__aeabi_uldivmod>
 800eb7c:	4602      	mov	r2, r0
 800eb7e:	460b      	mov	r3, r1
 800eb80:	4613      	mov	r3, r2
 800eb82:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800eb84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800eb8a:	d308      	bcc.n	800eb9e <UART_SetConfig+0x98e>
 800eb8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb92:	d204      	bcs.n	800eb9e <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb9a:	60da      	str	r2, [r3, #12]
 800eb9c:	e17f      	b.n	800ee9e <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800eb9e:	2301      	movs	r3, #1
 800eba0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800eba4:	e17b      	b.n	800ee9e <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	69db      	ldr	r3, [r3, #28]
 800ebaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ebae:	f040 80bd 	bne.w	800ed2c <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800ebb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ebb6:	2b20      	cmp	r3, #32
 800ebb8:	dc48      	bgt.n	800ec4c <UART_SetConfig+0xa3c>
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	db7b      	blt.n	800ecb6 <UART_SetConfig+0xaa6>
 800ebbe:	2b20      	cmp	r3, #32
 800ebc0:	d879      	bhi.n	800ecb6 <UART_SetConfig+0xaa6>
 800ebc2:	a201      	add	r2, pc, #4	; (adr r2, 800ebc8 <UART_SetConfig+0x9b8>)
 800ebc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebc8:	0800ec53 	.word	0x0800ec53
 800ebcc:	0800ec5b 	.word	0x0800ec5b
 800ebd0:	0800ecb7 	.word	0x0800ecb7
 800ebd4:	0800ecb7 	.word	0x0800ecb7
 800ebd8:	0800ec63 	.word	0x0800ec63
 800ebdc:	0800ecb7 	.word	0x0800ecb7
 800ebe0:	0800ecb7 	.word	0x0800ecb7
 800ebe4:	0800ecb7 	.word	0x0800ecb7
 800ebe8:	0800ec73 	.word	0x0800ec73
 800ebec:	0800ecb7 	.word	0x0800ecb7
 800ebf0:	0800ecb7 	.word	0x0800ecb7
 800ebf4:	0800ecb7 	.word	0x0800ecb7
 800ebf8:	0800ecb7 	.word	0x0800ecb7
 800ebfc:	0800ecb7 	.word	0x0800ecb7
 800ec00:	0800ecb7 	.word	0x0800ecb7
 800ec04:	0800ecb7 	.word	0x0800ecb7
 800ec08:	0800ec83 	.word	0x0800ec83
 800ec0c:	0800ecb7 	.word	0x0800ecb7
 800ec10:	0800ecb7 	.word	0x0800ecb7
 800ec14:	0800ecb7 	.word	0x0800ecb7
 800ec18:	0800ecb7 	.word	0x0800ecb7
 800ec1c:	0800ecb7 	.word	0x0800ecb7
 800ec20:	0800ecb7 	.word	0x0800ecb7
 800ec24:	0800ecb7 	.word	0x0800ecb7
 800ec28:	0800ecb7 	.word	0x0800ecb7
 800ec2c:	0800ecb7 	.word	0x0800ecb7
 800ec30:	0800ecb7 	.word	0x0800ecb7
 800ec34:	0800ecb7 	.word	0x0800ecb7
 800ec38:	0800ecb7 	.word	0x0800ecb7
 800ec3c:	0800ecb7 	.word	0x0800ecb7
 800ec40:	0800ecb7 	.word	0x0800ecb7
 800ec44:	0800ecb7 	.word	0x0800ecb7
 800ec48:	0800eca9 	.word	0x0800eca9
 800ec4c:	2b40      	cmp	r3, #64	; 0x40
 800ec4e:	d02e      	beq.n	800ecae <UART_SetConfig+0xa9e>
 800ec50:	e031      	b.n	800ecb6 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ec52:	f7fb fe21 	bl	800a898 <HAL_RCC_GetPCLK1Freq>
 800ec56:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ec58:	e033      	b.n	800ecc2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ec5a:	f7fb fe33 	bl	800a8c4 <HAL_RCC_GetPCLK2Freq>
 800ec5e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ec60:	e02f      	b.n	800ecc2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ec62:	f107 0314 	add.w	r3, r7, #20
 800ec66:	4618      	mov	r0, r3
 800ec68:	f7fc fd52 	bl	800b710 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ec6c:	69bb      	ldr	r3, [r7, #24]
 800ec6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ec70:	e027      	b.n	800ecc2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ec72:	f107 0308 	add.w	r3, r7, #8
 800ec76:	4618      	mov	r0, r3
 800ec78:	f7fc fe9e 	bl	800b9b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ec80:	e01f      	b.n	800ecc2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ec82:	4b6e      	ldr	r3, [pc, #440]	; (800ee3c <UART_SetConfig+0xc2c>)
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	f003 0320 	and.w	r3, r3, #32
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d009      	beq.n	800eca2 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ec8e:	4b6b      	ldr	r3, [pc, #428]	; (800ee3c <UART_SetConfig+0xc2c>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	08db      	lsrs	r3, r3, #3
 800ec94:	f003 0303 	and.w	r3, r3, #3
 800ec98:	4a69      	ldr	r2, [pc, #420]	; (800ee40 <UART_SetConfig+0xc30>)
 800ec9a:	fa22 f303 	lsr.w	r3, r2, r3
 800ec9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eca0:	e00f      	b.n	800ecc2 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800eca2:	4b67      	ldr	r3, [pc, #412]	; (800ee40 <UART_SetConfig+0xc30>)
 800eca4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800eca6:	e00c      	b.n	800ecc2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eca8:	4b66      	ldr	r3, [pc, #408]	; (800ee44 <UART_SetConfig+0xc34>)
 800ecaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ecac:	e009      	b.n	800ecc2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ecae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ecb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ecb4:	e005      	b.n	800ecc2 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ecba:	2301      	movs	r3, #1
 800ecbc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ecc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ecc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	f000 80ea 	beq.w	800ee9e <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecce:	4a5a      	ldr	r2, [pc, #360]	; (800ee38 <UART_SetConfig+0xc28>)
 800ecd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ecd4:	461a      	mov	r2, r3
 800ecd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecd8:	fbb3 f3f2 	udiv	r3, r3, r2
 800ecdc:	005a      	lsls	r2, r3, #1
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	685b      	ldr	r3, [r3, #4]
 800ece2:	085b      	lsrs	r3, r3, #1
 800ece4:	441a      	add	r2, r3
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	685b      	ldr	r3, [r3, #4]
 800ecea:	fbb2 f3f3 	udiv	r3, r2, r3
 800ecee:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ecf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecf2:	2b0f      	cmp	r3, #15
 800ecf4:	d916      	bls.n	800ed24 <UART_SetConfig+0xb14>
 800ecf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecfc:	d212      	bcs.n	800ed24 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ecfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed00:	b29b      	uxth	r3, r3
 800ed02:	f023 030f 	bic.w	r3, r3, #15
 800ed06:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ed08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed0a:	085b      	lsrs	r3, r3, #1
 800ed0c:	b29b      	uxth	r3, r3
 800ed0e:	f003 0307 	and.w	r3, r3, #7
 800ed12:	b29a      	uxth	r2, r3
 800ed14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ed16:	4313      	orrs	r3, r2
 800ed18:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ed20:	60da      	str	r2, [r3, #12]
 800ed22:	e0bc      	b.n	800ee9e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800ed24:	2301      	movs	r3, #1
 800ed26:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ed2a:	e0b8      	b.n	800ee9e <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ed2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ed30:	2b20      	cmp	r3, #32
 800ed32:	dc4b      	bgt.n	800edcc <UART_SetConfig+0xbbc>
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	f2c0 8087 	blt.w	800ee48 <UART_SetConfig+0xc38>
 800ed3a:	2b20      	cmp	r3, #32
 800ed3c:	f200 8084 	bhi.w	800ee48 <UART_SetConfig+0xc38>
 800ed40:	a201      	add	r2, pc, #4	; (adr r2, 800ed48 <UART_SetConfig+0xb38>)
 800ed42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed46:	bf00      	nop
 800ed48:	0800edd3 	.word	0x0800edd3
 800ed4c:	0800eddb 	.word	0x0800eddb
 800ed50:	0800ee49 	.word	0x0800ee49
 800ed54:	0800ee49 	.word	0x0800ee49
 800ed58:	0800ede3 	.word	0x0800ede3
 800ed5c:	0800ee49 	.word	0x0800ee49
 800ed60:	0800ee49 	.word	0x0800ee49
 800ed64:	0800ee49 	.word	0x0800ee49
 800ed68:	0800edf3 	.word	0x0800edf3
 800ed6c:	0800ee49 	.word	0x0800ee49
 800ed70:	0800ee49 	.word	0x0800ee49
 800ed74:	0800ee49 	.word	0x0800ee49
 800ed78:	0800ee49 	.word	0x0800ee49
 800ed7c:	0800ee49 	.word	0x0800ee49
 800ed80:	0800ee49 	.word	0x0800ee49
 800ed84:	0800ee49 	.word	0x0800ee49
 800ed88:	0800ee03 	.word	0x0800ee03
 800ed8c:	0800ee49 	.word	0x0800ee49
 800ed90:	0800ee49 	.word	0x0800ee49
 800ed94:	0800ee49 	.word	0x0800ee49
 800ed98:	0800ee49 	.word	0x0800ee49
 800ed9c:	0800ee49 	.word	0x0800ee49
 800eda0:	0800ee49 	.word	0x0800ee49
 800eda4:	0800ee49 	.word	0x0800ee49
 800eda8:	0800ee49 	.word	0x0800ee49
 800edac:	0800ee49 	.word	0x0800ee49
 800edb0:	0800ee49 	.word	0x0800ee49
 800edb4:	0800ee49 	.word	0x0800ee49
 800edb8:	0800ee49 	.word	0x0800ee49
 800edbc:	0800ee49 	.word	0x0800ee49
 800edc0:	0800ee49 	.word	0x0800ee49
 800edc4:	0800ee49 	.word	0x0800ee49
 800edc8:	0800ee29 	.word	0x0800ee29
 800edcc:	2b40      	cmp	r3, #64	; 0x40
 800edce:	d02e      	beq.n	800ee2e <UART_SetConfig+0xc1e>
 800edd0:	e03a      	b.n	800ee48 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800edd2:	f7fb fd61 	bl	800a898 <HAL_RCC_GetPCLK1Freq>
 800edd6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800edd8:	e03c      	b.n	800ee54 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800edda:	f7fb fd73 	bl	800a8c4 <HAL_RCC_GetPCLK2Freq>
 800edde:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ede0:	e038      	b.n	800ee54 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ede2:	f107 0314 	add.w	r3, r7, #20
 800ede6:	4618      	mov	r0, r3
 800ede8:	f7fc fc92 	bl	800b710 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800edec:	69bb      	ldr	r3, [r7, #24]
 800edee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800edf0:	e030      	b.n	800ee54 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800edf2:	f107 0308 	add.w	r3, r7, #8
 800edf6:	4618      	mov	r0, r3
 800edf8:	f7fc fdde 	bl	800b9b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ee00:	e028      	b.n	800ee54 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ee02:	4b0e      	ldr	r3, [pc, #56]	; (800ee3c <UART_SetConfig+0xc2c>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	f003 0320 	and.w	r3, r3, #32
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d009      	beq.n	800ee22 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ee0e:	4b0b      	ldr	r3, [pc, #44]	; (800ee3c <UART_SetConfig+0xc2c>)
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	08db      	lsrs	r3, r3, #3
 800ee14:	f003 0303 	and.w	r3, r3, #3
 800ee18:	4a09      	ldr	r2, [pc, #36]	; (800ee40 <UART_SetConfig+0xc30>)
 800ee1a:	fa22 f303 	lsr.w	r3, r2, r3
 800ee1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ee20:	e018      	b.n	800ee54 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800ee22:	4b07      	ldr	r3, [pc, #28]	; (800ee40 <UART_SetConfig+0xc30>)
 800ee24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ee26:	e015      	b.n	800ee54 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ee28:	4b06      	ldr	r3, [pc, #24]	; (800ee44 <UART_SetConfig+0xc34>)
 800ee2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ee2c:	e012      	b.n	800ee54 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ee2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ee34:	e00e      	b.n	800ee54 <UART_SetConfig+0xc44>
 800ee36:	bf00      	nop
 800ee38:	0801188c 	.word	0x0801188c
 800ee3c:	58024400 	.word	0x58024400
 800ee40:	03d09000 	.word	0x03d09000
 800ee44:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800ee48:	2300      	movs	r3, #0
 800ee4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ee52:	bf00      	nop
    }

    if (pclk != 0U)
 800ee54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d021      	beq.n	800ee9e <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee5e:	4a1a      	ldr	r2, [pc, #104]	; (800eec8 <UART_SetConfig+0xcb8>)
 800ee60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ee64:	461a      	mov	r2, r3
 800ee66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee68:	fbb3 f2f2 	udiv	r2, r3, r2
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	685b      	ldr	r3, [r3, #4]
 800ee70:	085b      	lsrs	r3, r3, #1
 800ee72:	441a      	add	r2, r3
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	685b      	ldr	r3, [r3, #4]
 800ee78:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee7c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ee7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee80:	2b0f      	cmp	r3, #15
 800ee82:	d909      	bls.n	800ee98 <UART_SetConfig+0xc88>
 800ee84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee8a:	d205      	bcs.n	800ee98 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ee8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee8e:	b29a      	uxth	r2, r3
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	60da      	str	r2, [r3, #12]
 800ee96:	e002      	b.n	800ee9e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800ee98:	2301      	movs	r3, #1
 800ee9a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	2201      	movs	r2, #1
 800eea2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	2201      	movs	r2, #1
 800eeaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800eeba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800eebe:	4618      	mov	r0, r3
 800eec0:	3738      	adds	r7, #56	; 0x38
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bdb0      	pop	{r4, r5, r7, pc}
 800eec6:	bf00      	nop
 800eec8:	0801188c 	.word	0x0801188c

0800eecc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800eecc:	b480      	push	{r7}
 800eece:	b083      	sub	sp, #12
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eed8:	f003 0301 	and.w	r3, r3, #1
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d00a      	beq.n	800eef6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	685b      	ldr	r3, [r3, #4]
 800eee6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	430a      	orrs	r2, r1
 800eef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eefa:	f003 0302 	and.w	r3, r3, #2
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d00a      	beq.n	800ef18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	685b      	ldr	r3, [r3, #4]
 800ef08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	430a      	orrs	r2, r1
 800ef16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef1c:	f003 0304 	and.w	r3, r3, #4
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d00a      	beq.n	800ef3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	685b      	ldr	r3, [r3, #4]
 800ef2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	430a      	orrs	r2, r1
 800ef38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef3e:	f003 0308 	and.w	r3, r3, #8
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d00a      	beq.n	800ef5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	685b      	ldr	r3, [r3, #4]
 800ef4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	430a      	orrs	r2, r1
 800ef5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef60:	f003 0310 	and.w	r3, r3, #16
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d00a      	beq.n	800ef7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	689b      	ldr	r3, [r3, #8]
 800ef6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	430a      	orrs	r2, r1
 800ef7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef82:	f003 0320 	and.w	r3, r3, #32
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d00a      	beq.n	800efa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	689b      	ldr	r3, [r3, #8]
 800ef90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	430a      	orrs	r2, r1
 800ef9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d01a      	beq.n	800efe2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	685b      	ldr	r3, [r3, #4]
 800efb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	430a      	orrs	r2, r1
 800efc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800efc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800efca:	d10a      	bne.n	800efe2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	685b      	ldr	r3, [r3, #4]
 800efd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	430a      	orrs	r2, r1
 800efe0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800efea:	2b00      	cmp	r3, #0
 800efec:	d00a      	beq.n	800f004 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	685b      	ldr	r3, [r3, #4]
 800eff4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	430a      	orrs	r2, r1
 800f002:	605a      	str	r2, [r3, #4]
  }
}
 800f004:	bf00      	nop
 800f006:	370c      	adds	r7, #12
 800f008:	46bd      	mov	sp, r7
 800f00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00e:	4770      	bx	lr

0800f010 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b086      	sub	sp, #24
 800f014:	af02      	add	r7, sp, #8
 800f016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2200      	movs	r2, #0
 800f01c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f020:	f7f7 fbde 	bl	80067e0 <HAL_GetTick>
 800f024:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	f003 0308 	and.w	r3, r3, #8
 800f030:	2b08      	cmp	r3, #8
 800f032:	d10e      	bne.n	800f052 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f034:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f038:	9300      	str	r3, [sp, #0]
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	2200      	movs	r2, #0
 800f03e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	f000 f82f 	bl	800f0a6 <UART_WaitOnFlagUntilTimeout>
 800f048:	4603      	mov	r3, r0
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d001      	beq.n	800f052 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f04e:	2303      	movs	r3, #3
 800f050:	e025      	b.n	800f09e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	f003 0304 	and.w	r3, r3, #4
 800f05c:	2b04      	cmp	r3, #4
 800f05e:	d10e      	bne.n	800f07e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f060:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f064:	9300      	str	r3, [sp, #0]
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	2200      	movs	r2, #0
 800f06a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f06e:	6878      	ldr	r0, [r7, #4]
 800f070:	f000 f819 	bl	800f0a6 <UART_WaitOnFlagUntilTimeout>
 800f074:	4603      	mov	r3, r0
 800f076:	2b00      	cmp	r3, #0
 800f078:	d001      	beq.n	800f07e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f07a:	2303      	movs	r3, #3
 800f07c:	e00f      	b.n	800f09e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	2220      	movs	r2, #32
 800f082:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	2220      	movs	r2, #32
 800f08a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2200      	movs	r2, #0
 800f092:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2200      	movs	r2, #0
 800f098:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f09c:	2300      	movs	r3, #0
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	3710      	adds	r7, #16
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}

0800f0a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f0a6:	b580      	push	{r7, lr}
 800f0a8:	b09c      	sub	sp, #112	; 0x70
 800f0aa:	af00      	add	r7, sp, #0
 800f0ac:	60f8      	str	r0, [r7, #12]
 800f0ae:	60b9      	str	r1, [r7, #8]
 800f0b0:	603b      	str	r3, [r7, #0]
 800f0b2:	4613      	mov	r3, r2
 800f0b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f0b6:	e0a9      	b.n	800f20c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f0b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f0ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0be:	f000 80a5 	beq.w	800f20c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f0c2:	f7f7 fb8d 	bl	80067e0 <HAL_GetTick>
 800f0c6:	4602      	mov	r2, r0
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	1ad3      	subs	r3, r2, r3
 800f0cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	d302      	bcc.n	800f0d8 <UART_WaitOnFlagUntilTimeout+0x32>
 800f0d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d140      	bne.n	800f15a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0e0:	e853 3f00 	ldrex	r3, [r3]
 800f0e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f0e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f0ec:	667b      	str	r3, [r7, #100]	; 0x64
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	461a      	mov	r2, r3
 800f0f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f0f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f0f8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f0fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f0fe:	e841 2300 	strex	r3, r2, [r1]
 800f102:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f106:	2b00      	cmp	r3, #0
 800f108:	d1e6      	bne.n	800f0d8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	3308      	adds	r3, #8
 800f110:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f114:	e853 3f00 	ldrex	r3, [r3]
 800f118:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f11c:	f023 0301 	bic.w	r3, r3, #1
 800f120:	663b      	str	r3, [r7, #96]	; 0x60
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	3308      	adds	r3, #8
 800f128:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f12a:	64ba      	str	r2, [r7, #72]	; 0x48
 800f12c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f12e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f130:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f132:	e841 2300 	strex	r3, r2, [r1]
 800f136:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d1e5      	bne.n	800f10a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	2220      	movs	r2, #32
 800f142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	2220      	movs	r2, #32
 800f14a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	2200      	movs	r2, #0
 800f152:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f156:	2303      	movs	r3, #3
 800f158:	e069      	b.n	800f22e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	f003 0304 	and.w	r3, r3, #4
 800f164:	2b00      	cmp	r3, #0
 800f166:	d051      	beq.n	800f20c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	69db      	ldr	r3, [r3, #28]
 800f16e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f176:	d149      	bne.n	800f20c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f180:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f18a:	e853 3f00 	ldrex	r3, [r3]
 800f18e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f192:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f196:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	461a      	mov	r2, r3
 800f19e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f1a0:	637b      	str	r3, [r7, #52]	; 0x34
 800f1a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f1a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f1a8:	e841 2300 	strex	r3, r2, [r1]
 800f1ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d1e6      	bne.n	800f182 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	3308      	adds	r3, #8
 800f1ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	e853 3f00 	ldrex	r3, [r3]
 800f1c2:	613b      	str	r3, [r7, #16]
   return(result);
 800f1c4:	693b      	ldr	r3, [r7, #16]
 800f1c6:	f023 0301 	bic.w	r3, r3, #1
 800f1ca:	66bb      	str	r3, [r7, #104]	; 0x68
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	3308      	adds	r3, #8
 800f1d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f1d4:	623a      	str	r2, [r7, #32]
 800f1d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1d8:	69f9      	ldr	r1, [r7, #28]
 800f1da:	6a3a      	ldr	r2, [r7, #32]
 800f1dc:	e841 2300 	strex	r3, r2, [r1]
 800f1e0:	61bb      	str	r3, [r7, #24]
   return(result);
 800f1e2:	69bb      	ldr	r3, [r7, #24]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d1e5      	bne.n	800f1b4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	2220      	movs	r2, #32
 800f1ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	2220      	movs	r2, #32
 800f1f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	2220      	movs	r2, #32
 800f1fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	2200      	movs	r2, #0
 800f204:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f208:	2303      	movs	r3, #3
 800f20a:	e010      	b.n	800f22e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	69da      	ldr	r2, [r3, #28]
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	4013      	ands	r3, r2
 800f216:	68ba      	ldr	r2, [r7, #8]
 800f218:	429a      	cmp	r2, r3
 800f21a:	bf0c      	ite	eq
 800f21c:	2301      	moveq	r3, #1
 800f21e:	2300      	movne	r3, #0
 800f220:	b2db      	uxtb	r3, r3
 800f222:	461a      	mov	r2, r3
 800f224:	79fb      	ldrb	r3, [r7, #7]
 800f226:	429a      	cmp	r2, r3
 800f228:	f43f af46 	beq.w	800f0b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f22c:	2300      	movs	r3, #0
}
 800f22e:	4618      	mov	r0, r3
 800f230:	3770      	adds	r7, #112	; 0x70
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}
	...

0800f238 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f238:	b580      	push	{r7, lr}
 800f23a:	b096      	sub	sp, #88	; 0x58
 800f23c:	af00      	add	r7, sp, #0
 800f23e:	60f8      	str	r0, [r7, #12]
 800f240:	60b9      	str	r1, [r7, #8]
 800f242:	4613      	mov	r3, r2
 800f244:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	68ba      	ldr	r2, [r7, #8]
 800f24a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	88fa      	ldrh	r2, [r7, #6]
 800f250:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	2200      	movs	r2, #0
 800f258:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	2222      	movs	r2, #34	; 0x22
 800f260:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d02c      	beq.n	800f2c6 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f270:	4a42      	ldr	r2, [pc, #264]	; (800f37c <UART_Start_Receive_DMA+0x144>)
 800f272:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f278:	4a41      	ldr	r2, [pc, #260]	; (800f380 <UART_Start_Receive_DMA+0x148>)
 800f27a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f280:	4a40      	ldr	r2, [pc, #256]	; (800f384 <UART_Start_Receive_DMA+0x14c>)
 800f282:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f288:	2200      	movs	r2, #0
 800f28a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	3324      	adds	r3, #36	; 0x24
 800f296:	4619      	mov	r1, r3
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f29c:	461a      	mov	r2, r3
 800f29e:	88fb      	ldrh	r3, [r7, #6]
 800f2a0:	f7f7 ff14 	bl	80070cc <HAL_DMA_Start_IT>
 800f2a4:	4603      	mov	r3, r0
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d00d      	beq.n	800f2c6 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	2210      	movs	r2, #16
 800f2ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	2220      	movs	r2, #32
 800f2be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800f2c2:	2301      	movs	r3, #1
 800f2c4:	e055      	b.n	800f372 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	691b      	ldr	r3, [r3, #16]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d018      	beq.n	800f308 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f2dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2de:	e853 3f00 	ldrex	r3, [r3]
 800f2e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f2ea:	657b      	str	r3, [r7, #84]	; 0x54
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	461a      	mov	r2, r3
 800f2f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f2f6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f2f8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f2fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f2fc:	e841 2300 	strex	r3, r2, [r1]
 800f300:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f304:	2b00      	cmp	r3, #0
 800f306:	d1e6      	bne.n	800f2d6 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	3308      	adds	r3, #8
 800f30e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f312:	e853 3f00 	ldrex	r3, [r3]
 800f316:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f31a:	f043 0301 	orr.w	r3, r3, #1
 800f31e:	653b      	str	r3, [r7, #80]	; 0x50
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	3308      	adds	r3, #8
 800f326:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f328:	637a      	str	r2, [r7, #52]	; 0x34
 800f32a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f32c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f32e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f330:	e841 2300 	strex	r3, r2, [r1]
 800f334:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d1e5      	bne.n	800f308 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	3308      	adds	r3, #8
 800f342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	e853 3f00 	ldrex	r3, [r3]
 800f34a:	613b      	str	r3, [r7, #16]
   return(result);
 800f34c:	693b      	ldr	r3, [r7, #16]
 800f34e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f352:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	3308      	adds	r3, #8
 800f35a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f35c:	623a      	str	r2, [r7, #32]
 800f35e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f360:	69f9      	ldr	r1, [r7, #28]
 800f362:	6a3a      	ldr	r2, [r7, #32]
 800f364:	e841 2300 	strex	r3, r2, [r1]
 800f368:	61bb      	str	r3, [r7, #24]
   return(result);
 800f36a:	69bb      	ldr	r3, [r7, #24]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d1e5      	bne.n	800f33c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800f370:	2300      	movs	r3, #0
}
 800f372:	4618      	mov	r0, r3
 800f374:	3758      	adds	r7, #88	; 0x58
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}
 800f37a:	bf00      	nop
 800f37c:	0800f58b 	.word	0x0800f58b
 800f380:	0800f6ad 	.word	0x0800f6ad
 800f384:	0800f6e5 	.word	0x0800f6e5

0800f388 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f388:	b480      	push	{r7}
 800f38a:	b08f      	sub	sp, #60	; 0x3c
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f396:	6a3b      	ldr	r3, [r7, #32]
 800f398:	e853 3f00 	ldrex	r3, [r3]
 800f39c:	61fb      	str	r3, [r7, #28]
   return(result);
 800f39e:	69fb      	ldr	r3, [r7, #28]
 800f3a0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800f3a4:	637b      	str	r3, [r7, #52]	; 0x34
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	461a      	mov	r2, r3
 800f3ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f3b0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f3b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3b6:	e841 2300 	strex	r3, r2, [r1]
 800f3ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d1e6      	bne.n	800f390 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	3308      	adds	r3, #8
 800f3c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	e853 3f00 	ldrex	r3, [r3]
 800f3d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f3d8:	633b      	str	r3, [r7, #48]	; 0x30
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	3308      	adds	r3, #8
 800f3e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3e2:	61ba      	str	r2, [r7, #24]
 800f3e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3e6:	6979      	ldr	r1, [r7, #20]
 800f3e8:	69ba      	ldr	r2, [r7, #24]
 800f3ea:	e841 2300 	strex	r3, r2, [r1]
 800f3ee:	613b      	str	r3, [r7, #16]
   return(result);
 800f3f0:	693b      	ldr	r3, [r7, #16]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d1e5      	bne.n	800f3c2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	2220      	movs	r2, #32
 800f3fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800f3fe:	bf00      	nop
 800f400:	373c      	adds	r7, #60	; 0x3c
 800f402:	46bd      	mov	sp, r7
 800f404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f408:	4770      	bx	lr
	...

0800f40c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f40c:	b480      	push	{r7}
 800f40e:	b095      	sub	sp, #84	; 0x54
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f41a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f41c:	e853 3f00 	ldrex	r3, [r3]
 800f420:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f424:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f428:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	461a      	mov	r2, r3
 800f430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f432:	643b      	str	r3, [r7, #64]	; 0x40
 800f434:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f436:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f438:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f43a:	e841 2300 	strex	r3, r2, [r1]
 800f43e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f442:	2b00      	cmp	r3, #0
 800f444:	d1e6      	bne.n	800f414 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	3308      	adds	r3, #8
 800f44c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f44e:	6a3b      	ldr	r3, [r7, #32]
 800f450:	e853 3f00 	ldrex	r3, [r3]
 800f454:	61fb      	str	r3, [r7, #28]
   return(result);
 800f456:	69fa      	ldr	r2, [r7, #28]
 800f458:	4b1e      	ldr	r3, [pc, #120]	; (800f4d4 <UART_EndRxTransfer+0xc8>)
 800f45a:	4013      	ands	r3, r2
 800f45c:	64bb      	str	r3, [r7, #72]	; 0x48
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	3308      	adds	r3, #8
 800f464:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f466:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f468:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f46a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f46c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f46e:	e841 2300 	strex	r3, r2, [r1]
 800f472:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f476:	2b00      	cmp	r3, #0
 800f478:	d1e5      	bne.n	800f446 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f47e:	2b01      	cmp	r3, #1
 800f480:	d118      	bne.n	800f4b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	e853 3f00 	ldrex	r3, [r3]
 800f48e:	60bb      	str	r3, [r7, #8]
   return(result);
 800f490:	68bb      	ldr	r3, [r7, #8]
 800f492:	f023 0310 	bic.w	r3, r3, #16
 800f496:	647b      	str	r3, [r7, #68]	; 0x44
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	461a      	mov	r2, r3
 800f49e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4a0:	61bb      	str	r3, [r7, #24]
 800f4a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4a4:	6979      	ldr	r1, [r7, #20]
 800f4a6:	69ba      	ldr	r2, [r7, #24]
 800f4a8:	e841 2300 	strex	r3, r2, [r1]
 800f4ac:	613b      	str	r3, [r7, #16]
   return(result);
 800f4ae:	693b      	ldr	r3, [r7, #16]
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d1e6      	bne.n	800f482 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2220      	movs	r2, #32
 800f4b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2200      	movs	r2, #0
 800f4c0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f4c8:	bf00      	nop
 800f4ca:	3754      	adds	r7, #84	; 0x54
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d2:	4770      	bx	lr
 800f4d4:	effffffe 	.word	0xeffffffe

0800f4d8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b090      	sub	sp, #64	; 0x40
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4e4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	69db      	ldr	r3, [r3, #28]
 800f4ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f4ee:	d037      	beq.n	800f560 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800f4f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4f2:	2200      	movs	r2, #0
 800f4f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f4f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	3308      	adds	r3, #8
 800f4fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f502:	e853 3f00 	ldrex	r3, [r3]
 800f506:	623b      	str	r3, [r7, #32]
   return(result);
 800f508:	6a3b      	ldr	r3, [r7, #32]
 800f50a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f50e:	63bb      	str	r3, [r7, #56]	; 0x38
 800f510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	3308      	adds	r3, #8
 800f516:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f518:	633a      	str	r2, [r7, #48]	; 0x30
 800f51a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f51c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f51e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f520:	e841 2300 	strex	r3, r2, [r1]
 800f524:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d1e5      	bne.n	800f4f8 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f52c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f532:	693b      	ldr	r3, [r7, #16]
 800f534:	e853 3f00 	ldrex	r3, [r3]
 800f538:	60fb      	str	r3, [r7, #12]
   return(result);
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f540:	637b      	str	r3, [r7, #52]	; 0x34
 800f542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	461a      	mov	r2, r3
 800f548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f54a:	61fb      	str	r3, [r7, #28]
 800f54c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f54e:	69b9      	ldr	r1, [r7, #24]
 800f550:	69fa      	ldr	r2, [r7, #28]
 800f552:	e841 2300 	strex	r3, r2, [r1]
 800f556:	617b      	str	r3, [r7, #20]
   return(result);
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d1e6      	bne.n	800f52c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f55e:	e002      	b.n	800f566 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800f560:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f562:	f7f5 fbc5 	bl	8004cf0 <HAL_UART_TxCpltCallback>
}
 800f566:	bf00      	nop
 800f568:	3740      	adds	r7, #64	; 0x40
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bd80      	pop	{r7, pc}

0800f56e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f56e:	b580      	push	{r7, lr}
 800f570:	b084      	sub	sp, #16
 800f572:	af00      	add	r7, sp, #0
 800f574:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f57a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800f57c:	68f8      	ldr	r0, [r7, #12]
 800f57e:	f7fe fe1d 	bl	800e1bc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f582:	bf00      	nop
 800f584:	3710      	adds	r7, #16
 800f586:	46bd      	mov	sp, r7
 800f588:	bd80      	pop	{r7, pc}

0800f58a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f58a:	b580      	push	{r7, lr}
 800f58c:	b09c      	sub	sp, #112	; 0x70
 800f58e:	af00      	add	r7, sp, #0
 800f590:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f596:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	69db      	ldr	r3, [r3, #28]
 800f59c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f5a0:	d071      	beq.n	800f686 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800f5a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f5aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5b2:	e853 3f00 	ldrex	r3, [r3]
 800f5b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f5b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f5ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f5be:	66bb      	str	r3, [r7, #104]	; 0x68
 800f5c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	461a      	mov	r2, r3
 800f5c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f5c8:	65bb      	str	r3, [r7, #88]	; 0x58
 800f5ca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f5ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f5d0:	e841 2300 	strex	r3, r2, [r1]
 800f5d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f5d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d1e6      	bne.n	800f5aa <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f5dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	3308      	adds	r3, #8
 800f5e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5e6:	e853 3f00 	ldrex	r3, [r3]
 800f5ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f5ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5ee:	f023 0301 	bic.w	r3, r3, #1
 800f5f2:	667b      	str	r3, [r7, #100]	; 0x64
 800f5f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	3308      	adds	r3, #8
 800f5fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f5fc:	647a      	str	r2, [r7, #68]	; 0x44
 800f5fe:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f600:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f602:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f604:	e841 2300 	strex	r3, r2, [r1]
 800f608:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f60a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d1e5      	bne.n	800f5dc <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	3308      	adds	r3, #8
 800f616:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61a:	e853 3f00 	ldrex	r3, [r3]
 800f61e:	623b      	str	r3, [r7, #32]
   return(result);
 800f620:	6a3b      	ldr	r3, [r7, #32]
 800f622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f626:	663b      	str	r3, [r7, #96]	; 0x60
 800f628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	3308      	adds	r3, #8
 800f62e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f630:	633a      	str	r2, [r7, #48]	; 0x30
 800f632:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f634:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f638:	e841 2300 	strex	r3, r2, [r1]
 800f63c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f640:	2b00      	cmp	r3, #0
 800f642:	d1e5      	bne.n	800f610 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f646:	2220      	movs	r2, #32
 800f648:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f64c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f64e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f650:	2b01      	cmp	r3, #1
 800f652:	d118      	bne.n	800f686 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f65a:	693b      	ldr	r3, [r7, #16]
 800f65c:	e853 3f00 	ldrex	r3, [r3]
 800f660:	60fb      	str	r3, [r7, #12]
   return(result);
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	f023 0310 	bic.w	r3, r3, #16
 800f668:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f66a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	461a      	mov	r2, r3
 800f670:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f672:	61fb      	str	r3, [r7, #28]
 800f674:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f676:	69b9      	ldr	r1, [r7, #24]
 800f678:	69fa      	ldr	r2, [r7, #28]
 800f67a:	e841 2300 	strex	r3, r2, [r1]
 800f67e:	617b      	str	r3, [r7, #20]
   return(result);
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d1e6      	bne.n	800f654 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f688:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f68a:	2b01      	cmp	r3, #1
 800f68c:	d107      	bne.n	800f69e <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f68e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f690:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f694:	4619      	mov	r1, r3
 800f696:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f698:	f7fe fdae 	bl	800e1f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f69c:	e002      	b.n	800f6a4 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800f69e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f6a0:	f7f5 fb38 	bl	8004d14 <HAL_UART_RxCpltCallback>
}
 800f6a4:	bf00      	nop
 800f6a6:	3770      	adds	r7, #112	; 0x70
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}

0800f6ac <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b084      	sub	sp, #16
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6b8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6be:	2b01      	cmp	r3, #1
 800f6c0:	d109      	bne.n	800f6d6 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f6c8:	085b      	lsrs	r3, r3, #1
 800f6ca:	b29b      	uxth	r3, r3
 800f6cc:	4619      	mov	r1, r3
 800f6ce:	68f8      	ldr	r0, [r7, #12]
 800f6d0:	f7fe fd92 	bl	800e1f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f6d4:	e002      	b.n	800f6dc <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800f6d6:	68f8      	ldr	r0, [r7, #12]
 800f6d8:	f7fe fd7a 	bl	800e1d0 <HAL_UART_RxHalfCpltCallback>
}
 800f6dc:	bf00      	nop
 800f6de:	3710      	adds	r7, #16
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	bd80      	pop	{r7, pc}

0800f6e4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b086      	sub	sp, #24
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6f0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f6f2:	697b      	ldr	r3, [r7, #20]
 800f6f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f6f8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f700:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f702:	697b      	ldr	r3, [r7, #20]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	689b      	ldr	r3, [r3, #8]
 800f708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f70c:	2b80      	cmp	r3, #128	; 0x80
 800f70e:	d109      	bne.n	800f724 <UART_DMAError+0x40>
 800f710:	693b      	ldr	r3, [r7, #16]
 800f712:	2b21      	cmp	r3, #33	; 0x21
 800f714:	d106      	bne.n	800f724 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f716:	697b      	ldr	r3, [r7, #20]
 800f718:	2200      	movs	r2, #0
 800f71a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800f71e:	6978      	ldr	r0, [r7, #20]
 800f720:	f7ff fe32 	bl	800f388 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f724:	697b      	ldr	r3, [r7, #20]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	689b      	ldr	r3, [r3, #8]
 800f72a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f72e:	2b40      	cmp	r3, #64	; 0x40
 800f730:	d109      	bne.n	800f746 <UART_DMAError+0x62>
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	2b22      	cmp	r3, #34	; 0x22
 800f736:	d106      	bne.n	800f746 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f738:	697b      	ldr	r3, [r7, #20]
 800f73a:	2200      	movs	r2, #0
 800f73c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800f740:	6978      	ldr	r0, [r7, #20]
 800f742:	f7ff fe63 	bl	800f40c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f746:	697b      	ldr	r3, [r7, #20]
 800f748:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f74c:	f043 0210 	orr.w	r2, r3, #16
 800f750:	697b      	ldr	r3, [r7, #20]
 800f752:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f756:	6978      	ldr	r0, [r7, #20]
 800f758:	f7fe fd44 	bl	800e1e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f75c:	bf00      	nop
 800f75e:	3718      	adds	r7, #24
 800f760:	46bd      	mov	sp, r7
 800f762:	bd80      	pop	{r7, pc}

0800f764 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b084      	sub	sp, #16
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f770:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	2200      	movs	r2, #0
 800f776:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	2200      	movs	r2, #0
 800f77e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f782:	68f8      	ldr	r0, [r7, #12]
 800f784:	f7fe fd2e 	bl	800e1e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f788:	bf00      	nop
 800f78a:	3710      	adds	r7, #16
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}

0800f790 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b088      	sub	sp, #32
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	e853 3f00 	ldrex	r3, [r3]
 800f7a4:	60bb      	str	r3, [r7, #8]
   return(result);
 800f7a6:	68bb      	ldr	r3, [r7, #8]
 800f7a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f7ac:	61fb      	str	r3, [r7, #28]
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	461a      	mov	r2, r3
 800f7b4:	69fb      	ldr	r3, [r7, #28]
 800f7b6:	61bb      	str	r3, [r7, #24]
 800f7b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7ba:	6979      	ldr	r1, [r7, #20]
 800f7bc:	69ba      	ldr	r2, [r7, #24]
 800f7be:	e841 2300 	strex	r3, r2, [r1]
 800f7c2:	613b      	str	r3, [r7, #16]
   return(result);
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d1e6      	bne.n	800f798 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	2220      	movs	r2, #32
 800f7ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f7d8:	6878      	ldr	r0, [r7, #4]
 800f7da:	f7f5 fa89 	bl	8004cf0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f7de:	bf00      	nop
 800f7e0:	3720      	adds	r7, #32
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}

0800f7e6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f7e6:	b480      	push	{r7}
 800f7e8:	b083      	sub	sp, #12
 800f7ea:	af00      	add	r7, sp, #0
 800f7ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f7ee:	bf00      	nop
 800f7f0:	370c      	adds	r7, #12
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f8:	4770      	bx	lr

0800f7fa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800f7fa:	b480      	push	{r7}
 800f7fc:	b083      	sub	sp, #12
 800f7fe:	af00      	add	r7, sp, #0
 800f800:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800f802:	bf00      	nop
 800f804:	370c      	adds	r7, #12
 800f806:	46bd      	mov	sp, r7
 800f808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80c:	4770      	bx	lr

0800f80e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800f80e:	b480      	push	{r7}
 800f810:	b083      	sub	sp, #12
 800f812:	af00      	add	r7, sp, #0
 800f814:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800f816:	bf00      	nop
 800f818:	370c      	adds	r7, #12
 800f81a:	46bd      	mov	sp, r7
 800f81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f820:	4770      	bx	lr

0800f822 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f822:	b480      	push	{r7}
 800f824:	b085      	sub	sp, #20
 800f826:	af00      	add	r7, sp, #0
 800f828:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f830:	2b01      	cmp	r3, #1
 800f832:	d101      	bne.n	800f838 <HAL_UARTEx_DisableFifoMode+0x16>
 800f834:	2302      	movs	r3, #2
 800f836:	e027      	b.n	800f888 <HAL_UARTEx_DisableFifoMode+0x66>
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	2201      	movs	r2, #1
 800f83c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2224      	movs	r2, #36	; 0x24
 800f844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	681a      	ldr	r2, [r3, #0]
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	f022 0201 	bic.w	r2, r2, #1
 800f85e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f866:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2200      	movs	r2, #0
 800f86c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	68fa      	ldr	r2, [r7, #12]
 800f874:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2220      	movs	r2, #32
 800f87a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2200      	movs	r2, #0
 800f882:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f886:	2300      	movs	r3, #0
}
 800f888:	4618      	mov	r0, r3
 800f88a:	3714      	adds	r7, #20
 800f88c:	46bd      	mov	sp, r7
 800f88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f892:	4770      	bx	lr

0800f894 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b084      	sub	sp, #16
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
 800f89c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f8a4:	2b01      	cmp	r3, #1
 800f8a6:	d101      	bne.n	800f8ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f8a8:	2302      	movs	r3, #2
 800f8aa:	e02d      	b.n	800f908 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	2201      	movs	r2, #1
 800f8b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	2224      	movs	r2, #36	; 0x24
 800f8b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	681a      	ldr	r2, [r3, #0]
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	f022 0201 	bic.w	r2, r2, #1
 800f8d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	689b      	ldr	r3, [r3, #8]
 800f8da:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	683a      	ldr	r2, [r7, #0]
 800f8e4:	430a      	orrs	r2, r1
 800f8e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	f000 f84f 	bl	800f98c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	68fa      	ldr	r2, [r7, #12]
 800f8f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	2220      	movs	r2, #32
 800f8fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	2200      	movs	r2, #0
 800f902:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f906:	2300      	movs	r3, #0
}
 800f908:	4618      	mov	r0, r3
 800f90a:	3710      	adds	r7, #16
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}

0800f910 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b084      	sub	sp, #16
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
 800f918:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f920:	2b01      	cmp	r3, #1
 800f922:	d101      	bne.n	800f928 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f924:	2302      	movs	r3, #2
 800f926:	e02d      	b.n	800f984 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	2201      	movs	r2, #1
 800f92c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	2224      	movs	r2, #36	; 0x24
 800f934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	681a      	ldr	r2, [r3, #0]
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	f022 0201 	bic.w	r2, r2, #1
 800f94e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	689b      	ldr	r3, [r3, #8]
 800f956:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	683a      	ldr	r2, [r7, #0]
 800f960:	430a      	orrs	r2, r1
 800f962:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f964:	6878      	ldr	r0, [r7, #4]
 800f966:	f000 f811 	bl	800f98c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	68fa      	ldr	r2, [r7, #12]
 800f970:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	2220      	movs	r2, #32
 800f976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2200      	movs	r2, #0
 800f97e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f982:	2300      	movs	r3, #0
}
 800f984:	4618      	mov	r0, r3
 800f986:	3710      	adds	r7, #16
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}

0800f98c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f98c:	b480      	push	{r7}
 800f98e:	b085      	sub	sp, #20
 800f990:	af00      	add	r7, sp, #0
 800f992:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d108      	bne.n	800f9ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2201      	movs	r2, #1
 800f9a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2201      	movs	r2, #1
 800f9a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f9ac:	e031      	b.n	800fa12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f9ae:	2310      	movs	r3, #16
 800f9b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f9b2:	2310      	movs	r3, #16
 800f9b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	689b      	ldr	r3, [r3, #8]
 800f9bc:	0e5b      	lsrs	r3, r3, #25
 800f9be:	b2db      	uxtb	r3, r3
 800f9c0:	f003 0307 	and.w	r3, r3, #7
 800f9c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	689b      	ldr	r3, [r3, #8]
 800f9cc:	0f5b      	lsrs	r3, r3, #29
 800f9ce:	b2db      	uxtb	r3, r3
 800f9d0:	f003 0307 	and.w	r3, r3, #7
 800f9d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f9d6:	7bbb      	ldrb	r3, [r7, #14]
 800f9d8:	7b3a      	ldrb	r2, [r7, #12]
 800f9da:	4911      	ldr	r1, [pc, #68]	; (800fa20 <UARTEx_SetNbDataToProcess+0x94>)
 800f9dc:	5c8a      	ldrb	r2, [r1, r2]
 800f9de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f9e2:	7b3a      	ldrb	r2, [r7, #12]
 800f9e4:	490f      	ldr	r1, [pc, #60]	; (800fa24 <UARTEx_SetNbDataToProcess+0x98>)
 800f9e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f9e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800f9ec:	b29a      	uxth	r2, r3
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f9f4:	7bfb      	ldrb	r3, [r7, #15]
 800f9f6:	7b7a      	ldrb	r2, [r7, #13]
 800f9f8:	4909      	ldr	r1, [pc, #36]	; (800fa20 <UARTEx_SetNbDataToProcess+0x94>)
 800f9fa:	5c8a      	ldrb	r2, [r1, r2]
 800f9fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fa00:	7b7a      	ldrb	r2, [r7, #13]
 800fa02:	4908      	ldr	r1, [pc, #32]	; (800fa24 <UARTEx_SetNbDataToProcess+0x98>)
 800fa04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fa06:	fb93 f3f2 	sdiv	r3, r3, r2
 800fa0a:	b29a      	uxth	r2, r3
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fa12:	bf00      	nop
 800fa14:	3714      	adds	r7, #20
 800fa16:	46bd      	mov	sp, r7
 800fa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1c:	4770      	bx	lr
 800fa1e:	bf00      	nop
 800fa20:	080118a4 	.word	0x080118a4
 800fa24:	080118ac 	.word	0x080118ac

0800fa28 <__cxa_pure_virtual>:
 800fa28:	b508      	push	{r3, lr}
 800fa2a:	f000 f80d 	bl	800fa48 <_ZSt9terminatev>

0800fa2e <_ZN10__cxxabiv111__terminateEPFvvE>:
 800fa2e:	b508      	push	{r3, lr}
 800fa30:	4780      	blx	r0
 800fa32:	f001 fc0b 	bl	801124c <abort>
	...

0800fa38 <_ZSt13get_terminatev>:
 800fa38:	4b02      	ldr	r3, [pc, #8]	; (800fa44 <_ZSt13get_terminatev+0xc>)
 800fa3a:	6818      	ldr	r0, [r3, #0]
 800fa3c:	f3bf 8f5b 	dmb	ish
 800fa40:	4770      	bx	lr
 800fa42:	bf00      	nop
 800fa44:	240000a0 	.word	0x240000a0

0800fa48 <_ZSt9terminatev>:
 800fa48:	b508      	push	{r3, lr}
 800fa4a:	f7ff fff5 	bl	800fa38 <_ZSt13get_terminatev>
 800fa4e:	f7ff ffee 	bl	800fa2e <_ZN10__cxxabiv111__terminateEPFvvE>

0800fa52 <checkint>:
 800fa52:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800fa56:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800fa5a:	429a      	cmp	r2, r3
 800fa5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa5e:	dd2b      	ble.n	800fab8 <checkint+0x66>
 800fa60:	f240 4333 	movw	r3, #1075	; 0x433
 800fa64:	429a      	cmp	r2, r3
 800fa66:	dc25      	bgt.n	800fab4 <checkint+0x62>
 800fa68:	1a9b      	subs	r3, r3, r2
 800fa6a:	f1a3 0620 	sub.w	r6, r3, #32
 800fa6e:	f04f 32ff 	mov.w	r2, #4294967295
 800fa72:	fa02 f606 	lsl.w	r6, r2, r6
 800fa76:	fa02 f403 	lsl.w	r4, r2, r3
 800fa7a:	f1c3 0520 	rsb	r5, r3, #32
 800fa7e:	4334      	orrs	r4, r6
 800fa80:	fa22 f505 	lsr.w	r5, r2, r5
 800fa84:	432c      	orrs	r4, r5
 800fa86:	409a      	lsls	r2, r3
 800fa88:	ea20 0602 	bic.w	r6, r0, r2
 800fa8c:	ea21 0704 	bic.w	r7, r1, r4
 800fa90:	ea56 0207 	orrs.w	r2, r6, r7
 800fa94:	f1a3 0420 	sub.w	r4, r3, #32
 800fa98:	f1c3 0220 	rsb	r2, r3, #32
 800fa9c:	d10c      	bne.n	800fab8 <checkint+0x66>
 800fa9e:	40d8      	lsrs	r0, r3
 800faa0:	fa01 f302 	lsl.w	r3, r1, r2
 800faa4:	4318      	orrs	r0, r3
 800faa6:	40e1      	lsrs	r1, r4
 800faa8:	4308      	orrs	r0, r1
 800faaa:	f000 0301 	and.w	r3, r0, #1
 800faae:	f1c3 0002 	rsb	r0, r3, #2
 800fab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fab4:	2002      	movs	r0, #2
 800fab6:	e7fc      	b.n	800fab2 <checkint+0x60>
 800fab8:	2000      	movs	r0, #0
 800faba:	e7fa      	b.n	800fab2 <checkint+0x60>
 800fabc:	0000      	movs	r0, r0
	...

0800fac0 <pow>:
 800fac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fac4:	ed2d 8b0a 	vpush	{d8-d12}
 800fac8:	b09b      	sub	sp, #108	; 0x6c
 800faca:	ed8d 0b02 	vstr	d0, [sp, #8]
 800face:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fad2:	ed8d 1b00 	vstr	d1, [sp]
 800fad6:	ea4f 5915 	mov.w	r9, r5, lsr #20
 800fada:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fade:	f109 30ff 	add.w	r0, r9, #4294967295
 800fae2:	f240 71fd 	movw	r1, #2045	; 0x7fd
 800fae6:	4288      	cmp	r0, r1
 800fae8:	46cc      	mov	ip, r9
 800faea:	ea4f 5817 	mov.w	r8, r7, lsr #20
 800faee:	d806      	bhi.n	800fafe <pow+0x3e>
 800faf0:	f3c8 010a 	ubfx	r1, r8, #0, #11
 800faf4:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 800faf8:	297f      	cmp	r1, #127	; 0x7f
 800fafa:	f240 81ab 	bls.w	800fe54 <pow+0x394>
 800fafe:	19b1      	adds	r1, r6, r6
 800fb00:	9104      	str	r1, [sp, #16]
 800fb02:	eb47 0107 	adc.w	r1, r7, r7
 800fb06:	9105      	str	r1, [sp, #20]
 800fb08:	9904      	ldr	r1, [sp, #16]
 800fb0a:	f111 31ff 	adds.w	r1, r1, #4294967295
 800fb0e:	460a      	mov	r2, r1
 800fb10:	9905      	ldr	r1, [sp, #20]
 800fb12:	f141 31ff 	adc.w	r1, r1, #4294967295
 800fb16:	460b      	mov	r3, r1
 800fb18:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 800fb1c:	f06f 0001 	mvn.w	r0, #1
 800fb20:	4299      	cmp	r1, r3
 800fb22:	bf08      	it	eq
 800fb24:	4290      	cmpeq	r0, r2
 800fb26:	d260      	bcs.n	800fbea <pow+0x12a>
 800fb28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fb2c:	4313      	orrs	r3, r2
 800fb2e:	d11a      	bne.n	800fb66 <pow+0xa6>
 800fb30:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 800fb34:	1923      	adds	r3, r4, r4
 800fb36:	930c      	str	r3, [sp, #48]	; 0x30
 800fb38:	eb42 0302 	adc.w	r3, r2, r2
 800fb3c:	930d      	str	r3, [sp, #52]	; 0x34
 800fb3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800fb42:	4bcf      	ldr	r3, [pc, #828]	; (800fe80 <pow+0x3c0>)
 800fb44:	2200      	movs	r2, #0
 800fb46:	428b      	cmp	r3, r1
 800fb48:	bf08      	it	eq
 800fb4a:	4282      	cmpeq	r2, r0
 800fb4c:	f080 8265 	bcs.w	801001a <pow+0x55a>
 800fb50:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fb54:	ed9d 6b00 	vldr	d6, [sp]
 800fb58:	ee37 0b06 	vadd.f64	d0, d7, d6
 800fb5c:	b01b      	add	sp, #108	; 0x6c
 800fb5e:	ecbd 8b0a 	vpop	{d8-d12}
 800fb62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb66:	49c7      	ldr	r1, [pc, #796]	; (800fe84 <pow+0x3c4>)
 800fb68:	2000      	movs	r0, #0
 800fb6a:	428d      	cmp	r5, r1
 800fb6c:	bf08      	it	eq
 800fb6e:	4284      	cmpeq	r4, r0
 800fb70:	d10b      	bne.n	800fb8a <pow+0xca>
 800fb72:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800fb76:	19b3      	adds	r3, r6, r6
 800fb78:	930e      	str	r3, [sp, #56]	; 0x38
 800fb7a:	eb42 0302 	adc.w	r3, r2, r2
 800fb7e:	930f      	str	r3, [sp, #60]	; 0x3c
 800fb80:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800fb84:	4bbe      	ldr	r3, [pc, #760]	; (800fe80 <pow+0x3c0>)
 800fb86:	2200      	movs	r2, #0
 800fb88:	e7dd      	b.n	800fb46 <pow+0x86>
 800fb8a:	1921      	adds	r1, r4, r4
 800fb8c:	9106      	str	r1, [sp, #24]
 800fb8e:	eb45 0105 	adc.w	r1, r5, r5
 800fb92:	9107      	str	r1, [sp, #28]
 800fb94:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800fb98:	49bb      	ldr	r1, [pc, #748]	; (800fe88 <pow+0x3c8>)
 800fb9a:	2000      	movs	r0, #0
 800fb9c:	42a1      	cmp	r1, r4
 800fb9e:	bf08      	it	eq
 800fba0:	4298      	cmpeq	r0, r3
 800fba2:	d3d5      	bcc.n	800fb50 <pow+0x90>
 800fba4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800fba8:	428c      	cmp	r4, r1
 800fbaa:	bf08      	it	eq
 800fbac:	4283      	cmpeq	r3, r0
 800fbae:	d1cf      	bne.n	800fb50 <pow+0x90>
 800fbb0:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800fbb4:	49b5      	ldr	r1, [pc, #724]	; (800fe8c <pow+0x3cc>)
 800fbb6:	2000      	movs	r0, #0
 800fbb8:	428c      	cmp	r4, r1
 800fbba:	bf08      	it	eq
 800fbbc:	4283      	cmpeq	r3, r0
 800fbbe:	f000 822c 	beq.w	801001a <pow+0x55a>
 800fbc2:	49b3      	ldr	r1, [pc, #716]	; (800fe90 <pow+0x3d0>)
 800fbc4:	f04f 30ff 	mov.w	r0, #4294967295
 800fbc8:	42a1      	cmp	r1, r4
 800fbca:	bf08      	it	eq
 800fbcc:	4298      	cmpeq	r0, r3
 800fbce:	ea6f 0307 	mvn.w	r3, r7
 800fbd2:	bf34      	ite	cc
 800fbd4:	2201      	movcc	r2, #1
 800fbd6:	2200      	movcs	r2, #0
 800fbd8:	0fdb      	lsrs	r3, r3, #31
 800fbda:	429a      	cmp	r2, r3
 800fbdc:	f040 821a 	bne.w	8010014 <pow+0x554>
 800fbe0:	ed9d 7b00 	vldr	d7, [sp]
 800fbe4:	ee27 0b07 	vmul.f64	d0, d7, d7
 800fbe8:	e7b8      	b.n	800fb5c <pow+0x9c>
 800fbea:	1923      	adds	r3, r4, r4
 800fbec:	9308      	str	r3, [sp, #32]
 800fbee:	eb45 0305 	adc.w	r3, r5, r5
 800fbf2:	9309      	str	r3, [sp, #36]	; 0x24
 800fbf4:	9b08      	ldr	r3, [sp, #32]
 800fbf6:	f113 33ff 	adds.w	r3, r3, #4294967295
 800fbfa:	9310      	str	r3, [sp, #64]	; 0x40
 800fbfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbfe:	f143 33ff 	adc.w	r3, r3, #4294967295
 800fc02:	9311      	str	r3, [sp, #68]	; 0x44
 800fc04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fc08:	4299      	cmp	r1, r3
 800fc0a:	bf08      	it	eq
 800fc0c:	4290      	cmpeq	r0, r2
 800fc0e:	d22d      	bcs.n	800fc6c <pow+0x1ac>
 800fc10:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fc14:	2c00      	cmp	r4, #0
 800fc16:	f175 0300 	sbcs.w	r3, r5, #0
 800fc1a:	ee27 0b07 	vmul.f64	d0, d7, d7
 800fc1e:	da16      	bge.n	800fc4e <pow+0x18e>
 800fc20:	4630      	mov	r0, r6
 800fc22:	4639      	mov	r1, r7
 800fc24:	f7ff ff15 	bl	800fa52 <checkint>
 800fc28:	2801      	cmp	r0, #1
 800fc2a:	d110      	bne.n	800fc4e <pow+0x18e>
 800fc2c:	eeb1 0b40 	vneg.f64	d0, d0
 800fc30:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800fc34:	4323      	orrs	r3, r4
 800fc36:	d10c      	bne.n	800fc52 <pow+0x192>
 800fc38:	2e00      	cmp	r6, #0
 800fc3a:	f177 0300 	sbcs.w	r3, r7, #0
 800fc3e:	da8d      	bge.n	800fb5c <pow+0x9c>
 800fc40:	b01b      	add	sp, #108	; 0x6c
 800fc42:	ecbd 8b0a 	vpop	{d8-d12}
 800fc46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc4a:	f001 b9ad 	b.w	8010fa8 <__math_divzero>
 800fc4e:	2000      	movs	r0, #0
 800fc50:	e7ee      	b.n	800fc30 <pow+0x170>
 800fc52:	2e00      	cmp	r6, #0
 800fc54:	f177 0300 	sbcs.w	r3, r7, #0
 800fc58:	da80      	bge.n	800fb5c <pow+0x9c>
 800fc5a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800fc5e:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800fc62:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800fc66:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800fc6a:	e777      	b.n	800fb5c <pow+0x9c>
 800fc6c:	2c00      	cmp	r4, #0
 800fc6e:	f175 0300 	sbcs.w	r3, r5, #0
 800fc72:	da35      	bge.n	800fce0 <pow+0x220>
 800fc74:	4630      	mov	r0, r6
 800fc76:	4639      	mov	r1, r7
 800fc78:	f7ff feeb 	bl	800fa52 <checkint>
 800fc7c:	b940      	cbnz	r0, 800fc90 <pow+0x1d0>
 800fc7e:	ed9d 0b02 	vldr	d0, [sp, #8]
 800fc82:	b01b      	add	sp, #108	; 0x6c
 800fc84:	ecbd 8b0a 	vpop	{d8-d12}
 800fc88:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc8c:	f001 b9a4 	b.w	8010fd8 <__math_invalid>
 800fc90:	2801      	cmp	r0, #1
 800fc92:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fc96:	bf14      	ite	ne
 800fc98:	2000      	movne	r0, #0
 800fc9a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800fc9e:	461d      	mov	r5, r3
 800fca0:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 800fca4:	f3c8 030a 	ubfx	r3, r8, #0, #11
 800fca8:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 800fcac:	2a7f      	cmp	r2, #127	; 0x7f
 800fcae:	d933      	bls.n	800fd18 <pow+0x258>
 800fcb0:	4974      	ldr	r1, [pc, #464]	; (800fe84 <pow+0x3c4>)
 800fcb2:	2000      	movs	r0, #0
 800fcb4:	428d      	cmp	r5, r1
 800fcb6:	bf08      	it	eq
 800fcb8:	4284      	cmpeq	r4, r0
 800fcba:	f000 81ae 	beq.w	801001a <pow+0x55a>
 800fcbe:	f240 32bd 	movw	r2, #957	; 0x3bd
 800fcc2:	4293      	cmp	r3, r2
 800fcc4:	d80e      	bhi.n	800fce4 <pow+0x224>
 800fcc6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800fcca:	ed9d 7b00 	vldr	d7, [sp]
 800fcce:	42a9      	cmp	r1, r5
 800fcd0:	bf08      	it	eq
 800fcd2:	42a0      	cmpeq	r0, r4
 800fcd4:	bf34      	ite	cc
 800fcd6:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 800fcda:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 800fcde:	e73d      	b.n	800fb5c <pow+0x9c>
 800fce0:	2000      	movs	r0, #0
 800fce2:	e7df      	b.n	800fca4 <pow+0x1e4>
 800fce4:	42a9      	cmp	r1, r5
 800fce6:	bf08      	it	eq
 800fce8:	42a0      	cmpeq	r0, r4
 800fcea:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800fcee:	bf2c      	ite	cs
 800fcf0:	2301      	movcs	r3, #1
 800fcf2:	2300      	movcc	r3, #0
 800fcf4:	4590      	cmp	r8, r2
 800fcf6:	bf8c      	ite	hi
 800fcf8:	f04f 0800 	movhi.w	r8, #0
 800fcfc:	f04f 0801 	movls.w	r8, #1
 800fd00:	4543      	cmp	r3, r8
 800fd02:	f04f 0000 	mov.w	r0, #0
 800fd06:	f000 80af 	beq.w	800fe68 <pow+0x3a8>
 800fd0a:	b01b      	add	sp, #108	; 0x6c
 800fd0c:	ecbd 8b0a 	vpop	{d8-d12}
 800fd10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd14:	f001 b940 	b.w	8010f98 <__math_oflow>
 800fd18:	f1bc 0f00 	cmp.w	ip, #0
 800fd1c:	d10e      	bne.n	800fd3c <pow+0x27c>
 800fd1e:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800fe78 <pow+0x3b8>
 800fd22:	ed9d 6b02 	vldr	d6, [sp, #8]
 800fd26:	ee26 7b07 	vmul.f64	d7, d6, d7
 800fd2a:	ec57 6b17 	vmov	r6, r7, d7
 800fd2e:	4b59      	ldr	r3, [pc, #356]	; (800fe94 <pow+0x3d4>)
 800fd30:	2100      	movs	r1, #0
 800fd32:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800fd36:	1874      	adds	r4, r6, r1
 800fd38:	eb42 0503 	adc.w	r5, r2, r3
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	18e3      	adds	r3, r4, r3
 800fd40:	4b55      	ldr	r3, [pc, #340]	; (800fe98 <pow+0x3d8>)
 800fd42:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800fd46:	eb45 0303 	adc.w	r3, r5, r3
 800fd4a:	1519      	asrs	r1, r3, #20
 800fd4c:	ee03 1a10 	vmov	s6, r1
 800fd50:	0d1e      	lsrs	r6, r3, #20
 800fd52:	2100      	movs	r1, #0
 800fd54:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800fd58:	0536      	lsls	r6, r6, #20
 800fd5a:	1a63      	subs	r3, r4, r1
 800fd5c:	9312      	str	r3, [sp, #72]	; 0x48
 800fd5e:	eb65 0306 	sbc.w	r3, r5, r6
 800fd62:	9313      	str	r3, [sp, #76]	; 0x4c
 800fd64:	4b4d      	ldr	r3, [pc, #308]	; (800fe9c <pow+0x3dc>)
 800fd66:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 800fd6a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800fd6e:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 800fd72:	eea5 6b07 	vfma.f64	d6, d5, d7
 800fd76:	ed93 7b00 	vldr	d7, [r3]
 800fd7a:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 800fd7e:	ed93 4b02 	vldr	d4, [r3, #8]
 800fd82:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800fd86:	eea3 5b07 	vfma.f64	d5, d3, d7
 800fd8a:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 800fd8e:	ee36 9b05 	vadd.f64	d9, d6, d5
 800fd92:	ee35 5b49 	vsub.f64	d5, d5, d9
 800fd96:	eea3 7b04 	vfma.f64	d7, d3, d4
 800fd9a:	ed93 4b04 	vldr	d4, [r3, #16]
 800fd9e:	ee35 5b06 	vadd.f64	d5, d5, d6
 800fda2:	ee37 7b05 	vadd.f64	d7, d7, d5
 800fda6:	ee26 4b04 	vmul.f64	d4, d6, d4
 800fdaa:	ed93 3b08 	vldr	d3, [r3, #32]
 800fdae:	ee26 0b04 	vmul.f64	d0, d6, d4
 800fdb2:	eeb0 8b40 	vmov.f64	d8, d0
 800fdb6:	ee94 8b06 	vfnms.f64	d8, d4, d6
 800fdba:	ed93 4b06 	vldr	d4, [r3, #24]
 800fdbe:	ee26 ab00 	vmul.f64	d10, d6, d0
 800fdc2:	ee39 1b00 	vadd.f64	d1, d9, d0
 800fdc6:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800fdca:	eea6 4b03 	vfma.f64	d4, d6, d3
 800fdce:	ee39 9b41 	vsub.f64	d9, d9, d1
 800fdd2:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800fdd6:	ee37 8b08 	vadd.f64	d8, d7, d8
 800fdda:	ee39 9b00 	vadd.f64	d9, d9, d0
 800fdde:	eea6 3b02 	vfma.f64	d3, d6, d2
 800fde2:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800fde6:	ee38 9b09 	vadd.f64	d9, d8, d9
 800fdea:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 800fdee:	eea6 2b0c 	vfma.f64	d2, d6, d12
 800fdf2:	ed9d 6b00 	vldr	d6, [sp]
 800fdf6:	eea0 3b02 	vfma.f64	d3, d0, d2
 800fdfa:	eea0 4b03 	vfma.f64	d4, d0, d3
 800fdfe:	eeaa 9b04 	vfma.f64	d9, d10, d4
 800fe02:	ee31 7b09 	vadd.f64	d7, d1, d9
 800fe06:	ee26 6b07 	vmul.f64	d6, d6, d7
 800fe0a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800fe0e:	eeb0 3b46 	vmov.f64	d3, d6
 800fe12:	ee31 1b47 	vsub.f64	d1, d1, d7
 800fe16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fe1a:	ee31 9b09 	vadd.f64	d9, d1, d9
 800fe1e:	ed9d 6b00 	vldr	d6, [sp]
 800fe22:	f3c3 570a 	ubfx	r7, r3, #20, #11
 800fe26:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 800fe2a:	193c      	adds	r4, r7, r4
 800fe2c:	2c3e      	cmp	r4, #62	; 0x3e
 800fe2e:	ee96 3b07 	vfnms.f64	d3, d6, d7
 800fe32:	eea6 3b09 	vfma.f64	d3, d6, d9
 800fe36:	d934      	bls.n	800fea2 <pow+0x3e2>
 800fe38:	428c      	cmp	r4, r1
 800fe3a:	da0d      	bge.n	800fe58 <pow+0x398>
 800fe3c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800fe40:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fe44:	ee37 0b00 	vadd.f64	d0, d7, d0
 800fe48:	2800      	cmp	r0, #0
 800fe4a:	f43f ae87 	beq.w	800fb5c <pow+0x9c>
 800fe4e:	eeb1 0b40 	vneg.f64	d0, d0
 800fe52:	e683      	b.n	800fb5c <pow+0x9c>
 800fe54:	2000      	movs	r0, #0
 800fe56:	e771      	b.n	800fd3c <pow+0x27c>
 800fe58:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 800fe5c:	d920      	bls.n	800fea0 <pow+0x3e0>
 800fe5e:	2a00      	cmp	r2, #0
 800fe60:	f173 0300 	sbcs.w	r3, r3, #0
 800fe64:	f6bf af51 	bge.w	800fd0a <pow+0x24a>
 800fe68:	b01b      	add	sp, #108	; 0x6c
 800fe6a:	ecbd 8b0a 	vpop	{d8-d12}
 800fe6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe72:	f001 b889 	b.w	8010f88 <__math_uflow>
 800fe76:	bf00      	nop
 800fe78:	00000000 	.word	0x00000000
 800fe7c:	43300000 	.word	0x43300000
 800fe80:	fff00000 	.word	0xfff00000
 800fe84:	3ff00000 	.word	0x3ff00000
 800fe88:	ffe00000 	.word	0xffe00000
 800fe8c:	7fe00000 	.word	0x7fe00000
 800fe90:	7fdfffff 	.word	0x7fdfffff
 800fe94:	fcc00000 	.word	0xfcc00000
 800fe98:	c0196aab 	.word	0xc0196aab
 800fe9c:	080118b8 	.word	0x080118b8
 800fea0:	460f      	mov	r7, r1
 800fea2:	4e65      	ldr	r6, [pc, #404]	; (8010038 <pow+0x578>)
 800fea4:	ed9d 4b02 	vldr	d4, [sp, #8]
 800fea8:	ed96 6b02 	vldr	d6, [r6, #8]
 800feac:	ed96 7b00 	vldr	d7, [r6]
 800feb0:	eeb0 5b46 	vmov.f64	d5, d6
 800feb4:	eea4 5b07 	vfma.f64	d5, d4, d7
 800feb8:	ed8d 5b00 	vstr	d5, [sp]
 800febc:	ee35 6b46 	vsub.f64	d6, d5, d6
 800fec0:	eeb0 5b44 	vmov.f64	d5, d4
 800fec4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fec8:	ed96 7b04 	vldr	d7, [r6, #16]
 800fecc:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 800fed0:	eea6 5b07 	vfma.f64	d5, d6, d7
 800fed4:	eeb0 7b45 	vmov.f64	d7, d5
 800fed8:	ed96 5b06 	vldr	d5, [r6, #24]
 800fedc:	1849      	adds	r1, r1, r1
 800fede:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 800fee2:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800fee6:	eea6 7b05 	vfma.f64	d7, d6, d5
 800feea:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 800feee:	ee33 3b07 	vadd.f64	d3, d3, d7
 800fef2:	ee23 6b03 	vmul.f64	d6, d3, d3
 800fef6:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 800fefa:	ed96 5b08 	vldr	d5, [r6, #32]
 800fefe:	ee33 7b07 	vadd.f64	d7, d3, d7
 800ff02:	1814      	adds	r4, r2, r0
 800ff04:	0365      	lsls	r5, r4, #13
 800ff06:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 800ff0a:	eea3 5b04 	vfma.f64	d5, d3, d4
 800ff0e:	eea6 7b05 	vfma.f64	d7, d6, d5
 800ff12:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 800ff16:	ee26 6b06 	vmul.f64	d6, d6, d6
 800ff1a:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 800ff1e:	2000      	movs	r0, #0
 800ff20:	eb10 0a04 	adds.w	sl, r0, r4
 800ff24:	eea3 5b04 	vfma.f64	d5, d3, d4
 800ff28:	eb45 0b0c 	adc.w	fp, r5, ip
 800ff2c:	eea6 7b05 	vfma.f64	d7, d6, d5
 800ff30:	2f00      	cmp	r7, #0
 800ff32:	d16a      	bne.n	801000a <pow+0x54a>
 800ff34:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 800ff38:	4639      	mov	r1, r7
 800ff3a:	ea50 0301 	orrs.w	r3, r0, r1
 800ff3e:	f04f 0300 	mov.w	r3, #0
 800ff42:	d115      	bne.n	800ff70 <pow+0x4b0>
 800ff44:	eb1a 0303 	adds.w	r3, sl, r3
 800ff48:	ee0b 3a10 	vmov	s22, r3
 800ff4c:	4b3b      	ldr	r3, [pc, #236]	; (801003c <pow+0x57c>)
 800ff4e:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8010020 <pow+0x560>
 800ff52:	eb4b 0303 	adc.w	r3, fp, r3
 800ff56:	ee0b 3a90 	vmov	s23, r3
 800ff5a:	eea7 bb0b 	vfma.f64	d11, d7, d11
 800ff5e:	ee2b 0b00 	vmul.f64	d0, d11, d0
 800ff62:	b01b      	add	sp, #108	; 0x6c
 800ff64:	ecbd 8b0a 	vpop	{d8-d12}
 800ff68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff6c:	f001 b84c 	b.w	8011008 <__math_check_oflow>
 800ff70:	eb1a 0303 	adds.w	r3, sl, r3
 800ff74:	930a      	str	r3, [sp, #40]	; 0x28
 800ff76:	4b32      	ldr	r3, [pc, #200]	; (8010040 <pow+0x580>)
 800ff78:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800ff7c:	eb4b 0303 	adc.w	r3, fp, r3
 800ff80:	930b      	str	r3, [sp, #44]	; 0x2c
 800ff82:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800ff86:	ee27 6b05 	vmul.f64	d6, d7, d5
 800ff8a:	ee35 7b06 	vadd.f64	d7, d5, d6
 800ff8e:	eeb0 3bc7 	vabs.f64	d3, d7
 800ff92:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800ff96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff9a:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8010028 <pow+0x568>
 800ff9e:	d52b      	bpl.n	800fff8 <pow+0x538>
 800ffa0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ffa4:	ee35 5b47 	vsub.f64	d5, d5, d7
 800ffa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffac:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800ffb0:	ee35 6b06 	vadd.f64	d6, d5, d6
 800ffb4:	bf48      	it	mi
 800ffb6:	eeb0 4b43 	vmovmi.f64	d4, d3
 800ffba:	ee37 3b04 	vadd.f64	d3, d7, d4
 800ffbe:	ee34 5b43 	vsub.f64	d5, d4, d3
 800ffc2:	ee35 7b07 	vadd.f64	d7, d5, d7
 800ffc6:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ffca:	ee37 7b03 	vadd.f64	d7, d7, d3
 800ffce:	ee37 7b44 	vsub.f64	d7, d7, d4
 800ffd2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ffd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffda:	d105      	bne.n	800ffe8 <pow+0x528>
 800ffdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ffde:	463a      	mov	r2, r7
 800ffe0:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800ffe4:	ec43 2b17 	vmov	d7, r2, r3
 800ffe8:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 800ffec:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 800fff0:	ee26 6b00 	vmul.f64	d6, d6, d0
 800fff4:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 800fff8:	ee27 0b00 	vmul.f64	d0, d7, d0
 800fffc:	b01b      	add	sp, #108	; 0x6c
 800fffe:	ecbd 8b0a 	vpop	{d8-d12}
 8010002:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010006:	f000 bff6 	b.w	8010ff6 <__math_check_uflow>
 801000a:	ec4b ab10 	vmov	d0, sl, fp
 801000e:	eea7 0b00 	vfma.f64	d0, d7, d0
 8010012:	e5a3      	b.n	800fb5c <pow+0x9c>
 8010014:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8010030 <pow+0x570>
 8010018:	e5a0      	b.n	800fb5c <pow+0x9c>
 801001a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801001e:	e59d      	b.n	800fb5c <pow+0x9c>
 8010020:	00000000 	.word	0x00000000
 8010024:	7f000000 	.word	0x7f000000
 8010028:	00000000 	.word	0x00000000
 801002c:	00100000 	.word	0x00100000
	...
 8010038:	08012ad0 	.word	0x08012ad0
 801003c:	c0f00000 	.word	0xc0f00000
 8010040:	3fe00000 	.word	0x3fe00000
 8010044:	00000000 	.word	0x00000000

08010048 <atan>:
 8010048:	b538      	push	{r3, r4, r5, lr}
 801004a:	eeb0 7b40 	vmov.f64	d7, d0
 801004e:	ee17 5a90 	vmov	r5, s15
 8010052:	4b73      	ldr	r3, [pc, #460]	; (8010220 <atan+0x1d8>)
 8010054:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8010058:	429c      	cmp	r4, r3
 801005a:	dd13      	ble.n	8010084 <atan+0x3c>
 801005c:	4b71      	ldr	r3, [pc, #452]	; (8010224 <atan+0x1dc>)
 801005e:	429c      	cmp	r4, r3
 8010060:	dc03      	bgt.n	801006a <atan+0x22>
 8010062:	d107      	bne.n	8010074 <atan+0x2c>
 8010064:	ee10 3a10 	vmov	r3, s0
 8010068:	b123      	cbz	r3, 8010074 <atan+0x2c>
 801006a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801006e:	eeb0 0b47 	vmov.f64	d0, d7
 8010072:	bd38      	pop	{r3, r4, r5, pc}
 8010074:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80101b0 <atan+0x168>
 8010078:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 80101b8 <atan+0x170>
 801007c:	2d00      	cmp	r5, #0
 801007e:	fe36 7b07 	vselgt.f64	d7, d6, d7
 8010082:	e7f4      	b.n	801006e <atan+0x26>
 8010084:	4b68      	ldr	r3, [pc, #416]	; (8010228 <atan+0x1e0>)
 8010086:	429c      	cmp	r4, r3
 8010088:	dc11      	bgt.n	80100ae <atan+0x66>
 801008a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801008e:	429c      	cmp	r4, r3
 8010090:	dc0a      	bgt.n	80100a8 <atan+0x60>
 8010092:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8010096:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 80101c0 <atan+0x178>
 801009a:	ee30 6b06 	vadd.f64	d6, d0, d6
 801009e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80100a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100a6:	dce2      	bgt.n	801006e <atan+0x26>
 80100a8:	f04f 33ff 	mov.w	r3, #4294967295
 80100ac:	e013      	b.n	80100d6 <atan+0x8e>
 80100ae:	f000 f90f 	bl	80102d0 <fabs>
 80100b2:	4b5e      	ldr	r3, [pc, #376]	; (801022c <atan+0x1e4>)
 80100b4:	429c      	cmp	r4, r3
 80100b6:	dc4f      	bgt.n	8010158 <atan+0x110>
 80100b8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80100bc:	429c      	cmp	r4, r3
 80100be:	dc41      	bgt.n	8010144 <atan+0xfc>
 80100c0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80100c4:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80100c8:	2300      	movs	r3, #0
 80100ca:	eea0 6b07 	vfma.f64	d6, d0, d7
 80100ce:	ee30 0b07 	vadd.f64	d0, d0, d7
 80100d2:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80100d6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80101c8 <atan+0x180>
 80100da:	ee27 4b07 	vmul.f64	d4, d7, d7
 80100de:	ee24 5b04 	vmul.f64	d5, d4, d4
 80100e2:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 80101d0 <atan+0x188>
 80100e6:	eea5 3b06 	vfma.f64	d3, d5, d6
 80100ea:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80101d8 <atan+0x190>
 80100ee:	eea3 6b05 	vfma.f64	d6, d3, d5
 80100f2:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 80101e0 <atan+0x198>
 80100f6:	eea6 3b05 	vfma.f64	d3, d6, d5
 80100fa:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80101e8 <atan+0x1a0>
 80100fe:	eea3 6b05 	vfma.f64	d6, d3, d5
 8010102:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 80101f0 <atan+0x1a8>
 8010106:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 80101f8 <atan+0x1b0>
 801010a:	eea6 3b05 	vfma.f64	d3, d6, d5
 801010e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8010200 <atan+0x1b8>
 8010112:	eea5 2b06 	vfma.f64	d2, d5, d6
 8010116:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8010208 <atan+0x1c0>
 801011a:	eea2 6b05 	vfma.f64	d6, d2, d5
 801011e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8010210 <atan+0x1c8>
 8010122:	eea6 2b05 	vfma.f64	d2, d6, d5
 8010126:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8010218 <atan+0x1d0>
 801012a:	1c5a      	adds	r2, r3, #1
 801012c:	eea2 6b05 	vfma.f64	d6, d2, d5
 8010130:	ee26 6b05 	vmul.f64	d6, d6, d5
 8010134:	eea3 6b04 	vfma.f64	d6, d3, d4
 8010138:	ee27 6b06 	vmul.f64	d6, d7, d6
 801013c:	d121      	bne.n	8010182 <atan+0x13a>
 801013e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010142:	e794      	b.n	801006e <atan+0x26>
 8010144:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8010148:	2301      	movs	r3, #1
 801014a:	ee30 6b47 	vsub.f64	d6, d0, d7
 801014e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8010152:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010156:	e7be      	b.n	80100d6 <atan+0x8e>
 8010158:	4b35      	ldr	r3, [pc, #212]	; (8010230 <atan+0x1e8>)
 801015a:	429c      	cmp	r4, r3
 801015c:	da0b      	bge.n	8010176 <atan+0x12e>
 801015e:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8010162:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010166:	ee30 5b47 	vsub.f64	d5, d0, d7
 801016a:	eea0 6b07 	vfma.f64	d6, d0, d7
 801016e:	2302      	movs	r3, #2
 8010170:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8010174:	e7af      	b.n	80100d6 <atan+0x8e>
 8010176:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801017a:	2303      	movs	r3, #3
 801017c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8010180:	e7a9      	b.n	80100d6 <atan+0x8e>
 8010182:	4a2c      	ldr	r2, [pc, #176]	; (8010234 <atan+0x1ec>)
 8010184:	492c      	ldr	r1, [pc, #176]	; (8010238 <atan+0x1f0>)
 8010186:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801018a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801018e:	ed93 5b00 	vldr	d5, [r3]
 8010192:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010196:	ee36 7b47 	vsub.f64	d7, d6, d7
 801019a:	ed92 6b00 	vldr	d6, [r2]
 801019e:	2d00      	cmp	r5, #0
 80101a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80101a4:	bfb8      	it	lt
 80101a6:	eeb1 7b47 	vneglt.f64	d7, d7
 80101aa:	e760      	b.n	801006e <atan+0x26>
 80101ac:	f3af 8000 	nop.w
 80101b0:	54442d18 	.word	0x54442d18
 80101b4:	3ff921fb 	.word	0x3ff921fb
 80101b8:	54442d18 	.word	0x54442d18
 80101bc:	bff921fb 	.word	0xbff921fb
 80101c0:	8800759c 	.word	0x8800759c
 80101c4:	7e37e43c 	.word	0x7e37e43c
 80101c8:	e322da11 	.word	0xe322da11
 80101cc:	3f90ad3a 	.word	0x3f90ad3a
 80101d0:	24760deb 	.word	0x24760deb
 80101d4:	3fa97b4b 	.word	0x3fa97b4b
 80101d8:	a0d03d51 	.word	0xa0d03d51
 80101dc:	3fb10d66 	.word	0x3fb10d66
 80101e0:	c54c206e 	.word	0xc54c206e
 80101e4:	3fb745cd 	.word	0x3fb745cd
 80101e8:	920083ff 	.word	0x920083ff
 80101ec:	3fc24924 	.word	0x3fc24924
 80101f0:	5555550d 	.word	0x5555550d
 80101f4:	3fd55555 	.word	0x3fd55555
 80101f8:	52defd9a 	.word	0x52defd9a
 80101fc:	bfadde2d 	.word	0xbfadde2d
 8010200:	2c6a6c2f 	.word	0x2c6a6c2f
 8010204:	bfa2b444 	.word	0xbfa2b444
 8010208:	af749a6d 	.word	0xaf749a6d
 801020c:	bfb3b0f2 	.word	0xbfb3b0f2
 8010210:	fe231671 	.word	0xfe231671
 8010214:	bfbc71c6 	.word	0xbfbc71c6
 8010218:	9998ebc4 	.word	0x9998ebc4
 801021c:	bfc99999 	.word	0xbfc99999
 8010220:	440fffff 	.word	0x440fffff
 8010224:	7ff00000 	.word	0x7ff00000
 8010228:	3fdbffff 	.word	0x3fdbffff
 801022c:	3ff2ffff 	.word	0x3ff2ffff
 8010230:	40038000 	.word	0x40038000
 8010234:	08012900 	.word	0x08012900
 8010238:	08012920 	.word	0x08012920
 801023c:	00000000 	.word	0x00000000

08010240 <cos>:
 8010240:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010242:	eeb0 7b40 	vmov.f64	d7, d0
 8010246:	ee17 3a90 	vmov	r3, s15
 801024a:	4a1f      	ldr	r2, [pc, #124]	; (80102c8 <cos+0x88>)
 801024c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010250:	4293      	cmp	r3, r2
 8010252:	dc04      	bgt.n	801025e <cos+0x1e>
 8010254:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80102c0 <cos+0x80>
 8010258:	f000 fb36 	bl	80108c8 <__kernel_cos>
 801025c:	e004      	b.n	8010268 <cos+0x28>
 801025e:	4a1b      	ldr	r2, [pc, #108]	; (80102cc <cos+0x8c>)
 8010260:	4293      	cmp	r3, r2
 8010262:	dd04      	ble.n	801026e <cos+0x2e>
 8010264:	ee30 0b40 	vsub.f64	d0, d0, d0
 8010268:	b005      	add	sp, #20
 801026a:	f85d fb04 	ldr.w	pc, [sp], #4
 801026e:	4668      	mov	r0, sp
 8010270:	f000 f9e6 	bl	8010640 <__ieee754_rem_pio2>
 8010274:	f000 0003 	and.w	r0, r0, #3
 8010278:	2801      	cmp	r0, #1
 801027a:	d007      	beq.n	801028c <cos+0x4c>
 801027c:	2802      	cmp	r0, #2
 801027e:	d00e      	beq.n	801029e <cos+0x5e>
 8010280:	b9a0      	cbnz	r0, 80102ac <cos+0x6c>
 8010282:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010286:	ed9d 0b00 	vldr	d0, [sp]
 801028a:	e7e5      	b.n	8010258 <cos+0x18>
 801028c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010290:	ed9d 0b00 	vldr	d0, [sp]
 8010294:	f000 fe04 	bl	8010ea0 <__kernel_sin>
 8010298:	eeb1 0b40 	vneg.f64	d0, d0
 801029c:	e7e4      	b.n	8010268 <cos+0x28>
 801029e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80102a2:	ed9d 0b00 	vldr	d0, [sp]
 80102a6:	f000 fb0f 	bl	80108c8 <__kernel_cos>
 80102aa:	e7f5      	b.n	8010298 <cos+0x58>
 80102ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80102b0:	ed9d 0b00 	vldr	d0, [sp]
 80102b4:	2001      	movs	r0, #1
 80102b6:	f000 fdf3 	bl	8010ea0 <__kernel_sin>
 80102ba:	e7d5      	b.n	8010268 <cos+0x28>
 80102bc:	f3af 8000 	nop.w
	...
 80102c8:	3fe921fb 	.word	0x3fe921fb
 80102cc:	7fefffff 	.word	0x7fefffff

080102d0 <fabs>:
 80102d0:	ec51 0b10 	vmov	r0, r1, d0
 80102d4:	ee10 2a10 	vmov	r2, s0
 80102d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80102dc:	ec43 2b10 	vmov	d0, r2, r3
 80102e0:	4770      	bx	lr
 80102e2:	0000      	movs	r0, r0
 80102e4:	0000      	movs	r0, r0
	...

080102e8 <sin>:
 80102e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80102ea:	eeb0 7b40 	vmov.f64	d7, d0
 80102ee:	ee17 3a90 	vmov	r3, s15
 80102f2:	4a1f      	ldr	r2, [pc, #124]	; (8010370 <sin+0x88>)
 80102f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80102f8:	4293      	cmp	r3, r2
 80102fa:	dc05      	bgt.n	8010308 <sin+0x20>
 80102fc:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8010368 <sin+0x80>
 8010300:	2000      	movs	r0, #0
 8010302:	f000 fdcd 	bl	8010ea0 <__kernel_sin>
 8010306:	e004      	b.n	8010312 <sin+0x2a>
 8010308:	4a1a      	ldr	r2, [pc, #104]	; (8010374 <sin+0x8c>)
 801030a:	4293      	cmp	r3, r2
 801030c:	dd04      	ble.n	8010318 <sin+0x30>
 801030e:	ee30 0b40 	vsub.f64	d0, d0, d0
 8010312:	b005      	add	sp, #20
 8010314:	f85d fb04 	ldr.w	pc, [sp], #4
 8010318:	4668      	mov	r0, sp
 801031a:	f000 f991 	bl	8010640 <__ieee754_rem_pio2>
 801031e:	f000 0003 	and.w	r0, r0, #3
 8010322:	2801      	cmp	r0, #1
 8010324:	d008      	beq.n	8010338 <sin+0x50>
 8010326:	2802      	cmp	r0, #2
 8010328:	d00d      	beq.n	8010346 <sin+0x5e>
 801032a:	b9b0      	cbnz	r0, 801035a <sin+0x72>
 801032c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010330:	ed9d 0b00 	vldr	d0, [sp]
 8010334:	2001      	movs	r0, #1
 8010336:	e7e4      	b.n	8010302 <sin+0x1a>
 8010338:	ed9d 1b02 	vldr	d1, [sp, #8]
 801033c:	ed9d 0b00 	vldr	d0, [sp]
 8010340:	f000 fac2 	bl	80108c8 <__kernel_cos>
 8010344:	e7e5      	b.n	8010312 <sin+0x2a>
 8010346:	ed9d 1b02 	vldr	d1, [sp, #8]
 801034a:	ed9d 0b00 	vldr	d0, [sp]
 801034e:	2001      	movs	r0, #1
 8010350:	f000 fda6 	bl	8010ea0 <__kernel_sin>
 8010354:	eeb1 0b40 	vneg.f64	d0, d0
 8010358:	e7db      	b.n	8010312 <sin+0x2a>
 801035a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801035e:	ed9d 0b00 	vldr	d0, [sp]
 8010362:	f000 fab1 	bl	80108c8 <__kernel_cos>
 8010366:	e7f5      	b.n	8010354 <sin+0x6c>
	...
 8010370:	3fe921fb 	.word	0x3fe921fb
 8010374:	7fefffff 	.word	0x7fefffff

08010378 <acos>:
 8010378:	b508      	push	{r3, lr}
 801037a:	ed2d 8b04 	vpush	{d8-d9}
 801037e:	eeb0 8b40 	vmov.f64	d8, d0
 8010382:	f000 f82d 	bl	80103e0 <__ieee754_acos>
 8010386:	4b13      	ldr	r3, [pc, #76]	; (80103d4 <acos+0x5c>)
 8010388:	eeb0 9b40 	vmov.f64	d9, d0
 801038c:	f993 3000 	ldrsb.w	r3, [r3]
 8010390:	3301      	adds	r3, #1
 8010392:	d01a      	beq.n	80103ca <acos+0x52>
 8010394:	eeb4 8b48 	vcmp.f64	d8, d8
 8010398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801039c:	d615      	bvs.n	80103ca <acos+0x52>
 801039e:	eeb0 0b48 	vmov.f64	d0, d8
 80103a2:	f7ff ff95 	bl	80102d0 <fabs>
 80103a6:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80103aa:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80103ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103b2:	dd0a      	ble.n	80103ca <acos+0x52>
 80103b4:	f000 ff52 	bl	801125c <__errno>
 80103b8:	ecbd 8b04 	vpop	{d8-d9}
 80103bc:	2321      	movs	r3, #33	; 0x21
 80103be:	6003      	str	r3, [r0, #0]
 80103c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80103c4:	4804      	ldr	r0, [pc, #16]	; (80103d8 <acos+0x60>)
 80103c6:	f000 bea7 	b.w	8011118 <nan>
 80103ca:	eeb0 0b49 	vmov.f64	d0, d9
 80103ce:	ecbd 8b04 	vpop	{d8-d9}
 80103d2:	bd08      	pop	{r3, pc}
 80103d4:	240000a4 	.word	0x240000a4
 80103d8:	08012940 	.word	0x08012940
 80103dc:	00000000 	.word	0x00000000

080103e0 <__ieee754_acos>:
 80103e0:	b500      	push	{lr}
 80103e2:	ee10 2a90 	vmov	r2, s1
 80103e6:	ed2d 8b10 	vpush	{d8-d15}
 80103ea:	4991      	ldr	r1, [pc, #580]	; (8010630 <__ieee754_acos+0x250>)
 80103ec:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80103f0:	428b      	cmp	r3, r1
 80103f2:	b083      	sub	sp, #12
 80103f4:	dd18      	ble.n	8010428 <__ieee754_acos+0x48>
 80103f6:	ee10 1a10 	vmov	r1, s0
 80103fa:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 80103fe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010402:	430b      	orrs	r3, r1
 8010404:	d10b      	bne.n	801041e <__ieee754_acos+0x3e>
 8010406:	ed9f 0b6c 	vldr	d0, [pc, #432]	; 80105b8 <__ieee754_acos+0x1d8>
 801040a:	ed9f 1b6d 	vldr	d1, [pc, #436]	; 80105c0 <__ieee754_acos+0x1e0>
 801040e:	2a00      	cmp	r2, #0
 8010410:	fe30 0b01 	vselgt.f64	d0, d0, d1
 8010414:	b003      	add	sp, #12
 8010416:	ecbd 8b10 	vpop	{d8-d15}
 801041a:	f85d fb04 	ldr.w	pc, [sp], #4
 801041e:	ee30 8b40 	vsub.f64	d8, d0, d0
 8010422:	ee88 0b08 	vdiv.f64	d0, d8, d8
 8010426:	e7f5      	b.n	8010414 <__ieee754_acos+0x34>
 8010428:	4982      	ldr	r1, [pc, #520]	; (8010634 <__ieee754_acos+0x254>)
 801042a:	428b      	cmp	r3, r1
 801042c:	dc3e      	bgt.n	80104ac <__ieee754_acos+0xcc>
 801042e:	4a82      	ldr	r2, [pc, #520]	; (8010638 <__ieee754_acos+0x258>)
 8010430:	4293      	cmp	r3, r2
 8010432:	ed9f 1b65 	vldr	d1, [pc, #404]	; 80105c8 <__ieee754_acos+0x1e8>
 8010436:	f340 80bc 	ble.w	80105b2 <__ieee754_acos+0x1d2>
 801043a:	ee20 7b00 	vmul.f64	d7, d0, d0
 801043e:	ed9f 5b64 	vldr	d5, [pc, #400]	; 80105d0 <__ieee754_acos+0x1f0>
 8010442:	ed9f 6b65 	vldr	d6, [pc, #404]	; 80105d8 <__ieee754_acos+0x1f8>
 8010446:	eea7 6b05 	vfma.f64	d6, d7, d5
 801044a:	ed9f 5b65 	vldr	d5, [pc, #404]	; 80105e0 <__ieee754_acos+0x200>
 801044e:	eea6 5b07 	vfma.f64	d5, d6, d7
 8010452:	ed9f 6b65 	vldr	d6, [pc, #404]	; 80105e8 <__ieee754_acos+0x208>
 8010456:	eea5 6b07 	vfma.f64	d6, d5, d7
 801045a:	ed9f 5b65 	vldr	d5, [pc, #404]	; 80105f0 <__ieee754_acos+0x210>
 801045e:	eea6 5b07 	vfma.f64	d5, d6, d7
 8010462:	ed9f 6b65 	vldr	d6, [pc, #404]	; 80105f8 <__ieee754_acos+0x218>
 8010466:	ed9f 4b66 	vldr	d4, [pc, #408]	; 8010600 <__ieee754_acos+0x220>
 801046a:	eea5 6b07 	vfma.f64	d6, d5, d7
 801046e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010472:	ed9f 5b65 	vldr	d5, [pc, #404]	; 8010608 <__ieee754_acos+0x228>
 8010476:	eea7 4b05 	vfma.f64	d4, d7, d5
 801047a:	ed9f 5b65 	vldr	d5, [pc, #404]	; 8010610 <__ieee754_acos+0x230>
 801047e:	ed9f 8b66 	vldr	d8, [pc, #408]	; 8010618 <__ieee754_acos+0x238>
 8010482:	eea4 5b07 	vfma.f64	d5, d4, d7
 8010486:	ed9f 4b66 	vldr	d4, [pc, #408]	; 8010620 <__ieee754_acos+0x240>
 801048a:	eea5 4b07 	vfma.f64	d4, d5, d7
 801048e:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8010492:	eea4 5b07 	vfma.f64	d5, d4, d7
 8010496:	eeb0 7b45 	vmov.f64	d7, d5
 801049a:	ee86 5b07 	vdiv.f64	d5, d6, d7
 801049e:	eea0 8b45 	vfms.f64	d8, d0, d5
 80104a2:	ee30 0b48 	vsub.f64	d0, d0, d8
 80104a6:	ee31 0b40 	vsub.f64	d0, d1, d0
 80104aa:	e7b3      	b.n	8010414 <__ieee754_acos+0x34>
 80104ac:	2a00      	cmp	r2, #0
 80104ae:	ed9f fb48 	vldr	d15, [pc, #288]	; 80105d0 <__ieee754_acos+0x1f0>
 80104b2:	eeb7 ab00 	vmov.f64	d10, #112	; 0x3f800000  1.0
 80104b6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80104ba:	ed9f eb47 	vldr	d14, [pc, #284]	; 80105d8 <__ieee754_acos+0x1f8>
 80104be:	ed9f db48 	vldr	d13, [pc, #288]	; 80105e0 <__ieee754_acos+0x200>
 80104c2:	ed9f cb49 	vldr	d12, [pc, #292]	; 80105e8 <__ieee754_acos+0x208>
 80104c6:	ed9f bb4a 	vldr	d11, [pc, #296]	; 80105f0 <__ieee754_acos+0x210>
 80104ca:	ed9f 9b4b 	vldr	d9, [pc, #300]	; 80105f8 <__ieee754_acos+0x218>
 80104ce:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 8010608 <__ieee754_acos+0x228>
 80104d2:	ed9f 4b4b 	vldr	d4, [pc, #300]	; 8010600 <__ieee754_acos+0x220>
 80104d6:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 8010610 <__ieee754_acos+0x230>
 80104da:	ed9f 2b51 	vldr	d2, [pc, #324]	; 8010620 <__ieee754_acos+0x240>
 80104de:	da28      	bge.n	8010532 <__ieee754_acos+0x152>
 80104e0:	ee30 0b0a 	vadd.f64	d0, d0, d10
 80104e4:	ee20 0b08 	vmul.f64	d0, d0, d8
 80104e8:	eea0 eb0f 	vfma.f64	d14, d0, d15
 80104ec:	eea0 4b05 	vfma.f64	d4, d0, d5
 80104f0:	eeae db00 	vfma.f64	d13, d14, d0
 80104f4:	eea4 3b00 	vfma.f64	d3, d4, d0
 80104f8:	eead cb00 	vfma.f64	d12, d13, d0
 80104fc:	eea3 2b00 	vfma.f64	d2, d3, d0
 8010500:	eeac bb00 	vfma.f64	d11, d12, d0
 8010504:	eea2 ab00 	vfma.f64	d10, d2, d0
 8010508:	eeab 9b00 	vfma.f64	d9, d11, d0
 801050c:	ee29 9b00 	vmul.f64	d9, d9, d0
 8010510:	f000 f9d6 	bl	80108c0 <__ieee754_sqrt>
 8010514:	ee89 6b0a 	vdiv.f64	d6, d9, d10
 8010518:	ed9f 7b43 	vldr	d7, [pc, #268]	; 8010628 <__ieee754_acos+0x248>
 801051c:	eea0 7b06 	vfma.f64	d7, d0, d6
 8010520:	ee37 7b00 	vadd.f64	d7, d7, d0
 8010524:	ed9f 0b26 	vldr	d0, [pc, #152]	; 80105c0 <__ieee754_acos+0x1e0>
 8010528:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 801052c:	eea7 0b46 	vfms.f64	d0, d7, d6
 8010530:	e770      	b.n	8010414 <__ieee754_acos+0x34>
 8010532:	ee3a 0b40 	vsub.f64	d0, d10, d0
 8010536:	ee20 8b08 	vmul.f64	d8, d0, d8
 801053a:	eeb0 0b48 	vmov.f64	d0, d8
 801053e:	f000 f9bf 	bl	80108c0 <__ieee754_sqrt>
 8010542:	eeb0 6b48 	vmov.f64	d6, d8
 8010546:	eea8 eb0f 	vfma.f64	d14, d8, d15
 801054a:	ed8d 0b00 	vstr	d0, [sp]
 801054e:	eeae db08 	vfma.f64	d13, d14, d8
 8010552:	eead cb08 	vfma.f64	d12, d13, d8
 8010556:	e9dd 2300 	ldrd	r2, r3, [sp]
 801055a:	eeac bb08 	vfma.f64	d11, d12, d8
 801055e:	eeab 9b08 	vfma.f64	d9, d11, d8
 8010562:	ed9d 7b00 	vldr	d7, [sp]
 8010566:	ee29 9b08 	vmul.f64	d9, d9, d8
 801056a:	2200      	movs	r2, #0
 801056c:	ec43 2b10 	vmov	d0, r2, r3
 8010570:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8010608 <__ieee754_acos+0x228>
 8010574:	eea0 6b40 	vfms.f64	d6, d0, d0
 8010578:	ee37 7b00 	vadd.f64	d7, d7, d0
 801057c:	ed9f 4b20 	vldr	d4, [pc, #128]	; 8010600 <__ieee754_acos+0x220>
 8010580:	ee86 1b07 	vdiv.f64	d1, d6, d7
 8010584:	ed9f 3b22 	vldr	d3, [pc, #136]	; 8010610 <__ieee754_acos+0x230>
 8010588:	eea8 4b05 	vfma.f64	d4, d8, d5
 801058c:	ed9f 2b24 	vldr	d2, [pc, #144]	; 8010620 <__ieee754_acos+0x240>
 8010590:	eea4 3b08 	vfma.f64	d3, d4, d8
 8010594:	ed9d 6b00 	vldr	d6, [sp]
 8010598:	eea3 2b08 	vfma.f64	d2, d3, d8
 801059c:	eea2 ab08 	vfma.f64	d10, d2, d8
 80105a0:	ee89 7b0a 	vdiv.f64	d7, d9, d10
 80105a4:	eea6 1b07 	vfma.f64	d1, d6, d7
 80105a8:	ee30 0b01 	vadd.f64	d0, d0, d1
 80105ac:	ee30 0b00 	vadd.f64	d0, d0, d0
 80105b0:	e730      	b.n	8010414 <__ieee754_acos+0x34>
 80105b2:	eeb0 0b41 	vmov.f64	d0, d1
 80105b6:	e72d      	b.n	8010414 <__ieee754_acos+0x34>
	...
 80105c0:	54442d18 	.word	0x54442d18
 80105c4:	400921fb 	.word	0x400921fb
 80105c8:	54442d18 	.word	0x54442d18
 80105cc:	3ff921fb 	.word	0x3ff921fb
 80105d0:	0dfdf709 	.word	0x0dfdf709
 80105d4:	3f023de1 	.word	0x3f023de1
 80105d8:	7501b288 	.word	0x7501b288
 80105dc:	3f49efe0 	.word	0x3f49efe0
 80105e0:	b5688f3b 	.word	0xb5688f3b
 80105e4:	bfa48228 	.word	0xbfa48228
 80105e8:	0e884455 	.word	0x0e884455
 80105ec:	3fc9c155 	.word	0x3fc9c155
 80105f0:	03eb6f7d 	.word	0x03eb6f7d
 80105f4:	bfd4d612 	.word	0xbfd4d612
 80105f8:	55555555 	.word	0x55555555
 80105fc:	3fc55555 	.word	0x3fc55555
 8010600:	1b8d0159 	.word	0x1b8d0159
 8010604:	bfe6066c 	.word	0xbfe6066c
 8010608:	b12e9282 	.word	0xb12e9282
 801060c:	3fb3b8c5 	.word	0x3fb3b8c5
 8010610:	9c598ac8 	.word	0x9c598ac8
 8010614:	40002ae5 	.word	0x40002ae5
 8010618:	33145c07 	.word	0x33145c07
 801061c:	3c91a626 	.word	0x3c91a626
 8010620:	1c8a2d4b 	.word	0x1c8a2d4b
 8010624:	c0033a27 	.word	0xc0033a27
 8010628:	33145c07 	.word	0x33145c07
 801062c:	bc91a626 	.word	0xbc91a626
 8010630:	3fefffff 	.word	0x3fefffff
 8010634:	3fdfffff 	.word	0x3fdfffff
 8010638:	3c600000 	.word	0x3c600000
 801063c:	00000000 	.word	0x00000000

08010640 <__ieee754_rem_pio2>:
 8010640:	b570      	push	{r4, r5, r6, lr}
 8010642:	eeb0 7b40 	vmov.f64	d7, d0
 8010646:	ee17 5a90 	vmov	r5, s15
 801064a:	4b97      	ldr	r3, [pc, #604]	; (80108a8 <__ieee754_rem_pio2+0x268>)
 801064c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010650:	429e      	cmp	r6, r3
 8010652:	b088      	sub	sp, #32
 8010654:	4604      	mov	r4, r0
 8010656:	dc07      	bgt.n	8010668 <__ieee754_rem_pio2+0x28>
 8010658:	2200      	movs	r2, #0
 801065a:	2300      	movs	r3, #0
 801065c:	ed84 0b00 	vstr	d0, [r4]
 8010660:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010664:	2000      	movs	r0, #0
 8010666:	e01b      	b.n	80106a0 <__ieee754_rem_pio2+0x60>
 8010668:	4b90      	ldr	r3, [pc, #576]	; (80108ac <__ieee754_rem_pio2+0x26c>)
 801066a:	429e      	cmp	r6, r3
 801066c:	dc3b      	bgt.n	80106e6 <__ieee754_rem_pio2+0xa6>
 801066e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8010672:	2d00      	cmp	r5, #0
 8010674:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8010868 <__ieee754_rem_pio2+0x228>
 8010678:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801067c:	dd19      	ble.n	80106b2 <__ieee754_rem_pio2+0x72>
 801067e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8010682:	429e      	cmp	r6, r3
 8010684:	d00e      	beq.n	80106a4 <__ieee754_rem_pio2+0x64>
 8010686:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8010870 <__ieee754_rem_pio2+0x230>
 801068a:	ee37 5b46 	vsub.f64	d5, d7, d6
 801068e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010692:	ed84 5b00 	vstr	d5, [r4]
 8010696:	ee37 7b46 	vsub.f64	d7, d7, d6
 801069a:	ed84 7b02 	vstr	d7, [r4, #8]
 801069e:	2001      	movs	r0, #1
 80106a0:	b008      	add	sp, #32
 80106a2:	bd70      	pop	{r4, r5, r6, pc}
 80106a4:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8010878 <__ieee754_rem_pio2+0x238>
 80106a8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80106ac:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8010880 <__ieee754_rem_pio2+0x240>
 80106b0:	e7eb      	b.n	801068a <__ieee754_rem_pio2+0x4a>
 80106b2:	429e      	cmp	r6, r3
 80106b4:	ee30 7b06 	vadd.f64	d7, d0, d6
 80106b8:	d00e      	beq.n	80106d8 <__ieee754_rem_pio2+0x98>
 80106ba:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8010870 <__ieee754_rem_pio2+0x230>
 80106be:	ee37 5b06 	vadd.f64	d5, d7, d6
 80106c2:	ee37 7b45 	vsub.f64	d7, d7, d5
 80106c6:	ed84 5b00 	vstr	d5, [r4]
 80106ca:	ee37 7b06 	vadd.f64	d7, d7, d6
 80106ce:	f04f 30ff 	mov.w	r0, #4294967295
 80106d2:	ed84 7b02 	vstr	d7, [r4, #8]
 80106d6:	e7e3      	b.n	80106a0 <__ieee754_rem_pio2+0x60>
 80106d8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8010878 <__ieee754_rem_pio2+0x238>
 80106dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80106e0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8010880 <__ieee754_rem_pio2+0x240>
 80106e4:	e7eb      	b.n	80106be <__ieee754_rem_pio2+0x7e>
 80106e6:	4b72      	ldr	r3, [pc, #456]	; (80108b0 <__ieee754_rem_pio2+0x270>)
 80106e8:	429e      	cmp	r6, r3
 80106ea:	dc6e      	bgt.n	80107ca <__ieee754_rem_pio2+0x18a>
 80106ec:	f7ff fdf0 	bl	80102d0 <fabs>
 80106f0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80106f4:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8010888 <__ieee754_rem_pio2+0x248>
 80106f8:	eea0 7b06 	vfma.f64	d7, d0, d6
 80106fc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8010700:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8010704:	ee17 0a90 	vmov	r0, s15
 8010708:	eeb1 4b45 	vneg.f64	d4, d5
 801070c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8010868 <__ieee754_rem_pio2+0x228>
 8010710:	eea5 0b47 	vfms.f64	d0, d5, d7
 8010714:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8010870 <__ieee754_rem_pio2+0x230>
 8010718:	281f      	cmp	r0, #31
 801071a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801071e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8010722:	dc08      	bgt.n	8010736 <__ieee754_rem_pio2+0xf6>
 8010724:	4b63      	ldr	r3, [pc, #396]	; (80108b4 <__ieee754_rem_pio2+0x274>)
 8010726:	1e42      	subs	r2, r0, #1
 8010728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801072c:	42b3      	cmp	r3, r6
 801072e:	d002      	beq.n	8010736 <__ieee754_rem_pio2+0xf6>
 8010730:	ed84 6b00 	vstr	d6, [r4]
 8010734:	e024      	b.n	8010780 <__ieee754_rem_pio2+0x140>
 8010736:	ee16 3a90 	vmov	r3, s13
 801073a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801073e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8010742:	2b10      	cmp	r3, #16
 8010744:	ea4f 5226 	mov.w	r2, r6, asr #20
 8010748:	ddf2      	ble.n	8010730 <__ieee754_rem_pio2+0xf0>
 801074a:	eeb0 6b40 	vmov.f64	d6, d0
 801074e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8010878 <__ieee754_rem_pio2+0x238>
 8010752:	eea4 6b03 	vfma.f64	d6, d4, d3
 8010756:	ee30 7b46 	vsub.f64	d7, d0, d6
 801075a:	eea4 7b03 	vfma.f64	d7, d4, d3
 801075e:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8010880 <__ieee754_rem_pio2+0x240>
 8010762:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8010766:	ee36 3b47 	vsub.f64	d3, d6, d7
 801076a:	ee13 3a90 	vmov	r3, s7
 801076e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8010772:	1ad3      	subs	r3, r2, r3
 8010774:	2b31      	cmp	r3, #49	; 0x31
 8010776:	dc17      	bgt.n	80107a8 <__ieee754_rem_pio2+0x168>
 8010778:	eeb0 0b46 	vmov.f64	d0, d6
 801077c:	ed84 3b00 	vstr	d3, [r4]
 8010780:	ed94 6b00 	vldr	d6, [r4]
 8010784:	2d00      	cmp	r5, #0
 8010786:	ee30 0b46 	vsub.f64	d0, d0, d6
 801078a:	ee30 7b47 	vsub.f64	d7, d0, d7
 801078e:	ed84 7b02 	vstr	d7, [r4, #8]
 8010792:	da85      	bge.n	80106a0 <__ieee754_rem_pio2+0x60>
 8010794:	eeb1 6b46 	vneg.f64	d6, d6
 8010798:	ed84 6b00 	vstr	d6, [r4]
 801079c:	eeb1 7b47 	vneg.f64	d7, d7
 80107a0:	4240      	negs	r0, r0
 80107a2:	ed84 7b02 	vstr	d7, [r4, #8]
 80107a6:	e77b      	b.n	80106a0 <__ieee754_rem_pio2+0x60>
 80107a8:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8010890 <__ieee754_rem_pio2+0x250>
 80107ac:	eeb0 0b46 	vmov.f64	d0, d6
 80107b0:	eea4 0b03 	vfma.f64	d0, d4, d3
 80107b4:	ee36 7b40 	vsub.f64	d7, d6, d0
 80107b8:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8010898 <__ieee754_rem_pio2+0x258>
 80107bc:	eea4 7b03 	vfma.f64	d7, d4, d3
 80107c0:	ee95 7b06 	vfnms.f64	d7, d5, d6
 80107c4:	ee30 6b47 	vsub.f64	d6, d0, d7
 80107c8:	e7b2      	b.n	8010730 <__ieee754_rem_pio2+0xf0>
 80107ca:	4b3b      	ldr	r3, [pc, #236]	; (80108b8 <__ieee754_rem_pio2+0x278>)
 80107cc:	429e      	cmp	r6, r3
 80107ce:	dd06      	ble.n	80107de <__ieee754_rem_pio2+0x19e>
 80107d0:	ee30 7b40 	vsub.f64	d7, d0, d0
 80107d4:	ed80 7b02 	vstr	d7, [r0, #8]
 80107d8:	ed80 7b00 	vstr	d7, [r0]
 80107dc:	e742      	b.n	8010664 <__ieee754_rem_pio2+0x24>
 80107de:	1532      	asrs	r2, r6, #20
 80107e0:	ee10 0a10 	vmov	r0, s0
 80107e4:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80107e8:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80107ec:	ec41 0b17 	vmov	d7, r0, r1
 80107f0:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80107f4:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80108a0 <__ieee754_rem_pio2+0x260>
 80107f8:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80107fc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010800:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010804:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010808:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801080c:	a902      	add	r1, sp, #8
 801080e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8010812:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010816:	ed8d 6b04 	vstr	d6, [sp, #16]
 801081a:	ee27 7b05 	vmul.f64	d7, d7, d5
 801081e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8010822:	2603      	movs	r6, #3
 8010824:	4608      	mov	r0, r1
 8010826:	ed91 7b04 	vldr	d7, [r1, #16]
 801082a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801082e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010832:	4633      	mov	r3, r6
 8010834:	f1a1 0108 	sub.w	r1, r1, #8
 8010838:	f106 36ff 	add.w	r6, r6, #4294967295
 801083c:	d0f3      	beq.n	8010826 <__ieee754_rem_pio2+0x1e6>
 801083e:	491f      	ldr	r1, [pc, #124]	; (80108bc <__ieee754_rem_pio2+0x27c>)
 8010840:	9101      	str	r1, [sp, #4]
 8010842:	2102      	movs	r1, #2
 8010844:	9100      	str	r1, [sp, #0]
 8010846:	4621      	mov	r1, r4
 8010848:	f000 f8aa 	bl	80109a0 <__kernel_rem_pio2>
 801084c:	2d00      	cmp	r5, #0
 801084e:	f6bf af27 	bge.w	80106a0 <__ieee754_rem_pio2+0x60>
 8010852:	ed94 7b00 	vldr	d7, [r4]
 8010856:	eeb1 7b47 	vneg.f64	d7, d7
 801085a:	ed84 7b00 	vstr	d7, [r4]
 801085e:	ed94 7b02 	vldr	d7, [r4, #8]
 8010862:	e79b      	b.n	801079c <__ieee754_rem_pio2+0x15c>
 8010864:	f3af 8000 	nop.w
 8010868:	54400000 	.word	0x54400000
 801086c:	3ff921fb 	.word	0x3ff921fb
 8010870:	1a626331 	.word	0x1a626331
 8010874:	3dd0b461 	.word	0x3dd0b461
 8010878:	1a600000 	.word	0x1a600000
 801087c:	3dd0b461 	.word	0x3dd0b461
 8010880:	2e037073 	.word	0x2e037073
 8010884:	3ba3198a 	.word	0x3ba3198a
 8010888:	6dc9c883 	.word	0x6dc9c883
 801088c:	3fe45f30 	.word	0x3fe45f30
 8010890:	2e000000 	.word	0x2e000000
 8010894:	3ba3198a 	.word	0x3ba3198a
 8010898:	252049c1 	.word	0x252049c1
 801089c:	397b839a 	.word	0x397b839a
 80108a0:	00000000 	.word	0x00000000
 80108a4:	41700000 	.word	0x41700000
 80108a8:	3fe921fb 	.word	0x3fe921fb
 80108ac:	4002d97b 	.word	0x4002d97b
 80108b0:	413921fb 	.word	0x413921fb
 80108b4:	08012944 	.word	0x08012944
 80108b8:	7fefffff 	.word	0x7fefffff
 80108bc:	080129c4 	.word	0x080129c4

080108c0 <__ieee754_sqrt>:
 80108c0:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80108c4:	4770      	bx	lr
	...

080108c8 <__kernel_cos>:
 80108c8:	ee10 1a90 	vmov	r1, s1
 80108cc:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80108d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80108d4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80108d8:	da05      	bge.n	80108e6 <__kernel_cos+0x1e>
 80108da:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80108de:	ee17 3a90 	vmov	r3, s15
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d03d      	beq.n	8010962 <__kernel_cos+0x9a>
 80108e6:	ee20 3b00 	vmul.f64	d3, d0, d0
 80108ea:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8010968 <__kernel_cos+0xa0>
 80108ee:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8010970 <__kernel_cos+0xa8>
 80108f2:	eea3 6b07 	vfma.f64	d6, d3, d7
 80108f6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010978 <__kernel_cos+0xb0>
 80108fa:	eea6 7b03 	vfma.f64	d7, d6, d3
 80108fe:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8010980 <__kernel_cos+0xb8>
 8010902:	eea7 6b03 	vfma.f64	d6, d7, d3
 8010906:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010988 <__kernel_cos+0xc0>
 801090a:	4b23      	ldr	r3, [pc, #140]	; (8010998 <__kernel_cos+0xd0>)
 801090c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8010910:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8010990 <__kernel_cos+0xc8>
 8010914:	4299      	cmp	r1, r3
 8010916:	eea7 6b03 	vfma.f64	d6, d7, d3
 801091a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801091e:	ee26 5b03 	vmul.f64	d5, d6, d3
 8010922:	ee23 7b07 	vmul.f64	d7, d3, d7
 8010926:	ee21 6b40 	vnmul.f64	d6, d1, d0
 801092a:	eea3 6b05 	vfma.f64	d6, d3, d5
 801092e:	dc04      	bgt.n	801093a <__kernel_cos+0x72>
 8010930:	ee37 6b46 	vsub.f64	d6, d7, d6
 8010934:	ee34 0b46 	vsub.f64	d0, d4, d6
 8010938:	4770      	bx	lr
 801093a:	4b18      	ldr	r3, [pc, #96]	; (801099c <__kernel_cos+0xd4>)
 801093c:	4299      	cmp	r1, r3
 801093e:	dc0d      	bgt.n	801095c <__kernel_cos+0x94>
 8010940:	2200      	movs	r2, #0
 8010942:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8010946:	ec43 2b15 	vmov	d5, r2, r3
 801094a:	ee34 0b45 	vsub.f64	d0, d4, d5
 801094e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8010952:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010956:	ee30 0b47 	vsub.f64	d0, d0, d7
 801095a:	4770      	bx	lr
 801095c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8010960:	e7f3      	b.n	801094a <__kernel_cos+0x82>
 8010962:	eeb0 0b44 	vmov.f64	d0, d4
 8010966:	4770      	bx	lr
 8010968:	be8838d4 	.word	0xbe8838d4
 801096c:	bda8fae9 	.word	0xbda8fae9
 8010970:	bdb4b1c4 	.word	0xbdb4b1c4
 8010974:	3e21ee9e 	.word	0x3e21ee9e
 8010978:	809c52ad 	.word	0x809c52ad
 801097c:	be927e4f 	.word	0xbe927e4f
 8010980:	19cb1590 	.word	0x19cb1590
 8010984:	3efa01a0 	.word	0x3efa01a0
 8010988:	16c15177 	.word	0x16c15177
 801098c:	bf56c16c 	.word	0xbf56c16c
 8010990:	5555554c 	.word	0x5555554c
 8010994:	3fa55555 	.word	0x3fa55555
 8010998:	3fd33332 	.word	0x3fd33332
 801099c:	3fe90000 	.word	0x3fe90000

080109a0 <__kernel_rem_pio2>:
 80109a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109a4:	ed2d 8b06 	vpush	{d8-d10}
 80109a8:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 80109ac:	469b      	mov	fp, r3
 80109ae:	460f      	mov	r7, r1
 80109b0:	4bcf      	ldr	r3, [pc, #828]	; (8010cf0 <__kernel_rem_pio2+0x350>)
 80109b2:	99a0      	ldr	r1, [sp, #640]	; 0x280
 80109b4:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 80109b8:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80109bc:	9000      	str	r0, [sp, #0]
 80109be:	f112 0f14 	cmn.w	r2, #20
 80109c2:	bfa8      	it	ge
 80109c4:	2318      	movge	r3, #24
 80109c6:	f10b 31ff 	add.w	r1, fp, #4294967295
 80109ca:	bfb8      	it	lt
 80109cc:	2300      	movlt	r3, #0
 80109ce:	f06f 0417 	mvn.w	r4, #23
 80109d2:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8010cd8 <__kernel_rem_pio2+0x338>
 80109d6:	bfa4      	itt	ge
 80109d8:	f1a2 0a03 	subge.w	sl, r2, #3
 80109dc:	fb9a f3f3 	sdivge	r3, sl, r3
 80109e0:	fb03 4404 	mla	r4, r3, r4, r4
 80109e4:	1a5d      	subs	r5, r3, r1
 80109e6:	4414      	add	r4, r2
 80109e8:	eb09 0601 	add.w	r6, r9, r1
 80109ec:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 80109f0:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 80109f4:	2200      	movs	r2, #0
 80109f6:	42b2      	cmp	r2, r6
 80109f8:	dd12      	ble.n	8010a20 <__kernel_rem_pio2+0x80>
 80109fa:	aa18      	add	r2, sp, #96	; 0x60
 80109fc:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8010a00:	460e      	mov	r6, r1
 8010a02:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 8010a06:	f1cb 0a01 	rsb	sl, fp, #1
 8010a0a:	eb0a 0006 	add.w	r0, sl, r6
 8010a0e:	4581      	cmp	r9, r0
 8010a10:	db25      	blt.n	8010a5e <__kernel_rem_pio2+0xbe>
 8010a12:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8010cd8 <__kernel_rem_pio2+0x338>
 8010a16:	f8dd e000 	ldr.w	lr, [sp]
 8010a1a:	4615      	mov	r5, r2
 8010a1c:	2000      	movs	r0, #0
 8010a1e:	e015      	b.n	8010a4c <__kernel_rem_pio2+0xac>
 8010a20:	42d5      	cmn	r5, r2
 8010a22:	d409      	bmi.n	8010a38 <__kernel_rem_pio2+0x98>
 8010a24:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8010a28:	ee07 0a90 	vmov	s15, r0
 8010a2c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010a30:	eca8 7b02 	vstmia	r8!, {d7}
 8010a34:	3201      	adds	r2, #1
 8010a36:	e7de      	b.n	80109f6 <__kernel_rem_pio2+0x56>
 8010a38:	eeb0 7b46 	vmov.f64	d7, d6
 8010a3c:	e7f8      	b.n	8010a30 <__kernel_rem_pio2+0x90>
 8010a3e:	ecbe 5b02 	vldmia	lr!, {d5}
 8010a42:	ed95 6b00 	vldr	d6, [r5]
 8010a46:	3001      	adds	r0, #1
 8010a48:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010a4c:	4288      	cmp	r0, r1
 8010a4e:	f1a5 0508 	sub.w	r5, r5, #8
 8010a52:	ddf4      	ble.n	8010a3e <__kernel_rem_pio2+0x9e>
 8010a54:	eca8 7b02 	vstmia	r8!, {d7}
 8010a58:	3208      	adds	r2, #8
 8010a5a:	3601      	adds	r6, #1
 8010a5c:	e7d5      	b.n	8010a0a <__kernel_rem_pio2+0x6a>
 8010a5e:	aa04      	add	r2, sp, #16
 8010a60:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8010ce0 <__kernel_rem_pio2+0x340>
 8010a64:	ed9f aba0 	vldr	d10, [pc, #640]	; 8010ce8 <__kernel_rem_pio2+0x348>
 8010a68:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8010a6c:	9201      	str	r2, [sp, #4]
 8010a6e:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 8010a72:	464e      	mov	r6, r9
 8010a74:	ab90      	add	r3, sp, #576	; 0x240
 8010a76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010a7a:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8010a7e:	ab04      	add	r3, sp, #16
 8010a80:	4618      	mov	r0, r3
 8010a82:	4632      	mov	r2, r6
 8010a84:	2a00      	cmp	r2, #0
 8010a86:	dc4e      	bgt.n	8010b26 <__kernel_rem_pio2+0x186>
 8010a88:	4620      	mov	r0, r4
 8010a8a:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8010a8e:	f000 fb4b 	bl	8011128 <scalbn>
 8010a92:	eeb0 8b40 	vmov.f64	d8, d0
 8010a96:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8010a9a:	ee28 0b00 	vmul.f64	d0, d8, d0
 8010a9e:	f000 fac7 	bl	8011030 <floor>
 8010aa2:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8010aa6:	eea0 8b47 	vfms.f64	d8, d0, d7
 8010aaa:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8010aae:	2c00      	cmp	r4, #0
 8010ab0:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8010ab4:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8010ab8:	ee38 8b40 	vsub.f64	d8, d8, d0
 8010abc:	ee17 8a90 	vmov	r8, s15
 8010ac0:	dd46      	ble.n	8010b50 <__kernel_rem_pio2+0x1b0>
 8010ac2:	1e70      	subs	r0, r6, #1
 8010ac4:	aa04      	add	r2, sp, #16
 8010ac6:	f1c4 0c18 	rsb	ip, r4, #24
 8010aca:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8010ace:	fa45 f20c 	asr.w	r2, r5, ip
 8010ad2:	4490      	add	r8, r2
 8010ad4:	fa02 f20c 	lsl.w	r2, r2, ip
 8010ad8:	1aad      	subs	r5, r5, r2
 8010ada:	aa04      	add	r2, sp, #16
 8010adc:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8010ae0:	f1c4 0217 	rsb	r2, r4, #23
 8010ae4:	4115      	asrs	r5, r2
 8010ae6:	2d00      	cmp	r5, #0
 8010ae8:	dd41      	ble.n	8010b6e <__kernel_rem_pio2+0x1ce>
 8010aea:	f04f 0c00 	mov.w	ip, #0
 8010aee:	f108 0801 	add.w	r8, r8, #1
 8010af2:	4660      	mov	r0, ip
 8010af4:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8010af8:	4566      	cmp	r6, ip
 8010afa:	dc69      	bgt.n	8010bd0 <__kernel_rem_pio2+0x230>
 8010afc:	2c00      	cmp	r4, #0
 8010afe:	dd03      	ble.n	8010b08 <__kernel_rem_pio2+0x168>
 8010b00:	2c01      	cmp	r4, #1
 8010b02:	d076      	beq.n	8010bf2 <__kernel_rem_pio2+0x252>
 8010b04:	2c02      	cmp	r4, #2
 8010b06:	d07f      	beq.n	8010c08 <__kernel_rem_pio2+0x268>
 8010b08:	2d02      	cmp	r5, #2
 8010b0a:	d130      	bne.n	8010b6e <__kernel_rem_pio2+0x1ce>
 8010b0c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010b10:	ee30 8b48 	vsub.f64	d8, d0, d8
 8010b14:	b358      	cbz	r0, 8010b6e <__kernel_rem_pio2+0x1ce>
 8010b16:	4620      	mov	r0, r4
 8010b18:	9102      	str	r1, [sp, #8]
 8010b1a:	f000 fb05 	bl	8011128 <scalbn>
 8010b1e:	9902      	ldr	r1, [sp, #8]
 8010b20:	ee38 8b40 	vsub.f64	d8, d8, d0
 8010b24:	e023      	b.n	8010b6e <__kernel_rem_pio2+0x1ce>
 8010b26:	ee20 7b09 	vmul.f64	d7, d0, d9
 8010b2a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010b2e:	3a01      	subs	r2, #1
 8010b30:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8010b34:	ad68      	add	r5, sp, #416	; 0x1a0
 8010b36:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8010b3a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010b3e:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8010b42:	eca0 0a01 	vstmia	r0!, {s0}
 8010b46:	ed95 0b00 	vldr	d0, [r5]
 8010b4a:	ee37 0b00 	vadd.f64	d0, d7, d0
 8010b4e:	e799      	b.n	8010a84 <__kernel_rem_pio2+0xe4>
 8010b50:	d105      	bne.n	8010b5e <__kernel_rem_pio2+0x1be>
 8010b52:	1e72      	subs	r2, r6, #1
 8010b54:	a804      	add	r0, sp, #16
 8010b56:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8010b5a:	15ed      	asrs	r5, r5, #23
 8010b5c:	e7c3      	b.n	8010ae6 <__kernel_rem_pio2+0x146>
 8010b5e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8010b62:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8010b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b6a:	da2f      	bge.n	8010bcc <__kernel_rem_pio2+0x22c>
 8010b6c:	2500      	movs	r5, #0
 8010b6e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b76:	f040 8087 	bne.w	8010c88 <__kernel_rem_pio2+0x2e8>
 8010b7a:	1e73      	subs	r3, r6, #1
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	f04f 0c00 	mov.w	ip, #0
 8010b82:	4548      	cmp	r0, r9
 8010b84:	da47      	bge.n	8010c16 <__kernel_rem_pio2+0x276>
 8010b86:	f1bc 0f00 	cmp.w	ip, #0
 8010b8a:	d070      	beq.n	8010c6e <__kernel_rem_pio2+0x2ce>
 8010b8c:	aa04      	add	r2, sp, #16
 8010b8e:	3c18      	subs	r4, #24
 8010b90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010b94:	2a00      	cmp	r2, #0
 8010b96:	d075      	beq.n	8010c84 <__kernel_rem_pio2+0x2e4>
 8010b98:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8010b9c:	4620      	mov	r0, r4
 8010b9e:	9300      	str	r3, [sp, #0]
 8010ba0:	f000 fac2 	bl	8011128 <scalbn>
 8010ba4:	9b00      	ldr	r3, [sp, #0]
 8010ba6:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8010ce0 <__kernel_rem_pio2+0x340>
 8010baa:	461a      	mov	r2, r3
 8010bac:	2a00      	cmp	r2, #0
 8010bae:	f280 80ac 	bge.w	8010d0a <__kernel_rem_pio2+0x36a>
 8010bb2:	4619      	mov	r1, r3
 8010bb4:	2000      	movs	r0, #0
 8010bb6:	2900      	cmp	r1, #0
 8010bb8:	f2c0 80cd 	blt.w	8010d56 <__kernel_rem_pio2+0x3b6>
 8010bbc:	aa68      	add	r2, sp, #416	; 0x1a0
 8010bbe:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 8010bc2:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8010cd8 <__kernel_rem_pio2+0x338>
 8010bc6:	4e4b      	ldr	r6, [pc, #300]	; (8010cf4 <__kernel_rem_pio2+0x354>)
 8010bc8:	2200      	movs	r2, #0
 8010bca:	e0b8      	b.n	8010d3e <__kernel_rem_pio2+0x39e>
 8010bcc:	2502      	movs	r5, #2
 8010bce:	e78c      	b.n	8010aea <__kernel_rem_pio2+0x14a>
 8010bd0:	681a      	ldr	r2, [r3, #0]
 8010bd2:	b948      	cbnz	r0, 8010be8 <__kernel_rem_pio2+0x248>
 8010bd4:	b11a      	cbz	r2, 8010bde <__kernel_rem_pio2+0x23e>
 8010bd6:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8010bda:	601a      	str	r2, [r3, #0]
 8010bdc:	2201      	movs	r2, #1
 8010bde:	f10c 0c01 	add.w	ip, ip, #1
 8010be2:	3304      	adds	r3, #4
 8010be4:	4610      	mov	r0, r2
 8010be6:	e787      	b.n	8010af8 <__kernel_rem_pio2+0x158>
 8010be8:	ebae 0202 	sub.w	r2, lr, r2
 8010bec:	601a      	str	r2, [r3, #0]
 8010bee:	4602      	mov	r2, r0
 8010bf0:	e7f5      	b.n	8010bde <__kernel_rem_pio2+0x23e>
 8010bf2:	1e72      	subs	r2, r6, #1
 8010bf4:	ab04      	add	r3, sp, #16
 8010bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bfa:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010bfe:	f10d 0c10 	add.w	ip, sp, #16
 8010c02:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 8010c06:	e77f      	b.n	8010b08 <__kernel_rem_pio2+0x168>
 8010c08:	1e72      	subs	r2, r6, #1
 8010c0a:	ab04      	add	r3, sp, #16
 8010c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c10:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010c14:	e7f3      	b.n	8010bfe <__kernel_rem_pio2+0x25e>
 8010c16:	aa04      	add	r2, sp, #16
 8010c18:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8010c1c:	3801      	subs	r0, #1
 8010c1e:	ea4c 0c02 	orr.w	ip, ip, r2
 8010c22:	e7ae      	b.n	8010b82 <__kernel_rem_pio2+0x1e2>
 8010c24:	3001      	adds	r0, #1
 8010c26:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010c2a:	2a00      	cmp	r2, #0
 8010c2c:	d0fa      	beq.n	8010c24 <__kernel_rem_pio2+0x284>
 8010c2e:	eb06 020b 	add.w	r2, r6, fp
 8010c32:	ad18      	add	r5, sp, #96	; 0x60
 8010c34:	1c73      	adds	r3, r6, #1
 8010c36:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8010c3a:	4406      	add	r6, r0
 8010c3c:	429e      	cmp	r6, r3
 8010c3e:	f6ff af19 	blt.w	8010a74 <__kernel_rem_pio2+0xd4>
 8010c42:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8010c46:	9d00      	ldr	r5, [sp, #0]
 8010c48:	ee07 0a90 	vmov	s15, r0
 8010c4c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010c50:	2000      	movs	r0, #0
 8010c52:	eca2 7b02 	vstmia	r2!, {d7}
 8010c56:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8010cd8 <__kernel_rem_pio2+0x338>
 8010c5a:	4694      	mov	ip, r2
 8010c5c:	4288      	cmp	r0, r1
 8010c5e:	dd09      	ble.n	8010c74 <__kernel_rem_pio2+0x2d4>
 8010c60:	a868      	add	r0, sp, #416	; 0x1a0
 8010c62:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8010c66:	ed80 7b00 	vstr	d7, [r0]
 8010c6a:	3301      	adds	r3, #1
 8010c6c:	e7e6      	b.n	8010c3c <__kernel_rem_pio2+0x29c>
 8010c6e:	9b01      	ldr	r3, [sp, #4]
 8010c70:	2001      	movs	r0, #1
 8010c72:	e7d8      	b.n	8010c26 <__kernel_rem_pio2+0x286>
 8010c74:	ecb5 5b02 	vldmia	r5!, {d5}
 8010c78:	ed3c 6b02 	vldmdb	ip!, {d6}
 8010c7c:	3001      	adds	r0, #1
 8010c7e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010c82:	e7eb      	b.n	8010c5c <__kernel_rem_pio2+0x2bc>
 8010c84:	3b01      	subs	r3, #1
 8010c86:	e781      	b.n	8010b8c <__kernel_rem_pio2+0x1ec>
 8010c88:	4260      	negs	r0, r4
 8010c8a:	eeb0 0b48 	vmov.f64	d0, d8
 8010c8e:	f000 fa4b 	bl	8011128 <scalbn>
 8010c92:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8010ce8 <__kernel_rem_pio2+0x348>
 8010c96:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8010c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c9e:	db2b      	blt.n	8010cf8 <__kernel_rem_pio2+0x358>
 8010ca0:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8010ce0 <__kernel_rem_pio2+0x340>
 8010ca4:	ee20 7b07 	vmul.f64	d7, d0, d7
 8010ca8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8010cac:	aa04      	add	r2, sp, #16
 8010cae:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8010cb2:	eea5 0b46 	vfms.f64	d0, d5, d6
 8010cb6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010cba:	a904      	add	r1, sp, #16
 8010cbc:	ee10 3a10 	vmov	r3, s0
 8010cc0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8010cc4:	ee17 2a10 	vmov	r2, s14
 8010cc8:	1c73      	adds	r3, r6, #1
 8010cca:	3418      	adds	r4, #24
 8010ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010cd0:	e762      	b.n	8010b98 <__kernel_rem_pio2+0x1f8>
 8010cd2:	bf00      	nop
 8010cd4:	f3af 8000 	nop.w
	...
 8010ce4:	3e700000 	.word	0x3e700000
 8010ce8:	00000000 	.word	0x00000000
 8010cec:	41700000 	.word	0x41700000
 8010cf0:	08013380 	.word	0x08013380
 8010cf4:	08013340 	.word	0x08013340
 8010cf8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8010cfc:	aa04      	add	r2, sp, #16
 8010cfe:	ee10 3a10 	vmov	r3, s0
 8010d02:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8010d06:	4633      	mov	r3, r6
 8010d08:	e746      	b.n	8010b98 <__kernel_rem_pio2+0x1f8>
 8010d0a:	a804      	add	r0, sp, #16
 8010d0c:	a968      	add	r1, sp, #416	; 0x1a0
 8010d0e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8010d12:	9000      	str	r0, [sp, #0]
 8010d14:	ee07 0a90 	vmov	s15, r0
 8010d18:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010d1c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010d20:	3a01      	subs	r2, #1
 8010d22:	ee27 7b00 	vmul.f64	d7, d7, d0
 8010d26:	ee20 0b06 	vmul.f64	d0, d0, d6
 8010d2a:	ed81 7b00 	vstr	d7, [r1]
 8010d2e:	e73d      	b.n	8010bac <__kernel_rem_pio2+0x20c>
 8010d30:	ecb6 5b02 	vldmia	r6!, {d5}
 8010d34:	ecb4 6b02 	vldmia	r4!, {d6}
 8010d38:	3201      	adds	r2, #1
 8010d3a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010d3e:	454a      	cmp	r2, r9
 8010d40:	dc01      	bgt.n	8010d46 <__kernel_rem_pio2+0x3a6>
 8010d42:	4290      	cmp	r0, r2
 8010d44:	daf4      	bge.n	8010d30 <__kernel_rem_pio2+0x390>
 8010d46:	aa40      	add	r2, sp, #256	; 0x100
 8010d48:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010d4c:	ed82 7b00 	vstr	d7, [r2]
 8010d50:	3901      	subs	r1, #1
 8010d52:	3001      	adds	r0, #1
 8010d54:	e72f      	b.n	8010bb6 <__kernel_rem_pio2+0x216>
 8010d56:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8010d58:	2a02      	cmp	r2, #2
 8010d5a:	dc0a      	bgt.n	8010d72 <__kernel_rem_pio2+0x3d2>
 8010d5c:	2a00      	cmp	r2, #0
 8010d5e:	dc5a      	bgt.n	8010e16 <__kernel_rem_pio2+0x476>
 8010d60:	d039      	beq.n	8010dd6 <__kernel_rem_pio2+0x436>
 8010d62:	f008 0007 	and.w	r0, r8, #7
 8010d66:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8010d6a:	ecbd 8b06 	vpop	{d8-d10}
 8010d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d72:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8010d74:	2a03      	cmp	r2, #3
 8010d76:	d1f4      	bne.n	8010d62 <__kernel_rem_pio2+0x3c2>
 8010d78:	aa40      	add	r2, sp, #256	; 0x100
 8010d7a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010d7e:	4611      	mov	r1, r2
 8010d80:	4618      	mov	r0, r3
 8010d82:	2800      	cmp	r0, #0
 8010d84:	f1a1 0108 	sub.w	r1, r1, #8
 8010d88:	dc52      	bgt.n	8010e30 <__kernel_rem_pio2+0x490>
 8010d8a:	4619      	mov	r1, r3
 8010d8c:	2901      	cmp	r1, #1
 8010d8e:	f1a2 0208 	sub.w	r2, r2, #8
 8010d92:	dc5d      	bgt.n	8010e50 <__kernel_rem_pio2+0x4b0>
 8010d94:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8010e98 <__kernel_rem_pio2+0x4f8>
 8010d98:	2b01      	cmp	r3, #1
 8010d9a:	dc69      	bgt.n	8010e70 <__kernel_rem_pio2+0x4d0>
 8010d9c:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8010da0:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 8010da4:	2d00      	cmp	r5, #0
 8010da6:	d16c      	bne.n	8010e82 <__kernel_rem_pio2+0x4e2>
 8010da8:	ed87 5b00 	vstr	d5, [r7]
 8010dac:	ed87 6b02 	vstr	d6, [r7, #8]
 8010db0:	ed87 7b04 	vstr	d7, [r7, #16]
 8010db4:	e7d5      	b.n	8010d62 <__kernel_rem_pio2+0x3c2>
 8010db6:	aa40      	add	r2, sp, #256	; 0x100
 8010db8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010dbc:	ed92 6b00 	vldr	d6, [r2]
 8010dc0:	3b01      	subs	r3, #1
 8010dc2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	daf5      	bge.n	8010db6 <__kernel_rem_pio2+0x416>
 8010dca:	b10d      	cbz	r5, 8010dd0 <__kernel_rem_pio2+0x430>
 8010dcc:	eeb1 7b47 	vneg.f64	d7, d7
 8010dd0:	ed87 7b00 	vstr	d7, [r7]
 8010dd4:	e7c5      	b.n	8010d62 <__kernel_rem_pio2+0x3c2>
 8010dd6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8010e98 <__kernel_rem_pio2+0x4f8>
 8010dda:	e7f4      	b.n	8010dc6 <__kernel_rem_pio2+0x426>
 8010ddc:	a940      	add	r1, sp, #256	; 0x100
 8010dde:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8010de2:	ed91 7b00 	vldr	d7, [r1]
 8010de6:	3a01      	subs	r2, #1
 8010de8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010dec:	2a00      	cmp	r2, #0
 8010dee:	daf5      	bge.n	8010ddc <__kernel_rem_pio2+0x43c>
 8010df0:	b1ad      	cbz	r5, 8010e1e <__kernel_rem_pio2+0x47e>
 8010df2:	eeb1 7b46 	vneg.f64	d7, d6
 8010df6:	ed87 7b00 	vstr	d7, [r7]
 8010dfa:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8010dfe:	a942      	add	r1, sp, #264	; 0x108
 8010e00:	2201      	movs	r2, #1
 8010e02:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010e06:	4293      	cmp	r3, r2
 8010e08:	da0c      	bge.n	8010e24 <__kernel_rem_pio2+0x484>
 8010e0a:	b10d      	cbz	r5, 8010e10 <__kernel_rem_pio2+0x470>
 8010e0c:	eeb1 7b47 	vneg.f64	d7, d7
 8010e10:	ed87 7b02 	vstr	d7, [r7, #8]
 8010e14:	e7a5      	b.n	8010d62 <__kernel_rem_pio2+0x3c2>
 8010e16:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8010e98 <__kernel_rem_pio2+0x4f8>
 8010e1a:	461a      	mov	r2, r3
 8010e1c:	e7e6      	b.n	8010dec <__kernel_rem_pio2+0x44c>
 8010e1e:	eeb0 7b46 	vmov.f64	d7, d6
 8010e22:	e7e8      	b.n	8010df6 <__kernel_rem_pio2+0x456>
 8010e24:	ecb1 6b02 	vldmia	r1!, {d6}
 8010e28:	3201      	adds	r2, #1
 8010e2a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010e2e:	e7ea      	b.n	8010e06 <__kernel_rem_pio2+0x466>
 8010e30:	ed91 7b00 	vldr	d7, [r1]
 8010e34:	ed91 5b02 	vldr	d5, [r1, #8]
 8010e38:	3801      	subs	r0, #1
 8010e3a:	ee37 6b05 	vadd.f64	d6, d7, d5
 8010e3e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010e42:	ed81 6b00 	vstr	d6, [r1]
 8010e46:	ee37 7b05 	vadd.f64	d7, d7, d5
 8010e4a:	ed81 7b02 	vstr	d7, [r1, #8]
 8010e4e:	e798      	b.n	8010d82 <__kernel_rem_pio2+0x3e2>
 8010e50:	ed92 7b00 	vldr	d7, [r2]
 8010e54:	ed92 5b02 	vldr	d5, [r2, #8]
 8010e58:	3901      	subs	r1, #1
 8010e5a:	ee37 6b05 	vadd.f64	d6, d7, d5
 8010e5e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010e62:	ed82 6b00 	vstr	d6, [r2]
 8010e66:	ee37 7b05 	vadd.f64	d7, d7, d5
 8010e6a:	ed82 7b02 	vstr	d7, [r2, #8]
 8010e6e:	e78d      	b.n	8010d8c <__kernel_rem_pio2+0x3ec>
 8010e70:	aa40      	add	r2, sp, #256	; 0x100
 8010e72:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8010e76:	ed92 6b00 	vldr	d6, [r2]
 8010e7a:	3b01      	subs	r3, #1
 8010e7c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010e80:	e78a      	b.n	8010d98 <__kernel_rem_pio2+0x3f8>
 8010e82:	eeb1 5b45 	vneg.f64	d5, d5
 8010e86:	eeb1 6b46 	vneg.f64	d6, d6
 8010e8a:	ed87 5b00 	vstr	d5, [r7]
 8010e8e:	eeb1 7b47 	vneg.f64	d7, d7
 8010e92:	ed87 6b02 	vstr	d6, [r7, #8]
 8010e96:	e78b      	b.n	8010db0 <__kernel_rem_pio2+0x410>
	...

08010ea0 <__kernel_sin>:
 8010ea0:	ee10 3a90 	vmov	r3, s1
 8010ea4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010ea8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010eac:	da04      	bge.n	8010eb8 <__kernel_sin+0x18>
 8010eae:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8010eb2:	ee17 3a90 	vmov	r3, s15
 8010eb6:	b35b      	cbz	r3, 8010f10 <__kernel_sin+0x70>
 8010eb8:	ee20 6b00 	vmul.f64	d6, d0, d0
 8010ebc:	ee20 5b06 	vmul.f64	d5, d0, d6
 8010ec0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8010f18 <__kernel_sin+0x78>
 8010ec4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010f20 <__kernel_sin+0x80>
 8010ec8:	eea6 4b07 	vfma.f64	d4, d6, d7
 8010ecc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8010f28 <__kernel_sin+0x88>
 8010ed0:	eea4 7b06 	vfma.f64	d7, d4, d6
 8010ed4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010f30 <__kernel_sin+0x90>
 8010ed8:	eea7 4b06 	vfma.f64	d4, d7, d6
 8010edc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8010f38 <__kernel_sin+0x98>
 8010ee0:	eea4 7b06 	vfma.f64	d7, d4, d6
 8010ee4:	b930      	cbnz	r0, 8010ef4 <__kernel_sin+0x54>
 8010ee6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8010f40 <__kernel_sin+0xa0>
 8010eea:	eea6 4b07 	vfma.f64	d4, d6, d7
 8010eee:	eea4 0b05 	vfma.f64	d0, d4, d5
 8010ef2:	4770      	bx	lr
 8010ef4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8010ef8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8010efc:	eea1 7b04 	vfma.f64	d7, d1, d4
 8010f00:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8010f04:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8010f48 <__kernel_sin+0xa8>
 8010f08:	eea5 1b07 	vfma.f64	d1, d5, d7
 8010f0c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8010f10:	4770      	bx	lr
 8010f12:	bf00      	nop
 8010f14:	f3af 8000 	nop.w
 8010f18:	5acfd57c 	.word	0x5acfd57c
 8010f1c:	3de5d93a 	.word	0x3de5d93a
 8010f20:	8a2b9ceb 	.word	0x8a2b9ceb
 8010f24:	be5ae5e6 	.word	0xbe5ae5e6
 8010f28:	57b1fe7d 	.word	0x57b1fe7d
 8010f2c:	3ec71de3 	.word	0x3ec71de3
 8010f30:	19c161d5 	.word	0x19c161d5
 8010f34:	bf2a01a0 	.word	0xbf2a01a0
 8010f38:	1110f8a6 	.word	0x1110f8a6
 8010f3c:	3f811111 	.word	0x3f811111
 8010f40:	55555549 	.word	0x55555549
 8010f44:	bfc55555 	.word	0xbfc55555
 8010f48:	55555549 	.word	0x55555549
 8010f4c:	3fc55555 	.word	0x3fc55555

08010f50 <with_errno>:
 8010f50:	b513      	push	{r0, r1, r4, lr}
 8010f52:	4604      	mov	r4, r0
 8010f54:	ed8d 0b00 	vstr	d0, [sp]
 8010f58:	f000 f980 	bl	801125c <__errno>
 8010f5c:	ed9d 0b00 	vldr	d0, [sp]
 8010f60:	6004      	str	r4, [r0, #0]
 8010f62:	b002      	add	sp, #8
 8010f64:	bd10      	pop	{r4, pc}

08010f66 <xflow>:
 8010f66:	b082      	sub	sp, #8
 8010f68:	b158      	cbz	r0, 8010f82 <xflow+0x1c>
 8010f6a:	eeb1 7b40 	vneg.f64	d7, d0
 8010f6e:	ed8d 7b00 	vstr	d7, [sp]
 8010f72:	ed9d 7b00 	vldr	d7, [sp]
 8010f76:	2022      	movs	r0, #34	; 0x22
 8010f78:	ee20 0b07 	vmul.f64	d0, d0, d7
 8010f7c:	b002      	add	sp, #8
 8010f7e:	f7ff bfe7 	b.w	8010f50 <with_errno>
 8010f82:	eeb0 7b40 	vmov.f64	d7, d0
 8010f86:	e7f2      	b.n	8010f6e <xflow+0x8>

08010f88 <__math_uflow>:
 8010f88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010f90 <__math_uflow+0x8>
 8010f8c:	f7ff bfeb 	b.w	8010f66 <xflow>
 8010f90:	00000000 	.word	0x00000000
 8010f94:	10000000 	.word	0x10000000

08010f98 <__math_oflow>:
 8010f98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010fa0 <__math_oflow+0x8>
 8010f9c:	f7ff bfe3 	b.w	8010f66 <xflow>
 8010fa0:	00000000 	.word	0x00000000
 8010fa4:	70000000 	.word	0x70000000

08010fa8 <__math_divzero>:
 8010fa8:	b082      	sub	sp, #8
 8010faa:	2800      	cmp	r0, #0
 8010fac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010fb0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8010fb4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8010fb8:	ed8d 7b00 	vstr	d7, [sp]
 8010fbc:	ed9d 0b00 	vldr	d0, [sp]
 8010fc0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8010fd0 <__math_divzero+0x28>
 8010fc4:	2022      	movs	r0, #34	; 0x22
 8010fc6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8010fca:	b002      	add	sp, #8
 8010fcc:	f7ff bfc0 	b.w	8010f50 <with_errno>
	...

08010fd8 <__math_invalid>:
 8010fd8:	eeb0 7b40 	vmov.f64	d7, d0
 8010fdc:	eeb4 7b47 	vcmp.f64	d7, d7
 8010fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fe4:	ee30 6b40 	vsub.f64	d6, d0, d0
 8010fe8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8010fec:	d602      	bvs.n	8010ff4 <__math_invalid+0x1c>
 8010fee:	2021      	movs	r0, #33	; 0x21
 8010ff0:	f7ff bfae 	b.w	8010f50 <with_errno>
 8010ff4:	4770      	bx	lr

08010ff6 <__math_check_uflow>:
 8010ff6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8010ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ffe:	d102      	bne.n	8011006 <__math_check_uflow+0x10>
 8011000:	2022      	movs	r0, #34	; 0x22
 8011002:	f7ff bfa5 	b.w	8010f50 <with_errno>
 8011006:	4770      	bx	lr

08011008 <__math_check_oflow>:
 8011008:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8011028 <__math_check_oflow+0x20>
 801100c:	eeb0 7bc0 	vabs.f64	d7, d0
 8011010:	eeb4 7b46 	vcmp.f64	d7, d6
 8011014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011018:	dd02      	ble.n	8011020 <__math_check_oflow+0x18>
 801101a:	2022      	movs	r0, #34	; 0x22
 801101c:	f7ff bf98 	b.w	8010f50 <with_errno>
 8011020:	4770      	bx	lr
 8011022:	bf00      	nop
 8011024:	f3af 8000 	nop.w
 8011028:	ffffffff 	.word	0xffffffff
 801102c:	7fefffff 	.word	0x7fefffff

08011030 <floor>:
 8011030:	ee10 1a90 	vmov	r1, s1
 8011034:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011038:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801103c:	2b13      	cmp	r3, #19
 801103e:	b530      	push	{r4, r5, lr}
 8011040:	ee10 0a10 	vmov	r0, s0
 8011044:	ee10 5a10 	vmov	r5, s0
 8011048:	dc31      	bgt.n	80110ae <floor+0x7e>
 801104a:	2b00      	cmp	r3, #0
 801104c:	da15      	bge.n	801107a <floor+0x4a>
 801104e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011108 <floor+0xd8>
 8011052:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011056:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801105a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801105e:	dd07      	ble.n	8011070 <floor+0x40>
 8011060:	2900      	cmp	r1, #0
 8011062:	da4e      	bge.n	8011102 <floor+0xd2>
 8011064:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011068:	4318      	orrs	r0, r3
 801106a:	d001      	beq.n	8011070 <floor+0x40>
 801106c:	4928      	ldr	r1, [pc, #160]	; (8011110 <floor+0xe0>)
 801106e:	2000      	movs	r0, #0
 8011070:	460b      	mov	r3, r1
 8011072:	4602      	mov	r2, r0
 8011074:	ec43 2b10 	vmov	d0, r2, r3
 8011078:	e020      	b.n	80110bc <floor+0x8c>
 801107a:	4a26      	ldr	r2, [pc, #152]	; (8011114 <floor+0xe4>)
 801107c:	411a      	asrs	r2, r3
 801107e:	ea01 0402 	and.w	r4, r1, r2
 8011082:	4304      	orrs	r4, r0
 8011084:	d01a      	beq.n	80110bc <floor+0x8c>
 8011086:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8011108 <floor+0xd8>
 801108a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801108e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011096:	ddeb      	ble.n	8011070 <floor+0x40>
 8011098:	2900      	cmp	r1, #0
 801109a:	bfbe      	ittt	lt
 801109c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80110a0:	fa40 f303 	asrlt.w	r3, r0, r3
 80110a4:	18c9      	addlt	r1, r1, r3
 80110a6:	ea21 0102 	bic.w	r1, r1, r2
 80110aa:	2000      	movs	r0, #0
 80110ac:	e7e0      	b.n	8011070 <floor+0x40>
 80110ae:	2b33      	cmp	r3, #51	; 0x33
 80110b0:	dd05      	ble.n	80110be <floor+0x8e>
 80110b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80110b6:	d101      	bne.n	80110bc <floor+0x8c>
 80110b8:	ee30 0b00 	vadd.f64	d0, d0, d0
 80110bc:	bd30      	pop	{r4, r5, pc}
 80110be:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80110c2:	f04f 32ff 	mov.w	r2, #4294967295
 80110c6:	40e2      	lsrs	r2, r4
 80110c8:	4202      	tst	r2, r0
 80110ca:	d0f7      	beq.n	80110bc <floor+0x8c>
 80110cc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011108 <floor+0xd8>
 80110d0:	ee30 0b07 	vadd.f64	d0, d0, d7
 80110d4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80110d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110dc:	ddc8      	ble.n	8011070 <floor+0x40>
 80110de:	2900      	cmp	r1, #0
 80110e0:	da02      	bge.n	80110e8 <floor+0xb8>
 80110e2:	2b14      	cmp	r3, #20
 80110e4:	d103      	bne.n	80110ee <floor+0xbe>
 80110e6:	3101      	adds	r1, #1
 80110e8:	ea20 0002 	bic.w	r0, r0, r2
 80110ec:	e7c0      	b.n	8011070 <floor+0x40>
 80110ee:	2401      	movs	r4, #1
 80110f0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80110f4:	fa04 f303 	lsl.w	r3, r4, r3
 80110f8:	4418      	add	r0, r3
 80110fa:	42a8      	cmp	r0, r5
 80110fc:	bf38      	it	cc
 80110fe:	1909      	addcc	r1, r1, r4
 8011100:	e7f2      	b.n	80110e8 <floor+0xb8>
 8011102:	2000      	movs	r0, #0
 8011104:	4601      	mov	r1, r0
 8011106:	e7b3      	b.n	8011070 <floor+0x40>
 8011108:	8800759c 	.word	0x8800759c
 801110c:	7e37e43c 	.word	0x7e37e43c
 8011110:	bff00000 	.word	0xbff00000
 8011114:	000fffff 	.word	0x000fffff

08011118 <nan>:
 8011118:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011120 <nan+0x8>
 801111c:	4770      	bx	lr
 801111e:	bf00      	nop
 8011120:	00000000 	.word	0x00000000
 8011124:	7ff80000 	.word	0x7ff80000

08011128 <scalbn>:
 8011128:	b082      	sub	sp, #8
 801112a:	ed8d 0b00 	vstr	d0, [sp]
 801112e:	9b01      	ldr	r3, [sp, #4]
 8011130:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011134:	b9a2      	cbnz	r2, 8011160 <scalbn+0x38>
 8011136:	9a00      	ldr	r2, [sp, #0]
 8011138:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801113c:	4313      	orrs	r3, r2
 801113e:	d03a      	beq.n	80111b6 <scalbn+0x8e>
 8011140:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8011218 <scalbn+0xf0>
 8011144:	4b40      	ldr	r3, [pc, #256]	; (8011248 <scalbn+0x120>)
 8011146:	ee20 7b07 	vmul.f64	d7, d0, d7
 801114a:	4298      	cmp	r0, r3
 801114c:	ed8d 7b00 	vstr	d7, [sp]
 8011150:	da11      	bge.n	8011176 <scalbn+0x4e>
 8011152:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8011220 <scalbn+0xf8>
 8011156:	ed9d 6b00 	vldr	d6, [sp]
 801115a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801115e:	e007      	b.n	8011170 <scalbn+0x48>
 8011160:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011164:	428a      	cmp	r2, r1
 8011166:	d10a      	bne.n	801117e <scalbn+0x56>
 8011168:	ed9d 7b00 	vldr	d7, [sp]
 801116c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011170:	ed8d 7b00 	vstr	d7, [sp]
 8011174:	e01f      	b.n	80111b6 <scalbn+0x8e>
 8011176:	9b01      	ldr	r3, [sp, #4]
 8011178:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801117c:	3a36      	subs	r2, #54	; 0x36
 801117e:	4402      	add	r2, r0
 8011180:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011184:	428a      	cmp	r2, r1
 8011186:	dd0a      	ble.n	801119e <scalbn+0x76>
 8011188:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8011228 <scalbn+0x100>
 801118c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8011230 <scalbn+0x108>
 8011190:	eeb0 6b47 	vmov.f64	d6, d7
 8011194:	9b01      	ldr	r3, [sp, #4]
 8011196:	2b00      	cmp	r3, #0
 8011198:	fe27 7b05 	vselge.f64	d7, d7, d5
 801119c:	e7dd      	b.n	801115a <scalbn+0x32>
 801119e:	2a00      	cmp	r2, #0
 80111a0:	dd0d      	ble.n	80111be <scalbn+0x96>
 80111a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80111a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80111aa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80111ae:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80111b2:	e9cd 0100 	strd	r0, r1, [sp]
 80111b6:	ed9d 0b00 	vldr	d0, [sp]
 80111ba:	b002      	add	sp, #8
 80111bc:	4770      	bx	lr
 80111be:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80111c2:	da18      	bge.n	80111f6 <scalbn+0xce>
 80111c4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80111c8:	4298      	cmp	r0, r3
 80111ca:	9b01      	ldr	r3, [sp, #4]
 80111cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80111d0:	dd09      	ble.n	80111e6 <scalbn+0xbe>
 80111d2:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8011228 <scalbn+0x100>
 80111d6:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8011230 <scalbn+0x108>
 80111da:	eeb0 6b47 	vmov.f64	d6, d7
 80111de:	2b00      	cmp	r3, #0
 80111e0:	fe07 7b05 	vseleq.f64	d7, d7, d5
 80111e4:	e7b9      	b.n	801115a <scalbn+0x32>
 80111e6:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8011220 <scalbn+0xf8>
 80111ea:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8011238 <scalbn+0x110>
 80111ee:	eeb0 6b47 	vmov.f64	d6, d7
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	e7f4      	b.n	80111e0 <scalbn+0xb8>
 80111f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80111fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80111fe:	3236      	adds	r2, #54	; 0x36
 8011200:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011204:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011208:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8011240 <scalbn+0x118>
 801120c:	ec41 0b17 	vmov	d7, r0, r1
 8011210:	e7a3      	b.n	801115a <scalbn+0x32>
 8011212:	bf00      	nop
 8011214:	f3af 8000 	nop.w
 8011218:	00000000 	.word	0x00000000
 801121c:	43500000 	.word	0x43500000
 8011220:	c2f8f359 	.word	0xc2f8f359
 8011224:	01a56e1f 	.word	0x01a56e1f
 8011228:	8800759c 	.word	0x8800759c
 801122c:	7e37e43c 	.word	0x7e37e43c
 8011230:	8800759c 	.word	0x8800759c
 8011234:	fe37e43c 	.word	0xfe37e43c
 8011238:	c2f8f359 	.word	0xc2f8f359
 801123c:	81a56e1f 	.word	0x81a56e1f
 8011240:	00000000 	.word	0x00000000
 8011244:	3c900000 	.word	0x3c900000
 8011248:	ffff3cb0 	.word	0xffff3cb0

0801124c <abort>:
 801124c:	b508      	push	{r3, lr}
 801124e:	2006      	movs	r0, #6
 8011250:	f000 f874 	bl	801133c <raise>
 8011254:	2001      	movs	r0, #1
 8011256:	f7f5 f95b 	bl	8006510 <_exit>
	...

0801125c <__errno>:
 801125c:	4b01      	ldr	r3, [pc, #4]	; (8011264 <__errno+0x8>)
 801125e:	6818      	ldr	r0, [r3, #0]
 8011260:	4770      	bx	lr
 8011262:	bf00      	nop
 8011264:	240000a8 	.word	0x240000a8

08011268 <__libc_init_array>:
 8011268:	b570      	push	{r4, r5, r6, lr}
 801126a:	4d0d      	ldr	r5, [pc, #52]	; (80112a0 <__libc_init_array+0x38>)
 801126c:	4c0d      	ldr	r4, [pc, #52]	; (80112a4 <__libc_init_array+0x3c>)
 801126e:	1b64      	subs	r4, r4, r5
 8011270:	10a4      	asrs	r4, r4, #2
 8011272:	2600      	movs	r6, #0
 8011274:	42a6      	cmp	r6, r4
 8011276:	d109      	bne.n	801128c <__libc_init_array+0x24>
 8011278:	4d0b      	ldr	r5, [pc, #44]	; (80112a8 <__libc_init_array+0x40>)
 801127a:	4c0c      	ldr	r4, [pc, #48]	; (80112ac <__libc_init_array+0x44>)
 801127c:	f000 f970 	bl	8011560 <_init>
 8011280:	1b64      	subs	r4, r4, r5
 8011282:	10a4      	asrs	r4, r4, #2
 8011284:	2600      	movs	r6, #0
 8011286:	42a6      	cmp	r6, r4
 8011288:	d105      	bne.n	8011296 <__libc_init_array+0x2e>
 801128a:	bd70      	pop	{r4, r5, r6, pc}
 801128c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011290:	4798      	blx	r3
 8011292:	3601      	adds	r6, #1
 8011294:	e7ee      	b.n	8011274 <__libc_init_array+0xc>
 8011296:	f855 3b04 	ldr.w	r3, [r5], #4
 801129a:	4798      	blx	r3
 801129c:	3601      	adds	r6, #1
 801129e:	e7f2      	b.n	8011286 <__libc_init_array+0x1e>
 80112a0:	08013398 	.word	0x08013398
 80112a4:	08013398 	.word	0x08013398
 80112a8:	08013398 	.word	0x08013398
 80112ac:	080133a0 	.word	0x080133a0

080112b0 <memcpy>:
 80112b0:	440a      	add	r2, r1
 80112b2:	4291      	cmp	r1, r2
 80112b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80112b8:	d100      	bne.n	80112bc <memcpy+0xc>
 80112ba:	4770      	bx	lr
 80112bc:	b510      	push	{r4, lr}
 80112be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80112c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80112c6:	4291      	cmp	r1, r2
 80112c8:	d1f9      	bne.n	80112be <memcpy+0xe>
 80112ca:	bd10      	pop	{r4, pc}

080112cc <memset>:
 80112cc:	4402      	add	r2, r0
 80112ce:	4603      	mov	r3, r0
 80112d0:	4293      	cmp	r3, r2
 80112d2:	d100      	bne.n	80112d6 <memset+0xa>
 80112d4:	4770      	bx	lr
 80112d6:	f803 1b01 	strb.w	r1, [r3], #1
 80112da:	e7f9      	b.n	80112d0 <memset+0x4>

080112dc <realloc>:
 80112dc:	4b02      	ldr	r3, [pc, #8]	; (80112e8 <realloc+0xc>)
 80112de:	460a      	mov	r2, r1
 80112e0:	4601      	mov	r1, r0
 80112e2:	6818      	ldr	r0, [r3, #0]
 80112e4:	f000 b8a0 	b.w	8011428 <_realloc_r>
 80112e8:	240000a8 	.word	0x240000a8

080112ec <_raise_r>:
 80112ec:	291f      	cmp	r1, #31
 80112ee:	b538      	push	{r3, r4, r5, lr}
 80112f0:	4604      	mov	r4, r0
 80112f2:	460d      	mov	r5, r1
 80112f4:	d904      	bls.n	8011300 <_raise_r+0x14>
 80112f6:	2316      	movs	r3, #22
 80112f8:	6003      	str	r3, [r0, #0]
 80112fa:	f04f 30ff 	mov.w	r0, #4294967295
 80112fe:	bd38      	pop	{r3, r4, r5, pc}
 8011300:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011302:	b112      	cbz	r2, 801130a <_raise_r+0x1e>
 8011304:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011308:	b94b      	cbnz	r3, 801131e <_raise_r+0x32>
 801130a:	4620      	mov	r0, r4
 801130c:	f000 f830 	bl	8011370 <_getpid_r>
 8011310:	462a      	mov	r2, r5
 8011312:	4601      	mov	r1, r0
 8011314:	4620      	mov	r0, r4
 8011316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801131a:	f000 b817 	b.w	801134c <_kill_r>
 801131e:	2b01      	cmp	r3, #1
 8011320:	d00a      	beq.n	8011338 <_raise_r+0x4c>
 8011322:	1c59      	adds	r1, r3, #1
 8011324:	d103      	bne.n	801132e <_raise_r+0x42>
 8011326:	2316      	movs	r3, #22
 8011328:	6003      	str	r3, [r0, #0]
 801132a:	2001      	movs	r0, #1
 801132c:	e7e7      	b.n	80112fe <_raise_r+0x12>
 801132e:	2400      	movs	r4, #0
 8011330:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011334:	4628      	mov	r0, r5
 8011336:	4798      	blx	r3
 8011338:	2000      	movs	r0, #0
 801133a:	e7e0      	b.n	80112fe <_raise_r+0x12>

0801133c <raise>:
 801133c:	4b02      	ldr	r3, [pc, #8]	; (8011348 <raise+0xc>)
 801133e:	4601      	mov	r1, r0
 8011340:	6818      	ldr	r0, [r3, #0]
 8011342:	f7ff bfd3 	b.w	80112ec <_raise_r>
 8011346:	bf00      	nop
 8011348:	240000a8 	.word	0x240000a8

0801134c <_kill_r>:
 801134c:	b538      	push	{r3, r4, r5, lr}
 801134e:	4d07      	ldr	r5, [pc, #28]	; (801136c <_kill_r+0x20>)
 8011350:	2300      	movs	r3, #0
 8011352:	4604      	mov	r4, r0
 8011354:	4608      	mov	r0, r1
 8011356:	4611      	mov	r1, r2
 8011358:	602b      	str	r3, [r5, #0]
 801135a:	f7f5 f8c9 	bl	80064f0 <_kill>
 801135e:	1c43      	adds	r3, r0, #1
 8011360:	d102      	bne.n	8011368 <_kill_r+0x1c>
 8011362:	682b      	ldr	r3, [r5, #0]
 8011364:	b103      	cbz	r3, 8011368 <_kill_r+0x1c>
 8011366:	6023      	str	r3, [r4, #0]
 8011368:	bd38      	pop	{r3, r4, r5, pc}
 801136a:	bf00      	nop
 801136c:	2400124c 	.word	0x2400124c

08011370 <_getpid_r>:
 8011370:	f7f5 b8b6 	b.w	80064e0 <_getpid>

08011374 <_malloc_r>:
 8011374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011376:	1ccd      	adds	r5, r1, #3
 8011378:	f025 0503 	bic.w	r5, r5, #3
 801137c:	3508      	adds	r5, #8
 801137e:	2d0c      	cmp	r5, #12
 8011380:	bf38      	it	cc
 8011382:	250c      	movcc	r5, #12
 8011384:	2d00      	cmp	r5, #0
 8011386:	4606      	mov	r6, r0
 8011388:	db01      	blt.n	801138e <_malloc_r+0x1a>
 801138a:	42a9      	cmp	r1, r5
 801138c:	d903      	bls.n	8011396 <_malloc_r+0x22>
 801138e:	230c      	movs	r3, #12
 8011390:	6033      	str	r3, [r6, #0]
 8011392:	2000      	movs	r0, #0
 8011394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011396:	f000 f87d 	bl	8011494 <__malloc_lock>
 801139a:	4921      	ldr	r1, [pc, #132]	; (8011420 <_malloc_r+0xac>)
 801139c:	680a      	ldr	r2, [r1, #0]
 801139e:	4614      	mov	r4, r2
 80113a0:	b99c      	cbnz	r4, 80113ca <_malloc_r+0x56>
 80113a2:	4f20      	ldr	r7, [pc, #128]	; (8011424 <_malloc_r+0xb0>)
 80113a4:	683b      	ldr	r3, [r7, #0]
 80113a6:	b923      	cbnz	r3, 80113b2 <_malloc_r+0x3e>
 80113a8:	4621      	mov	r1, r4
 80113aa:	4630      	mov	r0, r6
 80113ac:	f000 f862 	bl	8011474 <_sbrk_r>
 80113b0:	6038      	str	r0, [r7, #0]
 80113b2:	4629      	mov	r1, r5
 80113b4:	4630      	mov	r0, r6
 80113b6:	f000 f85d 	bl	8011474 <_sbrk_r>
 80113ba:	1c43      	adds	r3, r0, #1
 80113bc:	d123      	bne.n	8011406 <_malloc_r+0x92>
 80113be:	230c      	movs	r3, #12
 80113c0:	6033      	str	r3, [r6, #0]
 80113c2:	4630      	mov	r0, r6
 80113c4:	f000 f86c 	bl	80114a0 <__malloc_unlock>
 80113c8:	e7e3      	b.n	8011392 <_malloc_r+0x1e>
 80113ca:	6823      	ldr	r3, [r4, #0]
 80113cc:	1b5b      	subs	r3, r3, r5
 80113ce:	d417      	bmi.n	8011400 <_malloc_r+0x8c>
 80113d0:	2b0b      	cmp	r3, #11
 80113d2:	d903      	bls.n	80113dc <_malloc_r+0x68>
 80113d4:	6023      	str	r3, [r4, #0]
 80113d6:	441c      	add	r4, r3
 80113d8:	6025      	str	r5, [r4, #0]
 80113da:	e004      	b.n	80113e6 <_malloc_r+0x72>
 80113dc:	6863      	ldr	r3, [r4, #4]
 80113de:	42a2      	cmp	r2, r4
 80113e0:	bf0c      	ite	eq
 80113e2:	600b      	streq	r3, [r1, #0]
 80113e4:	6053      	strne	r3, [r2, #4]
 80113e6:	4630      	mov	r0, r6
 80113e8:	f000 f85a 	bl	80114a0 <__malloc_unlock>
 80113ec:	f104 000b 	add.w	r0, r4, #11
 80113f0:	1d23      	adds	r3, r4, #4
 80113f2:	f020 0007 	bic.w	r0, r0, #7
 80113f6:	1ac2      	subs	r2, r0, r3
 80113f8:	d0cc      	beq.n	8011394 <_malloc_r+0x20>
 80113fa:	1a1b      	subs	r3, r3, r0
 80113fc:	50a3      	str	r3, [r4, r2]
 80113fe:	e7c9      	b.n	8011394 <_malloc_r+0x20>
 8011400:	4622      	mov	r2, r4
 8011402:	6864      	ldr	r4, [r4, #4]
 8011404:	e7cc      	b.n	80113a0 <_malloc_r+0x2c>
 8011406:	1cc4      	adds	r4, r0, #3
 8011408:	f024 0403 	bic.w	r4, r4, #3
 801140c:	42a0      	cmp	r0, r4
 801140e:	d0e3      	beq.n	80113d8 <_malloc_r+0x64>
 8011410:	1a21      	subs	r1, r4, r0
 8011412:	4630      	mov	r0, r6
 8011414:	f000 f82e 	bl	8011474 <_sbrk_r>
 8011418:	3001      	adds	r0, #1
 801141a:	d1dd      	bne.n	80113d8 <_malloc_r+0x64>
 801141c:	e7cf      	b.n	80113be <_malloc_r+0x4a>
 801141e:	bf00      	nop
 8011420:	24000ca4 	.word	0x24000ca4
 8011424:	24000ca8 	.word	0x24000ca8

08011428 <_realloc_r>:
 8011428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801142a:	4607      	mov	r7, r0
 801142c:	4614      	mov	r4, r2
 801142e:	460e      	mov	r6, r1
 8011430:	b921      	cbnz	r1, 801143c <_realloc_r+0x14>
 8011432:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011436:	4611      	mov	r1, r2
 8011438:	f7ff bf9c 	b.w	8011374 <_malloc_r>
 801143c:	b922      	cbnz	r2, 8011448 <_realloc_r+0x20>
 801143e:	f000 f835 	bl	80114ac <_free_r>
 8011442:	4625      	mov	r5, r4
 8011444:	4628      	mov	r0, r5
 8011446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011448:	f000 f880 	bl	801154c <_malloc_usable_size_r>
 801144c:	42a0      	cmp	r0, r4
 801144e:	d20f      	bcs.n	8011470 <_realloc_r+0x48>
 8011450:	4621      	mov	r1, r4
 8011452:	4638      	mov	r0, r7
 8011454:	f7ff ff8e 	bl	8011374 <_malloc_r>
 8011458:	4605      	mov	r5, r0
 801145a:	2800      	cmp	r0, #0
 801145c:	d0f2      	beq.n	8011444 <_realloc_r+0x1c>
 801145e:	4631      	mov	r1, r6
 8011460:	4622      	mov	r2, r4
 8011462:	f7ff ff25 	bl	80112b0 <memcpy>
 8011466:	4631      	mov	r1, r6
 8011468:	4638      	mov	r0, r7
 801146a:	f000 f81f 	bl	80114ac <_free_r>
 801146e:	e7e9      	b.n	8011444 <_realloc_r+0x1c>
 8011470:	4635      	mov	r5, r6
 8011472:	e7e7      	b.n	8011444 <_realloc_r+0x1c>

08011474 <_sbrk_r>:
 8011474:	b538      	push	{r3, r4, r5, lr}
 8011476:	4d06      	ldr	r5, [pc, #24]	; (8011490 <_sbrk_r+0x1c>)
 8011478:	2300      	movs	r3, #0
 801147a:	4604      	mov	r4, r0
 801147c:	4608      	mov	r0, r1
 801147e:	602b      	str	r3, [r5, #0]
 8011480:	f7f5 f850 	bl	8006524 <_sbrk>
 8011484:	1c43      	adds	r3, r0, #1
 8011486:	d102      	bne.n	801148e <_sbrk_r+0x1a>
 8011488:	682b      	ldr	r3, [r5, #0]
 801148a:	b103      	cbz	r3, 801148e <_sbrk_r+0x1a>
 801148c:	6023      	str	r3, [r4, #0]
 801148e:	bd38      	pop	{r3, r4, r5, pc}
 8011490:	2400124c 	.word	0x2400124c

08011494 <__malloc_lock>:
 8011494:	4801      	ldr	r0, [pc, #4]	; (801149c <__malloc_lock+0x8>)
 8011496:	f000 b861 	b.w	801155c <__retarget_lock_acquire_recursive>
 801149a:	bf00      	nop
 801149c:	24001254 	.word	0x24001254

080114a0 <__malloc_unlock>:
 80114a0:	4801      	ldr	r0, [pc, #4]	; (80114a8 <__malloc_unlock+0x8>)
 80114a2:	f000 b85c 	b.w	801155e <__retarget_lock_release_recursive>
 80114a6:	bf00      	nop
 80114a8:	24001254 	.word	0x24001254

080114ac <_free_r>:
 80114ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80114ae:	2900      	cmp	r1, #0
 80114b0:	d048      	beq.n	8011544 <_free_r+0x98>
 80114b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80114b6:	9001      	str	r0, [sp, #4]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	f1a1 0404 	sub.w	r4, r1, #4
 80114be:	bfb8      	it	lt
 80114c0:	18e4      	addlt	r4, r4, r3
 80114c2:	f7ff ffe7 	bl	8011494 <__malloc_lock>
 80114c6:	4a20      	ldr	r2, [pc, #128]	; (8011548 <_free_r+0x9c>)
 80114c8:	9801      	ldr	r0, [sp, #4]
 80114ca:	6813      	ldr	r3, [r2, #0]
 80114cc:	4615      	mov	r5, r2
 80114ce:	b933      	cbnz	r3, 80114de <_free_r+0x32>
 80114d0:	6063      	str	r3, [r4, #4]
 80114d2:	6014      	str	r4, [r2, #0]
 80114d4:	b003      	add	sp, #12
 80114d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80114da:	f7ff bfe1 	b.w	80114a0 <__malloc_unlock>
 80114de:	42a3      	cmp	r3, r4
 80114e0:	d90b      	bls.n	80114fa <_free_r+0x4e>
 80114e2:	6821      	ldr	r1, [r4, #0]
 80114e4:	1862      	adds	r2, r4, r1
 80114e6:	4293      	cmp	r3, r2
 80114e8:	bf04      	itt	eq
 80114ea:	681a      	ldreq	r2, [r3, #0]
 80114ec:	685b      	ldreq	r3, [r3, #4]
 80114ee:	6063      	str	r3, [r4, #4]
 80114f0:	bf04      	itt	eq
 80114f2:	1852      	addeq	r2, r2, r1
 80114f4:	6022      	streq	r2, [r4, #0]
 80114f6:	602c      	str	r4, [r5, #0]
 80114f8:	e7ec      	b.n	80114d4 <_free_r+0x28>
 80114fa:	461a      	mov	r2, r3
 80114fc:	685b      	ldr	r3, [r3, #4]
 80114fe:	b10b      	cbz	r3, 8011504 <_free_r+0x58>
 8011500:	42a3      	cmp	r3, r4
 8011502:	d9fa      	bls.n	80114fa <_free_r+0x4e>
 8011504:	6811      	ldr	r1, [r2, #0]
 8011506:	1855      	adds	r5, r2, r1
 8011508:	42a5      	cmp	r5, r4
 801150a:	d10b      	bne.n	8011524 <_free_r+0x78>
 801150c:	6824      	ldr	r4, [r4, #0]
 801150e:	4421      	add	r1, r4
 8011510:	1854      	adds	r4, r2, r1
 8011512:	42a3      	cmp	r3, r4
 8011514:	6011      	str	r1, [r2, #0]
 8011516:	d1dd      	bne.n	80114d4 <_free_r+0x28>
 8011518:	681c      	ldr	r4, [r3, #0]
 801151a:	685b      	ldr	r3, [r3, #4]
 801151c:	6053      	str	r3, [r2, #4]
 801151e:	4421      	add	r1, r4
 8011520:	6011      	str	r1, [r2, #0]
 8011522:	e7d7      	b.n	80114d4 <_free_r+0x28>
 8011524:	d902      	bls.n	801152c <_free_r+0x80>
 8011526:	230c      	movs	r3, #12
 8011528:	6003      	str	r3, [r0, #0]
 801152a:	e7d3      	b.n	80114d4 <_free_r+0x28>
 801152c:	6825      	ldr	r5, [r4, #0]
 801152e:	1961      	adds	r1, r4, r5
 8011530:	428b      	cmp	r3, r1
 8011532:	bf04      	itt	eq
 8011534:	6819      	ldreq	r1, [r3, #0]
 8011536:	685b      	ldreq	r3, [r3, #4]
 8011538:	6063      	str	r3, [r4, #4]
 801153a:	bf04      	itt	eq
 801153c:	1949      	addeq	r1, r1, r5
 801153e:	6021      	streq	r1, [r4, #0]
 8011540:	6054      	str	r4, [r2, #4]
 8011542:	e7c7      	b.n	80114d4 <_free_r+0x28>
 8011544:	b003      	add	sp, #12
 8011546:	bd30      	pop	{r4, r5, pc}
 8011548:	24000ca4 	.word	0x24000ca4

0801154c <_malloc_usable_size_r>:
 801154c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011550:	1f18      	subs	r0, r3, #4
 8011552:	2b00      	cmp	r3, #0
 8011554:	bfbc      	itt	lt
 8011556:	580b      	ldrlt	r3, [r1, r0]
 8011558:	18c0      	addlt	r0, r0, r3
 801155a:	4770      	bx	lr

0801155c <__retarget_lock_acquire_recursive>:
 801155c:	4770      	bx	lr

0801155e <__retarget_lock_release_recursive>:
 801155e:	4770      	bx	lr

08011560 <_init>:
 8011560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011562:	bf00      	nop
 8011564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011566:	bc08      	pop	{r3}
 8011568:	469e      	mov	lr, r3
 801156a:	4770      	bx	lr

0801156c <_fini>:
 801156c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801156e:	bf00      	nop
 8011570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011572:	bc08      	pop	{r3}
 8011574:	469e      	mov	lr, r3
 8011576:	4770      	bx	lr
